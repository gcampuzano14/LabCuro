__main__: None -> <PyScript '__main__' D:\Dropbox\Programming\Python\APPS\pyinstaller-2.0\support\_pyi_bootstrap.py imports=[('archive', 0, 0, -1), ('iu', 0, 0, -1), ('sys', 0, 0, -1), ('os', 0, 0, -1), ('site', 0, 0, -1)] binaries=[] datas=[]>
archive: None -> <PyModule 'archive' D:\Dropbox\Programming\Python\APPS\pyinstaller-2.0\PyInstaller\loader\archive.pyc imports=[('marshal', 0, 0, -1), ('struct', 0, 0, -1), ('imp', 0, 0, -1), ('sys', 0, 0, -1), ('iu', 0, 0, -1), ('imp', 1, 0, -1), ('os', 1, 1, -1), ('zlib', 1, 1, -1), ('AES', 1, 1, -1), ('os', 1, 1, -1), ('os', 1, 1, -1)] binaries=[] datas=[]>
iu: None -> <PyModule 'iu' D:\Dropbox\Programming\Python\APPS\pyinstaller-2.0\PyInstaller\loader\iu.pyc imports=[('sys', 0, 0, -1), ('imp', 0, 0, -1), ('marshal', 0, 0, -1), ('zipimport', 0, 0, -1), ('__builtin__', 1, 0, -1), ('posix', 1, 1, -1), ('posix.stat', 1, 1, -1), ('posix.getcwd', 1, 1, -1), ('posix.environ', 1, 1, -1), ('posix.listdir', 1, 1, -1), ('nt', 1, 1, -1), ('nt.stat', 1, 1, -1), ('nt.getcwd', 1, 1, -1), ('nt.environ', 1, 1, -1), ('nt.listdir', 1, 1, -1)] binaries=[] datas=[]>
sys: None -> <BuiltinModule 'sys' None imports=[] binaries=[] datas=[]>
os: None -> <PyModule 'os' C:\Anaconda\lib\os.pyc imports=[('sys', 0, 0, -1), ('errno', 0, 0, -1), ('posix', 0, 1, -1), ('posix.*', 0, 1, -1), ('posix', 0, 1, -1), ('posix._exit', 0, 1, -1), ('posixpath', 0, 1, -1), ('posix', 0, 1, -1), ('nt', 0, 1, -1), ('nt.*', 0, 1, -1), ('nt', 0, 1, -1), ('nt._exit', 0, 1, -1), ('ntpath', 0, 1, -1), ('nt', 0, 1, -1), ('ntpath', 0, 1, -1), ('os2emxpath', 0, 1, -1), ('_emx_link', 0, 1, -1), ('_emx_link.link', 0, 1, -1), ('ntpath', 0, 1, -1), ('os.path', 0, 0, -1), ('os.path.curdir', 0, 0, -1), ('os.path.pardir', 0, 0, -1), ('os.path.sep', 0, 0, -1), ('os.path.pathsep', 0, 0, -1), ('os.path.defpath', 0, 0, -1), ('os.path.extsep', 0, 0, -1), ('os.path.altsep', 0, 0, -1), ('os.path.devnull', 0, 0, -1), ('UserDict', 0, 1, -1), ('copy_reg', 0, 0, -1), ('warnings', 1, 0, -1), ('subprocess', 1, 0, -1), ('warnings', 1, 0, -1), ('subprocess', 1, 0, -1), ('warnings', 1, 0, -1), ('subprocess', 1, 0, -1)] binaries=[] datas=[]>
site: None -> <PyModule 'site' D:\Dropbox\Programming\Python\APPS\pyinstaller-2.0\PyInstaller\fake\fake-site.pyc imports=[] binaries=[] datas=[]>
marshal: None -> <BuiltinModule 'marshal' None imports=[] binaries=[] datas=[]>
struct: None -> <PyModule 'struct' C:\Anaconda\lib\struct.pyc imports=[('_struct', 0, 0, -1), ('_struct.*', 0, 0, -1), ('_struct', 0, 0, -1), ('_struct._clearcache', 0, 0, -1), ('_struct', 0, 0, -1), ('_struct.__doc__', 0, 0, -1)] binaries=[] datas=[]>
imp: None -> <BuiltinModule 'imp' None imports=[] binaries=[] datas=[]>
zlib: None -> <BuiltinModule 'zlib' None imports=[] binaries=[] datas=[]>
AES: None -> None
  DEL AES
_struct: None -> <BuiltinModule '_struct' None imports=[] binaries=[] datas=[]>
zipimport: None -> <BuiltinModule 'zipimport' None imports=[] binaries=[] datas=[]>
__builtin__: None -> <BuiltinModule '__builtin__' None imports=[] binaries=[] datas=[]>
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
nt: None -> <BuiltinModule 'nt' None imports=[] binaries=[] datas=[]>
errno: None -> <BuiltinModule 'errno' None imports=[] binaries=[] datas=[]>
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posixpath: None -> <PyModule 'posixpath' C:\Anaconda\lib\posixpath.pyc imports=[('os', 0, 0, -1), ('sys', 0, 0, -1), ('stat', 0, 0, -1), ('genericpath', 0, 0, -1), ('warnings', 0, 0, -1), ('genericpath', 0, 0, -1), ('genericpath.*', 0, 0, -1), ('pwd', 1, 1, -1), ('pwd', 1, 1, -1), ('re', 1, 1, -1)] binaries=[] datas=[]>
posix: None -> None
  DEL posix
ntpath: None -> <PyModule 'ntpath' C:\Anaconda\lib\ntpath.pyc imports=[('os', 0, 0, -1), ('sys', 0, 0, -1), ('stat', 0, 0, -1), ('genericpath', 0, 0, -1), ('warnings', 0, 0, -1), ('genericpath', 0, 0, -1), ('genericpath.*', 0, 0, -1), ('nt', 0, 0, -1), ('nt._getfullpathname', 0, 0, -1), ('nt', 0, 0, -1), ('nt._isdir', 0, 0, -1), ('string', 1, 0, -1)] binaries=[] datas=[]>
os2emxpath: None -> <PyModule 'os2emxpath' C:\Anaconda\lib\os2emxpath.pyc imports=[('os', 0, 0, -1), ('stat', 0, 0, -1), ('genericpath', 0, 0, -1), ('genericpath.*', 0, 0, -1), ('ntpath', 0, 0, -1), ('ntpath.expanduser', 0, 0, -1), ('ntpath.expandvars', 0, 0, -1), ('ntpath.isabs', 0, 0, -1), ('ntpath.islink', 0, 0, -1), ('ntpath.splitdrive', 0, 0, -1), ('ntpath.splitext', 0, 0, -1), ('ntpath.split', 0, 0, -1), ('ntpath.walk', 0, 0, -1)] binaries=[] datas=[]>
_emx_link: None -> None
  DEL _emx_link
_emx_link: None -> None
  DEL _emx_link
UserDict: None -> <PyModule 'UserDict' C:\Anaconda\lib\UserDict.pyc imports=[('_abcoll', 0, 0, -1), ('copy', 1, 0, -1)] binaries=[] datas=[]>
copy_reg: None -> <PyModule 'copy_reg' C:\Anaconda\lib\copy_reg.pyc imports=[('types', 0, 0, -1), ('types.ClassType', 0, 0, -1)] binaries=[] datas=[]>
warnings: None -> <PyModule 'warnings' C:\Anaconda\lib\warnings.pyc imports=[('linecache', 0, 0, -1), ('sys', 0, 0, -1), ('types', 0, 0, -1), ('_warnings', 0, 0, -1), ('_warnings.filters', 0, 0, -1), ('_warnings.default_action', 0, 0, -1), ('_warnings.once_registry', 0, 0, -1), ('_warnings.warn', 0, 0, -1), ('_warnings.warn_explicit', 0, 0, -1), ('re', 1, 0, -1), ('re', 1, 0, -1), ('re', 1, 0, -1)] binaries=[] datas=[]>
subprocess: None -> <PyModule 'subprocess' C:\Anaconda\lib\subprocess.pyc imports=[('sys', 0, 0, -1), ('os', 0, 0, -1), ('types', 0, 0, -1), ('traceback', 0, 0, -1), ('gc', 0, 0, -1), ('signal', 0, 0, -1), ('errno', 0, 0, -1), ('threading', 0, 1, -1), ('msvcrt', 0, 1, -1), ('_subprocess', 0, 1, -1), ('select', 0, 1, -1), ('fcntl', 0, 1, -1), ('pickle', 0, 1, -1), ('_subprocess', 0, 1, -1), ('_subprocess.CREATE_NEW_CONSOLE', 0, 1, -1), ('_subprocess.CREATE_NEW_PROCESS_GROUP', 0, 1, -1), ('_subprocess.STD_INPUT_HANDLE', 0, 1, -1), ('_subprocess.STD_OUTPUT_HANDLE', 0, 1, -1), ('_subprocess.STD_ERROR_HANDLE', 0, 1, -1), ('_subprocess.SW_HIDE', 0, 1, -1), ('_subprocess.STARTF_USESTDHANDLES', 0, 1, -1), ('_subprocess.STARTF_USESHOWWINDOW', 0, 1, -1)] binaries=[] datas=[]>
stat: None -> <PyModule 'stat' C:\Anaconda\lib\stat.pyc imports=[] binaries=[] datas=[]>
genericpath: None -> <PyModule 'genericpath' C:\Anaconda\lib\genericpath.pyc imports=[('os', 0, 0, -1), ('stat', 0, 0, -1)] binaries=[] datas=[]>
pwd: None -> None
  DEL pwd
pwd: None -> None
  DEL pwd
re: None -> <PyModule 're' C:\Anaconda\lib\re.pyc imports=[('sys', 0, 0, -1), ('sre_compile', 0, 0, -1), ('sre_parse', 0, 0, -1), ('copy_reg', 0, 0, -1), ('sre_constants', 1, 0, -1), ('sre_constants.BRANCH', 1, 0, -1), ('sre_constants.SUBPATTERN', 1, 0, -1)] binaries=[] datas=[]>
linecache: None -> <PyModule 'linecache' C:\Anaconda\lib\linecache.pyc imports=[('sys', 0, 0, -1), ('os', 0, 0, -1)] binaries=[] datas=[]>
types: None -> <PyModule 'types' C:\Anaconda\lib\types.pyc imports=[('sys', 0, 0, -1)] binaries=[] datas=[]>
_warnings: None -> <BuiltinModule '_warnings' None imports=[] binaries=[] datas=[]>
sre_compile: None -> <PyModule 'sre_compile' C:\Anaconda\lib\sre_compile.pyc imports=[('_sre', 0, 0, -1), ('sys', 0, 0, -1), ('sre_parse', 0, 0, -1), ('sre_constants', 0, 0, -1), ('sre_constants.*', 0, 0, -1), ('array', 1, 0, -1)] binaries=[] datas=[]>
sre_parse: None -> <PyModule 'sre_parse' C:\Anaconda\lib\sre_parse.pyc imports=[('sys', 0, 0, -1), ('sre_constants', 0, 0, -1), ('sre_constants.*', 0, 0, -1)] binaries=[] datas=[]>
sre_constants: None -> <PyModule 'sre_constants' C:\Anaconda\lib\sre_constants.pyc imports=[('_sre', 0, 0, -1), ('_sre.MAXREPEAT', 0, 0, -1), ('_sre', 0, 1, -1)] binaries=[] datas=[]>
_sre: None -> <BuiltinModule '_sre' None imports=[('copy_reg', 0, 0, -1)] binaries=[] datas=[]>
array: None -> <BuiltinModule 'array' None imports=[] binaries=[] datas=[]>
string: None -> <PyModule 'string' C:\Anaconda\lib\string.pyc imports=[('re', 0, 0, -1), ('strop', 0, 0, -1), ('strop.maketrans', 0, 0, -1), ('strop.lowercase', 0, 0, -1), ('strop.uppercase', 0, 0, -1), ('strop.whitespace', 0, 0, -1)] binaries=[] datas=[]>
strop: None -> <BuiltinModule 'strop' None imports=[] binaries=[] datas=[]>
_abcoll: None -> <PyModule '_abcoll' C:\Anaconda\lib\_abcoll.pyc imports=[('abc', 0, 0, -1), ('abc.ABCMeta', 0, 0, -1), ('abc.abstractmethod', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
copy: None -> <PyModule 'copy' C:\Anaconda\lib\copy.pyc imports=[('types', 0, 0, -1), ('weakref', 0, 0, -1), ('copy_reg', 0, 0, -1), ('copy_reg.dispatch_table', 0, 0, -1), ('org.python.core', 0, 0, -1), ('org.python.core.PyStringMap', 0, 0, -1), ('repr', 1, 0, -1), ('repr', 1, 0, -1), ('sys', 1, 1, -1)] binaries=[] datas=[]>
abc: None -> <PyModule 'abc' C:\Anaconda\lib\abc.pyc imports=[('types', 0, 0, -1), ('_weakrefset', 0, 0, -1), ('_weakrefset.WeakSet', 0, 0, -1)] binaries=[] datas=[]>
_weakrefset: None -> <PyModule '_weakrefset' C:\Anaconda\lib\_weakrefset.pyc imports=[('_weakref', 0, 0, -1), ('_weakref.ref', 0, 0, -1)] binaries=[] datas=[]>
_weakref: None -> <BuiltinModule '_weakref' None imports=[] binaries=[] datas=[]>
weakref: None -> <PyModule 'weakref' C:\Anaconda\lib\weakref.pyc imports=[('UserDict', 0, 0, -1), ('_weakref', 0, 0, -1), ('_weakref.getweakrefcount', 0, 0, -1), ('_weakref.getweakrefs', 0, 0, -1), ('_weakref.ref', 0, 0, -1), ('_weakref.proxy', 0, 0, -1), ('_weakref.CallableProxyType', 0, 0, -1), ('_weakref.ProxyType', 0, 0, -1), ('_weakref.ReferenceType', 0, 0, -1), ('_weakrefset', 0, 0, -1), ('_weakrefset.WeakSet', 0, 0, -1), ('exceptions', 0, 0, -1), ('exceptions.ReferenceError', 0, 0, -1), ('copy', 1, 0, -1), ('copy.deepcopy', 1, 0, -1), ('copy', 1, 0, -1), ('copy.deepcopy', 1, 0, -1)] binaries=[] datas=[]>
org: None -> None
  DEL org
org: None -> None
  DEL org
repr: None -> <PyModule 'repr' C:\Anaconda\lib\repr.pyc imports=[('__builtin__', 0, 0, -1), ('itertools', 0, 0, -1), ('itertools.islice', 0, 0, -1)] binaries=[] datas=[]>
exceptions: None -> <BuiltinModule 'exceptions' None imports=[] binaries=[] datas=[]>
itertools: None -> <BuiltinModule 'itertools' None imports=[] binaries=[] datas=[]>
traceback: None -> <PyModule 'traceback' C:\Anaconda\lib\traceback.pyc imports=[('linecache', 0, 0, -1), ('sys', 0, 0, -1), ('types', 0, 0, -1)] binaries=[] datas=[]>
gc: None -> <BuiltinModule 'gc' None imports=[] binaries=[] datas=[]>
signal: None -> <BuiltinModule 'signal' None imports=[] binaries=[] datas=[]>
threading: None -> <PyModule 'threading' C:\Anaconda\lib\threading.pyc imports=[('sys', 0, 0, -1), ('thread', 0, 0, -1), ('warnings', 0, 0, -1), ('collections', 0, 0, -1), ('collections.deque', 0, 0, -1), ('time', 0, 0, -1), ('time.time', 0, 0, -1), ('time.sleep', 0, 0, -1), ('traceback', 0, 0, -1), ('traceback.format_exc', 0, 0, -1), ('thread', 0, 0, -1), ('thread.stack_size', 0, 0, -1), ('thread', 0, 0, -1), ('thread._local', 0, 0, -1), ('_threading_local', 0, 1, -1), ('_threading_local.local', 0, 1, -1), ('random', 1, 0, -1), ('random.random', 1, 0, -1)] binaries=[] datas=[]>
msvcrt: None -> <BuiltinModule 'msvcrt' None imports=[] binaries=[] datas=[]>
_subprocess: None -> <BuiltinModule '_subprocess' None imports=[] binaries=[] datas=[]>
select: None -> <ExtensionModule 'select' C:\Anaconda\DLLs\select.pyd imports=[] binaries=[] datas=[]>
fcntl: None -> None
  DEL fcntl
pickle: None -> <PyModule 'pickle' C:\Anaconda\lib\pickle.pyc imports=[('types', 0, 0, -1), ('types.*', 0, 0, -1), ('copy_reg', 0, 0, -1), ('copy_reg.dispatch_table', 0, 0, -1), ('copy_reg', 0, 0, -1), ('copy_reg._extension_registry', 0, 0, -1), ('copy_reg._inverted_registry', 0, 0, -1), ('copy_reg._extension_cache', 0, 0, -1), ('marshal', 0, 0, -1), ('sys', 0, 0, -1), ('struct', 0, 0, -1), ('re', 0, 0, -1), ('org.python.core', 0, 0, -1), ('org.python.core.PyStringMap', 0, 0, -1), ('binascii', 0, 0, -1), ('cStringIO', 0, 0, -1), ('cStringIO.StringIO', 0, 0, -1), ('StringIO', 0, 1, -1), ('StringIO.StringIO', 0, 1, -1), ('doctest', 1, 0, -1)] binaries=[] datas=[]>
thread: None -> <BuiltinModule 'thread' None imports=[] binaries=[] datas=[]>
collections: None -> <PyModule 'collections' C:\Anaconda\lib\collections.pyc imports=[('_abcoll', 0, 0, -1), ('_abcoll.*', 0, 0, -1), ('_abcoll', 0, 0, -1), ('_collections', 0, 0, -1), ('_collections.deque', 0, 0, -1), ('_collections.defaultdict', 0, 0, -1), ('operator', 0, 0, -1), ('operator.itemgetter', 0, 0, -1), ('operator.eq', 0, 0, -1), ('keyword', 0, 0, -1), ('keyword.iskeyword', 0, 0, -1), ('sys', 0, 0, -1), ('heapq', 0, 0, -1), ('itertools', 0, 0, -1), ('itertools.repeat', 0, 0, -1), ('itertools.chain', 0, 0, -1), ('itertools.starmap', 0, 0, -1), ('itertools', 0, 0, -1), ('itertools.imap', 0, 0, -1), ('thread', 0, 0, -1), ('thread.get_ident', 0, 0, -1), ('dummy_thread', 0, 1, -1), ('dummy_thread.get_ident', 0, 1, -1), ('cPickle', 0, 1, -1), ('cPickle.loads', 0, 1, -1), ('cPickle.dumps', 0, 1, -1), ('doctest', 0, 1, -1)] binaries=[] datas=[]>
time: None -> <BuiltinModule 'time' None imports=[('_strptime', 0, 0, -1)] binaries=[] datas=[]>
_threading_local: None -> <PyModule '_threading_local' C:\Anaconda\lib\_threading_local.pyc imports=[('threading', 0, 0, -1), ('threading.current_thread', 0, 0, -1), ('threading.RLock', 0, 0, -1), ('threading', 1, 0, -1)] binaries=[] datas=[]>
random: None -> <PyModule 'random' C:\Anaconda\lib\random.pyc imports=[('__future__', 0, 0, -1), ('__future__.division', 0, 0, -1), ('warnings', 0, 0, -1), ('warnings.warn', 0, 0, -1), ('types', 0, 0, -1), ('types.MethodType', 0, 0, -1), ('types.BuiltinMethodType', 0, 0, -1), ('math', 0, 0, -1), ('math.log', 0, 0, -1), ('math.exp', 0, 0, -1), ('math.pi', 0, 0, -1), ('math.e', 0, 0, -1), ('math.ceil', 0, 0, -1), ('math', 0, 0, -1), ('math.sqrt', 0, 0, -1), ('math.acos', 0, 0, -1), ('math.cos', 0, 0, -1), ('math.sin', 0, 0, -1), ('os', 0, 0, -1), ('os.urandom', 0, 0, -1), ('binascii', 0, 0, -1), ('binascii.hexlify', 0, 0, -1), ('hashlib', 0, 0, -1), ('_random', 0, 0, -1), ('time', 1, 1, -1), ('time', 1, 1, -1), ('time', 1, 1, -1), ('time', 1, 0, -1)] binaries=[] datas=[]>
_collections: None -> <BuiltinModule '_collections' None imports=[] binaries=[] datas=[]>
operator: None -> <BuiltinModule 'operator' None imports=[] binaries=[] datas=[]>
keyword: None -> <PyModule 'keyword' C:\Anaconda\lib\keyword.pyc imports=[('sys', 1, 0, -1), ('re', 1, 0, -1)] binaries=[] datas=[]>
heapq: None -> <PyModule 'heapq' C:\Anaconda\lib\heapq.pyc imports=[('itertools', 0, 0, -1), ('itertools.islice', 0, 0, -1), ('itertools.count', 0, 0, -1), ('itertools.imap', 0, 0, -1), ('itertools.izip', 0, 0, -1), ('itertools.tee', 0, 0, -1), ('itertools.chain', 0, 0, -1), ('operator', 0, 0, -1), ('operator.itemgetter', 0, 0, -1), ('_heapq', 0, 0, -1), ('_heapq.*', 0, 0, -1), ('doctest', 0, 1, -1)] binaries=[] datas=[]>
dummy_thread: None -> <PyModule 'dummy_thread' C:\Anaconda\lib\dummy_thread.pyc imports=[('traceback', 0, 0, -1)] binaries=[] datas=[]>
cPickle: None -> <BuiltinModule 'cPickle' None imports=[('copy_reg', 0, 0, -1), ('types', 0, 0, -1), ('string', 0, 0, -1)] binaries=[] datas=[]>
doctest: None -> <PyModule 'doctest' C:\Anaconda\lib\doctest.pyc imports=[('__future__', 0, 0, -1), ('sys', 0, 0, -1), ('traceback', 0, 0, -1), ('inspect', 0, 0, -1), ('linecache', 0, 0, -1), ('os', 0, 0, -1), ('re', 0, 0, -1), ('unittest', 0, 0, -1), ('difflib', 0, 0, -1), ('pdb', 0, 0, -1), ('tempfile', 0, 0, -1), ('warnings', 0, 0, -1), ('StringIO', 0, 0, -1), ('StringIO.StringIO', 0, 0, -1), ('collections', 0, 0, -1), ('collections.namedtuple', 0, 0, -1), ('types', 1, 0, -1), ('types', 1, 0, -1), ('pdb', 1, 0, -1)] binaries=[] datas=[]>
_heapq: None -> <BuiltinModule '_heapq' None imports=[] binaries=[] datas=[]>
__future__: None -> <PyModule '__future__' C:\Anaconda\lib\__future__.pyc imports=[] binaries=[] datas=[]>
inspect: None -> <PyModule 'inspect' C:\Anaconda\lib\inspect.pyc imports=[('sys', 0, 0, -1), ('os', 0, 0, -1), ('types', 0, 0, -1), ('string', 0, 0, -1), ('re', 0, 0, -1), ('dis', 0, 0, -1), ('imp', 0, 0, -1), ('tokenize', 0, 0, -1), ('linecache', 0, 0, -1), ('operator', 0, 0, -1), ('operator.attrgetter', 0, 0, -1), ('collections', 0, 0, -1), ('collections.namedtuple', 0, 0, -1)] binaries=[] datas=[]>
unittest: None -> <PkgModule 'unittest' C:\Anaconda\lib\unittest\__init__.pyc imports=[('result', 0, 0, 1), ('result.TestResult', 0, 0, 1), ('case', 0, 0, 1), ('case.TestCase', 0, 0, 1), ('case.FunctionTestCase', 0, 0, 1), ('case.SkipTest', 0, 0, 1), ('case.skip', 0, 0, 1), ('case.skipIf', 0, 0, 1), ('case.skipUnless', 0, 0, 1), ('case.expectedFailure', 0, 0, 1), ('suite', 0, 0, 1), ('suite.BaseTestSuite', 0, 0, 1), ('suite.TestSuite', 0, 0, 1), ('loader', 0, 0, 1), ('loader.TestLoader', 0, 0, 1), ('loader.defaultTestLoader', 0, 0, 1), ('loader.makeSuite', 0, 0, 1), ('loader.getTestCaseNames', 0, 0, 1), ('loader.findTestCases', 0, 0, 1), ('main', 0, 0, 1), ('main.TestProgram', 0, 0, 1), ('main.main', 0, 0, 1), ('runner', 0, 0, 1), ('runner.TextTestRunner', 0, 0, 1), ('runner.TextTestResult', 0, 0, 1), ('signals', 0, 0, 1), ('signals.installHandler', 0, 0, 1), ('signals.registerResult', 0, 0, 1), ('signals.removeResult', 0, 0, 1), ('signals.removeHandler', 0, 0, 1)] binaries=[] datas=[]>
difflib: None -> <PyModule 'difflib' C:\Anaconda\lib\difflib.pyc imports=[('heapq', 0, 0, -1), ('collections', 0, 0, -1), ('collections.namedtuple', 0, 0, -1), ('functools', 0, 0, -1), ('functools.reduce', 0, 0, -1), ('re', 0, 0, -1), ('re', 1, 0, -1), ('doctest', 1, 0, -1), ('difflib', 1, 0, -1)] binaries=[] datas=[]>
pdb: None -> <PyModule 'pdb' C:\Anaconda\lib\pdb.pyc imports=[('sys', 0, 0, -1), ('linecache', 0, 0, -1), ('cmd', 0, 0, -1), ('bdb', 0, 0, -1), ('repr', 0, 0, -1), ('repr.Repr', 0, 0, -1), ('os', 0, 0, -1), ('re', 0, 0, -1), ('pprint', 0, 0, -1), ('traceback', 0, 0, -1), ('pdb', 0, 1, -1), ('readline', 1, 0, -1), ('shlex', 1, 1, -1), ('__main__', 1, 0, -1)] binaries=[] datas=[]>
tempfile: None -> <PyModule 'tempfile' C:\Anaconda\lib\tempfile.pyc imports=[('io', 0, 0, -1), ('os', 0, 0, -1), ('errno', 0, 0, -1), ('random', 0, 0, -1), ('random.Random', 0, 0, -1), ('cStringIO', 0, 0, -1), ('cStringIO.StringIO', 0, 0, -1), ('StringIO', 0, 1, -1), ('StringIO.StringIO', 0, 1, -1), ('fcntl', 0, 0, -1), ('thread', 0, 0, -1), ('dummy_thread', 0, 1, -1)] binaries=[] datas=[]>
StringIO: None -> <PyModule 'StringIO' C:\Anaconda\lib\StringIO.pyc imports=[('errno', 0, 0, -1), ('errno.EINVAL', 0, 0, -1), ('sys', 1, 0, -1)] binaries=[] datas=[]>
dis: None -> <PyModule 'dis' C:\Anaconda\lib\dis.pyc imports=[('sys', 0, 0, -1), ('types', 0, 0, -1), ('opcode', 0, 0, -1), ('opcode.*', 0, 0, -1), ('opcode', 0, 0, -1), ('opcode.__all__', 0, 0, -1)] binaries=[] datas=[]>
tokenize: None -> <PyModule 'tokenize' C:\Anaconda\lib\tokenize.pyc imports=[('string', 0, 0, -1), ('re', 0, 0, -1), ('token', 0, 0, -1), ('token.*', 0, 0, -1), ('token', 0, 0, -1), ('sys', 0, 1, -1)] binaries=[] datas=[]>
opcode: None -> <PyModule 'opcode' C:\Anaconda\lib\opcode.pyc imports=[] binaries=[] datas=[]>
token: None -> <PyModule 'token' C:\Anaconda\lib\token.pyc imports=[('re', 1, 0, -1), ('sys', 1, 0, -1)] binaries=[] datas=[]>
unittest.result: None -> <PyModule 'unittest.result' C:\Anaconda\lib\unittest\result.pyc imports=[('os', 0, 0, -1), ('sys', 0, 0, -1), ('traceback', 0, 0, -1), ('StringIO', 0, 0, -1), ('StringIO.StringIO', 0, 0, -1), ('', 0, 0, 1), ('util', 0, 0, 1), ('functools', 0, 0, -1), ('functools.wraps', 0, 0, -1)] binaries=[] datas=[]>
unittest.case: None -> <PyModule 'unittest.case' C:\Anaconda\lib\unittest\case.pyc imports=[('collections', 0, 0, -1), ('sys', 0, 0, -1), ('functools', 0, 0, -1), ('difflib', 0, 0, -1), ('pprint', 0, 0, -1), ('re', 0, 0, -1), ('types', 0, 0, -1), ('warnings', 0, 0, -1), ('', 0, 0, 1), ('result', 0, 0, 1), ('util', 0, 0, 1), ('util.strclass', 0, 0, 1), ('util.safe_repr', 0, 0, 1), ('util.unorderable_list_difference', 0, 0, 1), ('util._count_diff_all_purpose', 0, 0, 1), ('util._count_diff_hashable', 0, 0, 1)] binaries=[] datas=[]>
unittest.suite: None -> <PyModule 'unittest.suite' C:\Anaconda\lib\unittest\suite.pyc imports=[('sys', 0, 0, -1), ('', 0, 0, 1), ('case', 0, 0, 1), ('', 0, 0, 1), ('util', 0, 0, 1)] binaries=[] datas=[]>
unittest.loader: None -> <PyModule 'unittest.loader' C:\Anaconda\lib\unittest\loader.pyc imports=[('os', 0, 0, -1), ('re', 0, 0, -1), ('sys', 0, 0, -1), ('traceback', 0, 0, -1), ('types', 0, 0, -1), ('functools', 0, 0, -1), ('functools.cmp_to_key', 0, 0, -1), ('fnmatch', 0, 0, -1), ('fnmatch.fnmatch', 0, 0, -1), ('', 0, 0, 1), ('case', 0, 0, 1), ('suite', 0, 0, 1)] binaries=[] datas=[]>
unittest.main: None -> <PyModule 'unittest.main' C:\Anaconda\lib\unittest\main.pyc imports=[('sys', 0, 0, -1), ('os', 0, 0, -1), ('types', 0, 0, -1), ('', 0, 0, 1), ('loader', 0, 0, 1), ('runner', 0, 0, 1), ('signals', 0, 0, 1), ('signals.installHandler', 0, 0, 1), ('getopt', 1, 0, -1), ('optparse', 1, 0, -1)] binaries=[] datas=[]>
unittest.runner: None -> <PyModule 'unittest.runner' C:\Anaconda\lib\unittest\runner.pyc imports=[('sys', 0, 0, -1), ('time', 0, 0, -1), ('', 0, 0, 1), ('result', 0, 0, 1), ('signals', 0, 0, 1), ('signals.registerResult', 0, 0, 1)] binaries=[] datas=[]>
unittest.signals: None -> <PyModule 'unittest.signals' C:\Anaconda\lib\unittest\signals.pyc imports=[('signal', 0, 0, -1), ('weakref', 0, 0, -1), ('functools', 0, 0, -1), ('functools.wraps', 0, 0, -1)] binaries=[] datas=[]>
unittest.os: None -> None
unittest.sys: None -> None
unittest.traceback: None -> None
unittest.StringIO: None -> None
unittest.util: None -> <PyModule 'unittest.util' C:\Anaconda\lib\unittest\util.pyc imports=[('collections', 0, 0, -1), ('collections.namedtuple', 0, 0, -1), ('collections.OrderedDict', 0, 0, -1)] binaries=[] datas=[]>
unittest.functools: None -> None
functools: None -> <PyModule 'functools' C:\Anaconda\lib\functools.pyc imports=[('_functools', 0, 0, -1), ('_functools.partial', 0, 0, -1), ('_functools.reduce', 0, 0, -1)] binaries=[] datas=[]>
unittest.collections: None -> None
_functools: None -> <BuiltinModule '_functools' None imports=[] binaries=[] datas=[]>
unittest.difflib: None -> None
unittest.pprint: None -> None
pprint: None -> <PyModule 'pprint' C:\Anaconda\lib\pprint.pyc imports=[('sys', 0, 0, -1), ('warnings', 0, 0, -1), ('cStringIO', 0, 0, -1), ('cStringIO.StringIO', 0, 0, -1), ('StringIO', 0, 1, -1), ('StringIO.StringIO', 0, 1, -1), ('time', 1, 0, -1)] binaries=[] datas=[]>
unittest.re: None -> None
unittest.types: None -> None
unittest.warnings: None -> None
cStringIO: None -> <BuiltinModule 'cStringIO' None imports=[('copy_reg', 0, 0, -1)] binaries=[] datas=[]>
_strptime: None -> <PyModule '_strptime' C:\Anaconda\lib\_strptime.pyc imports=[('time', 0, 0, -1), ('locale', 0, 0, -1), ('calendar', 0, 0, -1), ('re', 0, 0, -1), ('re.compile', 0, 0, -1), ('re', 0, 0, -1), ('re.IGNORECASE', 0, 0, -1), ('re', 0, 0, -1), ('re.escape', 0, 0, -1), ('datetime', 0, 0, -1), ('datetime.date', 0, 0, -1), ('thread', 0, 0, -1), ('thread.allocate_lock', 0, 0, -1), ('dummy_thread', 0, 0, -1), ('dummy_thread.allocate_lock', 0, 0, -1)] binaries=[] datas=[]>
locale: None -> <PyModule 'locale' C:\Anaconda\lib\locale.pyc imports=[('sys', 0, 0, -1), ('encodings', 0, 0, -1), ('encodings.aliases', 0, 0, -1), ('re', 0, 0, -1), ('operator', 0, 0, -1), ('functools', 0, 0, -1), ('_locale', 0, 0, -1), ('_locale.*', 0, 0, -1), ('_locale', 1, 0, -1), ('os', 1, 0, -1), ('_locale', 1, 0, -1)] binaries=[] datas=[]>
calendar: None -> <PyModule 'calendar' C:\Anaconda\lib\calendar.pyc imports=[('sys', 0, 0, -1), ('datetime', 0, 0, -1), ('locale', 0, 0, -1), ('optparse', 1, 0, -1)] binaries=[] datas=[]>
datetime: None -> <BuiltinModule 'datetime' None imports=[] binaries=[] datas=[]>
encodings: None -> <PkgModule 'encodings' C:\Anaconda\lib\encodings\__init__.pyc imports=[('codecs', 0, 0, -1), ('encodings', 0, 0, -1), ('encodings.aliases', 0, 0, -1), ('__builtin__', 0, 0, -1), ('aliases', 0, 0, -1), ('ascii', 0, 0, -1), ('base64_codec', 0, 0, -1), ('big5', 0, 0, -1), ('big5hkscs', 0, 0, -1), ('bz2_codec', 0, 0, -1), ('charmap', 0, 0, -1), ('cp037', 0, 0, -1), ('cp1006', 0, 0, -1), ('cp1026', 0, 0, -1), ('cp1140', 0, 0, -1), ('cp1250', 0, 0, -1), ('cp1251', 0, 0, -1), ('cp1252', 0, 0, -1), ('cp1253', 0, 0, -1), ('cp1254', 0, 0, -1), ('cp1255', 0, 0, -1), ('cp1256', 0, 0, -1), ('cp1257', 0, 0, -1), ('cp1258', 0, 0, -1), ('cp424', 0, 0, -1), ('cp437', 0, 0, -1), ('cp500', 0, 0, -1), ('cp720', 0, 0, -1), ('cp737', 0, 0, -1), ('cp775', 0, 0, -1), ('cp850', 0, 0, -1), ('cp852', 0, 0, -1), ('cp855', 0, 0, -1), ('cp856', 0, 0, -1), ('cp857', 0, 0, -1), ('cp858', 0, 0, -1), ('cp860', 0, 0, -1), ('cp861', 0, 0, -1), ('cp862', 0, 0, -1), ('cp863', 0, 0, -1), ('cp864', 0, 0, -1), ('cp865', 0, 0, -1), ('cp866', 0, 0, -1), ('cp869', 0, 0, -1), ('cp874', 0, 0, -1), ('cp875', 0, 0, -1), ('cp932', 0, 0, -1), ('cp949', 0, 0, -1), ('cp950', 0, 0, -1), ('euc_jisx0213', 0, 0, -1), ('euc_jis_2004', 0, 0, -1), ('euc_jp', 0, 0, -1), ('euc_kr', 0, 0, -1), ('gb18030', 0, 0, -1), ('gb2312', 0, 0, -1), ('gbk', 0, 0, -1), ('hex_codec', 0, 0, -1), ('hp_roman8', 0, 0, -1), ('hz', 0, 0, -1), ('idna', 0, 0, -1), ('iso2022_jp', 0, 0, -1), ('iso2022_jp_1', 0, 0, -1), ('iso2022_jp_2', 0, 0, -1), ('iso2022_jp_2004', 0, 0, -1), ('iso2022_jp_3', 0, 0, -1), ('iso2022_jp_ext', 0, 0, -1), ('iso2022_kr', 0, 0, -1), ('iso8859_1', 0, 0, -1), ('iso8859_10', 0, 0, -1), ('iso8859_11', 0, 0, -1), ('iso8859_13', 0, 0, -1), ('iso8859_14', 0, 0, -1), ('iso8859_15', 0, 0, -1), ('iso8859_16', 0, 0, -1), ('iso8859_2', 0, 0, -1), ('iso8859_3', 0, 0, -1), ('iso8859_4', 0, 0, -1), ('iso8859_5', 0, 0, -1), ('iso8859_6', 0, 0, -1), ('iso8859_7', 0, 0, -1), ('iso8859_8', 0, 0, -1), ('iso8859_9', 0, 0, -1), ('johab', 0, 0, -1), ('koi8_r', 0, 0, -1), ('koi8_u', 0, 0, -1), ('latin_1', 0, 0, -1), ('mac_arabic', 0, 0, -1), ('mac_centeuro', 0, 0, -1), ('mac_croatian', 0, 0, -1), ('mac_cyrillic', 0, 0, -1), ('mac_farsi', 0, 0, -1), ('mac_greek', 0, 0, -1), ('mac_iceland', 0, 0, -1), ('mac_latin2', 0, 0, -1), ('mac_roman', 0, 0, -1), ('mac_romanian', 0, 0, -1), ('mac_turkish', 0, 0, -1), ('mbcs', 0, 0, -1), ('palmos', 0, 0, -1), ('ptcp154', 0, 0, -1), ('punycode', 0, 0, -1), ('quopri_codec', 0, 0, -1), ('raw_unicode_escape', 0, 0, -1), ('rot_13', 0, 0, -1), ('shift_jis', 0, 0, -1), ('shift_jisx0213', 0, 0, -1), ('shift_jis_2004', 0, 0, -1), ('string_escape', 0, 0, -1), ('tis_620', 0, 0, -1), ('undefined', 0, 0, -1), ('unicode_escape', 0, 0, -1), ('unicode_internal', 0, 0, -1), ('utf_16', 0, 0, -1), ('utf_16_be', 0, 0, -1), ('utf_16_le', 0, 0, -1), ('utf_32', 0, 0, -1), ('utf_32_be', 0, 0, -1), ('utf_32_le', 0, 0, -1), ('utf_7', 0, 0, -1), ('utf_8', 0, 0, -1), ('utf_8_sig', 0, 0, -1), ('uu_codec', 0, 0, -1), ('zlib_codec', 0, 0, -1)] binaries=[] datas=[]>
encodings.aliases: None -> <PyModule 'encodings.aliases' C:\Anaconda\lib\encodings\aliases.pyc imports=[] binaries=[] datas=[]>
_locale: None -> <BuiltinModule '_locale' None imports=[] binaries=[] datas=[]>
encodings.codecs: None -> None
codecs: None -> <PyModule 'codecs' C:\Anaconda\lib\codecs.pyc imports=[('__builtin__', 0, 0, -1), ('sys', 0, 0, -1), ('_codecs', 0, 0, -1), ('_codecs.*', 0, 0, -1), ('encodings', 0, 1, -1), ('encodings', 0, 0, -1)] binaries=[] datas=[]>
encodings.encodings: None -> None
encodings.__builtin__: None -> None
encodings.ascii: None -> <PyModule 'encodings.ascii' C:\Anaconda\lib\encodings\ascii.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.base64_codec: None -> <PyModule 'encodings.base64_codec' C:\Anaconda\lib\encodings\base64_codec.pyc imports=[('codecs', 0, 0, -1), ('base64', 0, 0, -1)] binaries=[] datas=[]>
encodings.big5: None -> <PyModule 'encodings.big5' C:\Anaconda\lib\encodings\big5.pyc imports=[('_codecs_tw', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.big5hkscs: None -> <PyModule 'encodings.big5hkscs' C:\Anaconda\lib\encodings\big5hkscs.pyc imports=[('_codecs_hk', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.bz2_codec: None -> <PyModule 'encodings.bz2_codec' C:\Anaconda\lib\encodings\bz2_codec.pyc imports=[('codecs', 0, 0, -1), ('bz2', 0, 0, -1)] binaries=[] datas=[]>
encodings.charmap: None -> <PyModule 'encodings.charmap' C:\Anaconda\lib\encodings\charmap.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp037: None -> <PyModule 'encodings.cp037' C:\Anaconda\lib\encodings\cp037.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1006: None -> <PyModule 'encodings.cp1006' C:\Anaconda\lib\encodings\cp1006.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1026: None -> <PyModule 'encodings.cp1026' C:\Anaconda\lib\encodings\cp1026.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1140: None -> <PyModule 'encodings.cp1140' C:\Anaconda\lib\encodings\cp1140.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1250: None -> <PyModule 'encodings.cp1250' C:\Anaconda\lib\encodings\cp1250.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1251: None -> <PyModule 'encodings.cp1251' C:\Anaconda\lib\encodings\cp1251.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1252: None -> <PyModule 'encodings.cp1252' C:\Anaconda\lib\encodings\cp1252.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1253: None -> <PyModule 'encodings.cp1253' C:\Anaconda\lib\encodings\cp1253.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1254: None -> <PyModule 'encodings.cp1254' C:\Anaconda\lib\encodings\cp1254.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1255: None -> <PyModule 'encodings.cp1255' C:\Anaconda\lib\encodings\cp1255.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1256: None -> <PyModule 'encodings.cp1256' C:\Anaconda\lib\encodings\cp1256.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1257: None -> <PyModule 'encodings.cp1257' C:\Anaconda\lib\encodings\cp1257.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1258: None -> <PyModule 'encodings.cp1258' C:\Anaconda\lib\encodings\cp1258.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp424: None -> <PyModule 'encodings.cp424' C:\Anaconda\lib\encodings\cp424.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp437: None -> <PyModule 'encodings.cp437' C:\Anaconda\lib\encodings\cp437.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp500: None -> <PyModule 'encodings.cp500' C:\Anaconda\lib\encodings\cp500.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp720: None -> <PyModule 'encodings.cp720' C:\Anaconda\lib\encodings\cp720.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp737: None -> <PyModule 'encodings.cp737' C:\Anaconda\lib\encodings\cp737.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp775: None -> <PyModule 'encodings.cp775' C:\Anaconda\lib\encodings\cp775.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp850: None -> <PyModule 'encodings.cp850' C:\Anaconda\lib\encodings\cp850.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp852: None -> <PyModule 'encodings.cp852' C:\Anaconda\lib\encodings\cp852.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp855: None -> <PyModule 'encodings.cp855' C:\Anaconda\lib\encodings\cp855.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp856: None -> <PyModule 'encodings.cp856' C:\Anaconda\lib\encodings\cp856.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp857: None -> <PyModule 'encodings.cp857' C:\Anaconda\lib\encodings\cp857.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp858: None -> <PyModule 'encodings.cp858' C:\Anaconda\lib\encodings\cp858.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp860: None -> <PyModule 'encodings.cp860' C:\Anaconda\lib\encodings\cp860.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp861: None -> <PyModule 'encodings.cp861' C:\Anaconda\lib\encodings\cp861.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp862: None -> <PyModule 'encodings.cp862' C:\Anaconda\lib\encodings\cp862.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp863: None -> <PyModule 'encodings.cp863' C:\Anaconda\lib\encodings\cp863.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp864: None -> <PyModule 'encodings.cp864' C:\Anaconda\lib\encodings\cp864.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp865: None -> <PyModule 'encodings.cp865' C:\Anaconda\lib\encodings\cp865.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp866: None -> <PyModule 'encodings.cp866' C:\Anaconda\lib\encodings\cp866.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp869: None -> <PyModule 'encodings.cp869' C:\Anaconda\lib\encodings\cp869.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp874: None -> <PyModule 'encodings.cp874' C:\Anaconda\lib\encodings\cp874.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp875: None -> <PyModule 'encodings.cp875' C:\Anaconda\lib\encodings\cp875.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp932: None -> <PyModule 'encodings.cp932' C:\Anaconda\lib\encodings\cp932.pyc imports=[('_codecs_jp', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp949: None -> <PyModule 'encodings.cp949' C:\Anaconda\lib\encodings\cp949.pyc imports=[('_codecs_kr', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp950: None -> <PyModule 'encodings.cp950' C:\Anaconda\lib\encodings\cp950.pyc imports=[('_codecs_tw', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.euc_jisx0213: None -> <PyModule 'encodings.euc_jisx0213' C:\Anaconda\lib\encodings\euc_jisx0213.pyc imports=[('_codecs_jp', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.euc_jis_2004: None -> <PyModule 'encodings.euc_jis_2004' C:\Anaconda\lib\encodings\euc_jis_2004.pyc imports=[('_codecs_jp', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.euc_jp: None -> <PyModule 'encodings.euc_jp' C:\Anaconda\lib\encodings\euc_jp.pyc imports=[('_codecs_jp', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.euc_kr: None -> <PyModule 'encodings.euc_kr' C:\Anaconda\lib\encodings\euc_kr.pyc imports=[('_codecs_kr', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.gb18030: None -> <PyModule 'encodings.gb18030' C:\Anaconda\lib\encodings\gb18030.pyc imports=[('_codecs_cn', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.gb2312: None -> <PyModule 'encodings.gb2312' C:\Anaconda\lib\encodings\gb2312.pyc imports=[('_codecs_cn', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.gbk: None -> <PyModule 'encodings.gbk' C:\Anaconda\lib\encodings\gbk.pyc imports=[('_codecs_cn', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.hex_codec: None -> <PyModule 'encodings.hex_codec' C:\Anaconda\lib\encodings\hex_codec.pyc imports=[('codecs', 0, 0, -1), ('binascii', 0, 0, -1)] binaries=[] datas=[]>
encodings.hp_roman8: None -> <PyModule 'encodings.hp_roman8' C:\Anaconda\lib\encodings\hp_roman8.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.hz: None -> <PyModule 'encodings.hz' C:\Anaconda\lib\encodings\hz.pyc imports=[('_codecs_cn', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.idna: None -> <PyModule 'encodings.idna' C:\Anaconda\lib\encodings\idna.pyc imports=[('stringprep', 0, 0, -1), ('re', 0, 0, -1), ('codecs', 0, 0, -1), ('unicodedata', 0, 0, -1), ('unicodedata.ucd_3_2_0', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso2022_jp: None -> <PyModule 'encodings.iso2022_jp' C:\Anaconda\lib\encodings\iso2022_jp.pyc imports=[('_codecs_iso2022', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso2022_jp_1: None -> <PyModule 'encodings.iso2022_jp_1' C:\Anaconda\lib\encodings\iso2022_jp_1.pyc imports=[('_codecs_iso2022', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso2022_jp_2: None -> <PyModule 'encodings.iso2022_jp_2' C:\Anaconda\lib\encodings\iso2022_jp_2.pyc imports=[('_codecs_iso2022', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso2022_jp_2004: None -> <PyModule 'encodings.iso2022_jp_2004' C:\Anaconda\lib\encodings\iso2022_jp_2004.pyc imports=[('_codecs_iso2022', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso2022_jp_3: None -> <PyModule 'encodings.iso2022_jp_3' C:\Anaconda\lib\encodings\iso2022_jp_3.pyc imports=[('_codecs_iso2022', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso2022_jp_ext: None -> <PyModule 'encodings.iso2022_jp_ext' C:\Anaconda\lib\encodings\iso2022_jp_ext.pyc imports=[('_codecs_iso2022', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso2022_kr: None -> <PyModule 'encodings.iso2022_kr' C:\Anaconda\lib\encodings\iso2022_kr.pyc imports=[('_codecs_iso2022', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_1: None -> <PyModule 'encodings.iso8859_1' C:\Anaconda\lib\encodings\iso8859_1.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_10: None -> <PyModule 'encodings.iso8859_10' C:\Anaconda\lib\encodings\iso8859_10.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_11: None -> <PyModule 'encodings.iso8859_11' C:\Anaconda\lib\encodings\iso8859_11.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_13: None -> <PyModule 'encodings.iso8859_13' C:\Anaconda\lib\encodings\iso8859_13.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_14: None -> <PyModule 'encodings.iso8859_14' C:\Anaconda\lib\encodings\iso8859_14.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_15: None -> <PyModule 'encodings.iso8859_15' C:\Anaconda\lib\encodings\iso8859_15.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_16: None -> <PyModule 'encodings.iso8859_16' C:\Anaconda\lib\encodings\iso8859_16.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_2: None -> <PyModule 'encodings.iso8859_2' C:\Anaconda\lib\encodings\iso8859_2.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_3: None -> <PyModule 'encodings.iso8859_3' C:\Anaconda\lib\encodings\iso8859_3.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_4: None -> <PyModule 'encodings.iso8859_4' C:\Anaconda\lib\encodings\iso8859_4.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_5: None -> <PyModule 'encodings.iso8859_5' C:\Anaconda\lib\encodings\iso8859_5.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_6: None -> <PyModule 'encodings.iso8859_6' C:\Anaconda\lib\encodings\iso8859_6.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_7: None -> <PyModule 'encodings.iso8859_7' C:\Anaconda\lib\encodings\iso8859_7.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_8: None -> <PyModule 'encodings.iso8859_8' C:\Anaconda\lib\encodings\iso8859_8.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_9: None -> <PyModule 'encodings.iso8859_9' C:\Anaconda\lib\encodings\iso8859_9.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.johab: None -> <PyModule 'encodings.johab' C:\Anaconda\lib\encodings\johab.pyc imports=[('_codecs_kr', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.koi8_r: None -> <PyModule 'encodings.koi8_r' C:\Anaconda\lib\encodings\koi8_r.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.koi8_u: None -> <PyModule 'encodings.koi8_u' C:\Anaconda\lib\encodings\koi8_u.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.latin_1: None -> <PyModule 'encodings.latin_1' C:\Anaconda\lib\encodings\latin_1.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_arabic: None -> <PyModule 'encodings.mac_arabic' C:\Anaconda\lib\encodings\mac_arabic.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_centeuro: None -> <PyModule 'encodings.mac_centeuro' C:\Anaconda\lib\encodings\mac_centeuro.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_croatian: None -> <PyModule 'encodings.mac_croatian' C:\Anaconda\lib\encodings\mac_croatian.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_cyrillic: None -> <PyModule 'encodings.mac_cyrillic' C:\Anaconda\lib\encodings\mac_cyrillic.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_farsi: None -> <PyModule 'encodings.mac_farsi' C:\Anaconda\lib\encodings\mac_farsi.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_greek: None -> <PyModule 'encodings.mac_greek' C:\Anaconda\lib\encodings\mac_greek.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_iceland: None -> <PyModule 'encodings.mac_iceland' C:\Anaconda\lib\encodings\mac_iceland.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_latin2: None -> <PyModule 'encodings.mac_latin2' C:\Anaconda\lib\encodings\mac_latin2.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_roman: None -> <PyModule 'encodings.mac_roman' C:\Anaconda\lib\encodings\mac_roman.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_romanian: None -> <PyModule 'encodings.mac_romanian' C:\Anaconda\lib\encodings\mac_romanian.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_turkish: None -> <PyModule 'encodings.mac_turkish' C:\Anaconda\lib\encodings\mac_turkish.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mbcs: None -> <PyModule 'encodings.mbcs' C:\Anaconda\lib\encodings\mbcs.pyc imports=[('codecs', 0, 0, -1), ('codecs.mbcs_encode', 0, 0, -1), ('codecs.mbcs_decode', 0, 0, -1), ('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.palmos: None -> <PyModule 'encodings.palmos' C:\Anaconda\lib\encodings\palmos.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.ptcp154: None -> <PyModule 'encodings.ptcp154' C:\Anaconda\lib\encodings\ptcp154.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.punycode: None -> <PyModule 'encodings.punycode' C:\Anaconda\lib\encodings\punycode.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.quopri_codec: None -> <PyModule 'encodings.quopri_codec' C:\Anaconda\lib\encodings\quopri_codec.pyc imports=[('codecs', 0, 0, -1), ('quopri', 0, 0, -1), ('cStringIO', 0, 0, -1), ('cStringIO.StringIO', 0, 0, -1), ('StringIO', 0, 1, -1), ('StringIO.StringIO', 0, 1, -1)] binaries=[] datas=[]>
encodings.raw_unicode_escape: None -> <PyModule 'encodings.raw_unicode_escape' C:\Anaconda\lib\encodings\raw_unicode_escape.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.rot_13: None -> <PyModule 'encodings.rot_13' C:\Anaconda\lib\encodings\rot_13.pyc imports=[('codecs', 0, 0, -1), ('sys', 0, 1, -1)] binaries=[] datas=[]>
encodings.shift_jis: None -> <PyModule 'encodings.shift_jis' C:\Anaconda\lib\encodings\shift_jis.pyc imports=[('_codecs_jp', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.shift_jisx0213: None -> <PyModule 'encodings.shift_jisx0213' C:\Anaconda\lib\encodings\shift_jisx0213.pyc imports=[('_codecs_jp', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.shift_jis_2004: None -> <PyModule 'encodings.shift_jis_2004' C:\Anaconda\lib\encodings\shift_jis_2004.pyc imports=[('_codecs_jp', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.string_escape: None -> <PyModule 'encodings.string_escape' C:\Anaconda\lib\encodings\string_escape.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.tis_620: None -> <PyModule 'encodings.tis_620' C:\Anaconda\lib\encodings\tis_620.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.undefined: None -> <PyModule 'encodings.undefined' C:\Anaconda\lib\encodings\undefined.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.unicode_escape: None -> <PyModule 'encodings.unicode_escape' C:\Anaconda\lib\encodings\unicode_escape.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.unicode_internal: None -> <PyModule 'encodings.unicode_internal' C:\Anaconda\lib\encodings\unicode_internal.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.utf_16: None -> <PyModule 'encodings.utf_16' C:\Anaconda\lib\encodings\utf_16.pyc imports=[('codecs', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
encodings.utf_16_be: None -> <PyModule 'encodings.utf_16_be' C:\Anaconda\lib\encodings\utf_16_be.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.utf_16_le: None -> <PyModule 'encodings.utf_16_le' C:\Anaconda\lib\encodings\utf_16_le.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.utf_32: None -> <PyModule 'encodings.utf_32' C:\Anaconda\lib\encodings\utf_32.pyc imports=[('codecs', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
encodings.utf_32_be: None -> <PyModule 'encodings.utf_32_be' C:\Anaconda\lib\encodings\utf_32_be.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.utf_32_le: None -> <PyModule 'encodings.utf_32_le' C:\Anaconda\lib\encodings\utf_32_le.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.utf_7: None -> <PyModule 'encodings.utf_7' C:\Anaconda\lib\encodings\utf_7.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.utf_8: None -> <PyModule 'encodings.utf_8' C:\Anaconda\lib\encodings\utf_8.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.utf_8_sig: None -> <PyModule 'encodings.utf_8_sig' C:\Anaconda\lib\encodings\utf_8_sig.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.uu_codec: None -> <PyModule 'encodings.uu_codec' C:\Anaconda\lib\encodings\uu_codec.pyc imports=[('codecs', 0, 0, -1), ('binascii', 0, 0, -1), ('cStringIO', 1, 0, -1), ('cStringIO.StringIO', 1, 0, -1), ('binascii', 1, 0, -1), ('binascii.b2a_uu', 1, 0, -1), ('cStringIO', 1, 0, -1), ('cStringIO.StringIO', 1, 0, -1), ('binascii', 1, 0, -1), ('binascii.a2b_uu', 1, 0, -1)] binaries=[] datas=[]>
encodings.zlib_codec: None -> <PyModule 'encodings.zlib_codec' C:\Anaconda\lib\encodings\zlib_codec.pyc imports=[('codecs', 0, 0, -1), ('zlib', 0, 0, -1)] binaries=[] datas=[]>
_codecs: None -> <BuiltinModule '_codecs' None imports=[] binaries=[] datas=[]>
encodings.base64: None -> None
base64: None -> <PyModule 'base64' C:\Anaconda\lib\base64.pyc imports=[('re', 0, 0, -1), ('struct', 0, 0, -1), ('binascii', 0, 0, -1), ('sys', 1, 0, -1), ('getopt', 1, 0, -1)] binaries=[] datas=[]>
binascii: None -> <BuiltinModule 'binascii' None imports=[] binaries=[] datas=[]>
getopt: None -> <PyModule 'getopt' C:\Anaconda\lib\getopt.pyc imports=[('os', 0, 0, -1), ('sys', 0, 1, -1)] binaries=[] datas=[]>
encodings._codecs_tw: None -> None
_codecs_tw: None -> <BuiltinModule '_codecs_tw' None imports=[] binaries=[] datas=[]>
encodings._multibytecodec: None -> None
_multibytecodec: None -> <BuiltinModule '_multibytecodec' None imports=[] binaries=[] datas=[]>
encodings._codecs_hk: None -> None
_codecs_hk: None -> <BuiltinModule '_codecs_hk' None imports=[] binaries=[] datas=[]>
encodings.bz2: None -> None
bz2: None -> <ExtensionModule 'bz2' C:\Anaconda\DLLs\bz2.pyd imports=[] binaries=[] datas=[]>
encodings._codecs_jp: None -> None
_codecs_jp: None -> <BuiltinModule '_codecs_jp' None imports=[] binaries=[] datas=[]>
encodings._codecs_kr: None -> None
_codecs_kr: None -> <BuiltinModule '_codecs_kr' None imports=[] binaries=[] datas=[]>
encodings._codecs_cn: None -> None
_codecs_cn: None -> <BuiltinModule '_codecs_cn' None imports=[] binaries=[] datas=[]>
encodings.binascii: None -> None
encodings.stringprep: None -> None
stringprep: None -> <PyModule 'stringprep' C:\Anaconda\lib\stringprep.pyc imports=[('unicodedata', 0, 0, -1), ('unicodedata.ucd_3_2_0', 0, 0, -1)] binaries=[] datas=[]>
encodings.re: None -> None
encodings.unicodedata: None -> None
unicodedata: None -> <ExtensionModule 'unicodedata' C:\Anaconda\DLLs\unicodedata.pyd imports=[] binaries=[] datas=[]>
encodings._codecs_iso2022: None -> None
_codecs_iso2022: None -> <BuiltinModule '_codecs_iso2022' None imports=[] binaries=[] datas=[]>
encodings.quopri: None -> None
quopri: None -> <PyModule 'quopri' C:\Anaconda\lib\quopri.pyc imports=[('binascii', 0, 0, -1), ('binascii.a2b_qp', 0, 0, -1), ('binascii.b2a_qp', 0, 0, -1), ('cStringIO', 1, 0, -1), ('cStringIO.StringIO', 1, 0, -1), ('cStringIO', 1, 0, -1), ('cStringIO.StringIO', 1, 0, -1), ('sys', 1, 0, -1), ('getopt', 1, 0, -1)] binaries=[] datas=[]>
encodings.cStringIO: None -> None
encodings.StringIO: None -> None
encodings.sys: None -> None
encodings.zlib: None -> None
optparse: None -> <PyModule 'optparse' C:\Anaconda\lib\optparse.pyc imports=[('sys', 0, 0, -1), ('os', 0, 0, -1), ('types', 0, 0, -1), ('textwrap', 0, 0, -1), ('gettext', 0, 0, -1), ('gettext.gettext', 0, 0, -1), ('__builtin__', 1, 1, -1)] binaries=[] datas=[]>
textwrap: None -> <PyModule 'textwrap' C:\Anaconda\lib\textwrap.pyc imports=[('string', 0, 0, -1), ('re', 0, 0, -1)] binaries=[] datas=[]>
gettext: None -> <PyModule 'gettext' C:\Anaconda\lib\gettext.pyc imports=[('locale', 0, 0, -1), ('copy', 0, 0, -1), ('os', 0, 0, -1), ('re', 0, 0, -1), ('struct', 0, 0, -1), ('sys', 0, 0, -1), ('errno', 0, 0, -1), ('errno.ENOENT', 0, 0, -1), ('cStringIO', 1, 0, -1), ('cStringIO.StringIO', 1, 0, -1), ('StringIO', 1, 1, -1), ('StringIO.StringIO', 1, 1, -1), ('token', 1, 0, -1), ('tokenize', 1, 0, -1), ('locale', 1, 0, -1), ('locale.normalize', 1, 0, -1), ('__builtin__', 1, 0, -1)] binaries=[] datas=[]>
unittest.fnmatch: None -> None
fnmatch: None -> <PyModule 'fnmatch' C:\Anaconda\lib\fnmatch.pyc imports=[('re', 0, 0, -1), ('os', 1, 0, -1), ('os', 1, 0, -1), ('posixpath', 1, 0, -1)] binaries=[] datas=[]>
unittest.getopt: None -> None
unittest.optparse: None -> None
unittest.time: None -> None
unittest.signal: None -> None
unittest.weakref: None -> None
cmd: None -> <PyModule 'cmd' C:\Anaconda\lib\cmd.pyc imports=[('string', 0, 0, -1), ('sys', 1, 0, -1), ('readline', 1, 1, -1), ('readline', 1, 1, -1), ('readline', 1, 1, -1)] binaries=[] datas=[]>
bdb: None -> <PyModule 'bdb' C:\Anaconda\lib\bdb.pyc imports=[('fnmatch', 0, 0, -1), ('sys', 0, 0, -1), ('os', 0, 0, -1), ('types', 0, 0, -1), ('linecache', 1, 0, -1), ('linecache', 1, 0, -1), ('linecache', 1, 0, -1), ('repr', 1, 0, -1), ('__main__', 1, 1, -1), ('__main__', 1, 1, -1), ('linecache', 1, 0, -1)] binaries=[] datas=[]>
readline: None -> <PyModule 'readline' C:\Anaconda\lib\site-packages\readline.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('pyreadline.rlmain', 0, 0, 0), ('pyreadline.rlmain.Readline', 0, 0, 0), ('pyreadline.console', 0, 1, 0)] binaries=[] datas=[]>
shlex: None -> <PyModule 'shlex' C:\Anaconda\lib\shlex.pyc imports=[('os.path', 0, 0, -1), ('sys', 0, 0, -1), ('collections', 0, 0, -1), ('collections.deque', 0, 0, -1), ('cStringIO', 0, 0, -1), ('cStringIO.StringIO', 0, 0, -1), ('StringIO', 0, 1, -1), ('StringIO.StringIO', 0, 1, -1)] binaries=[] datas=[]>
pyreadline: None -> <PkgModule 'pyreadline' C:\Anaconda\lib\site-packages\pyreadline\__init__.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('', 0, 0, 1), ('unicode_helper', 0, 0, 1), ('logger', 0, 0, 1), ('clipboard', 0, 0, 1), ('lineeditor', 0, 0, 1), ('modes', 0, 0, 1), ('console', 0, 0, 1), ('rlmain', 0, 0, 1), ('rlmain.*', 0, 0, 1), ('', 0, 0, 1), ('rlmain', 0, 0, 1)] binaries=[] datas=[]>
pyreadline.rlmain: None -> <PyModule 'pyreadline.rlmain' C:\Anaconda\lib\site-packages\pyreadline\rlmain.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('sys', 0, 0, 0), ('os', 0, 0, 0), ('re', 0, 0, 0), ('time', 0, 0, 0), ('glob', 0, 0, 0), ('glob.glob', 0, 0, 0), ('', 0, 0, 1), ('release', 0, 0, 1), ('py3k_compat', 0, 0, 1), ('py3k_compat.callable', 0, 0, 1), ('py3k_compat.execfile', 0, 0, 1), ('pyreadline.lineeditor.lineobj', 0, 0, 0), ('pyreadline.lineeditor.history', 0, 0, 0), ('pyreadline.clipboard', 0, 0, 0), ('pyreadline.console', 0, 0, 0), ('pyreadline.logger', 0, 0, 0), ('pyreadline.keysyms.common', 0, 0, 0), ('pyreadline.keysyms.common.make_KeyPress_from_keydescr', 0, 0, 0), ('pyreadline.unicode_helper', 0, 0, 0), ('pyreadline.unicode_helper.ensure_unicode', 0, 0, 0), ('pyreadline.unicode_helper.ensure_str', 0, 0, 0), ('logger', 0, 0, 1), ('logger.log', 0, 0, 1), ('modes', 0, 0, 1), ('modes.editingmodes', 0, 0, 1), ('error', 0, 0, 1), ('error.ReadlineError', 0, 0, 1), ('error.GetSetError', 0, 0, 1), ('System', 0, 1, 0), ('traceback', 1, 1, 0), ('types', 1, 0, 0), ('pyreadline.lineeditor.lineobj', 1, 0, 0), ('pyreadline.keysyms.common', 1, 0, 0), ('pyreadline.keysyms.common.KeyPress', 1, 0, 0), ('pyreadline.console.event', 1, 0, 0), ('pyreadline.console.event.Event', 1, 0, 0)] binaries=[] datas=[]>
pyreadline.console: None -> <PkgModule 'pyreadline.console' C:\Anaconda\lib\site-packages\pyreadline\console\__init__.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('glob', 0, 0, 0), ('sys', 0, 0, 0), ('ironpython_console', 0, 1, 1), ('ironpython_console.*', 0, 1, 1), ('console', 0, 1, 1), ('console.*', 0, 1, 1)] binaries=[] datas=[]>
pyreadline.unicode_helper: None -> <PyModule 'pyreadline.unicode_helper' C:\Anaconda\lib\site-packages\pyreadline\unicode_helper.pyc imports=[('sys', 0, 0, -1), ('py3k_compat', 0, 0, 1), ('py3k_compat.unicode', 0, 0, 1), ('py3k_compat.bytes', 0, 0, 1)] binaries=[] datas=[]>
pyreadline.logger: None -> <PyModule 'pyreadline.logger' C:\Anaconda\lib\site-packages\pyreadline\logger.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('socket', 0, 0, 0), ('logging', 0, 0, 0), ('logging.handlers', 0, 0, 0), ('pyreadline.unicode_helper', 0, 0, 0), ('pyreadline.unicode_helper.ensure_str', 0, 0, 0)] binaries=[] datas=[]>
pyreadline.clipboard: None -> <PkgModule 'pyreadline.clipboard' C:\Anaconda\lib\site-packages\pyreadline\clipboard\__init__.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('sys', 0, 0, 0), ('ironpython_clipboard', 0, 1, 1), ('ironpython_clipboard.GetClipboardText', 0, 1, 1), ('ironpython_clipboard.SetClipboardText', 0, 1, 1), ('no_clipboard', 0, 1, 1), ('no_clipboard.GetClipboardText', 0, 1, 1), ('no_clipboard.SetClipboardText', 0, 1, 1), ('win32_clipboard', 0, 1, 1), ('win32_clipboard.GetClipboardText', 0, 1, 1), ('win32_clipboard.SetClipboardText', 0, 1, 1), ('no_clipboard', 0, 1, 1), ('no_clipboard.GetClipboardText', 0, 1, 1), ('no_clipboard.SetClipboardText', 0, 1, 1)] binaries=[] datas=[]>
pyreadline.lineeditor: None -> <PkgModule 'pyreadline.lineeditor' C:\Anaconda\lib\site-packages\pyreadline\lineeditor\__init__.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0)] binaries=[] datas=[]>
pyreadline.modes: None -> <PkgModule 'pyreadline.modes' C:\Anaconda\lib\site-packages\pyreadline\modes\__init__.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('', 0, 0, 1), ('emacs', 0, 0, 1), ('notemacs', 0, 0, 1), ('vi', 0, 0, 1)] binaries=[] datas=[]>
pyreadline.sys: None -> None
pyreadline.py3k_compat: None -> <PyModule 'pyreadline.py3k_compat' C:\Anaconda\lib\site-packages\pyreadline\py3k_compat.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('sys', 0, 0, 0), ('collections', 0, 1, 0), ('io', 0, 1, 0), ('io.StringIO', 0, 1, 0), ('StringIO', 0, 1, 0), ('StringIO.StringIO', 0, 1, 0)] binaries=[] datas=[]>
io: None -> <PyModule 'io' C:\Anaconda\lib\io.pyc imports=[('_io', 0, 0, -1), ('abc', 0, 0, -1), ('_io', 0, 0, -1), ('_io.DEFAULT_BUFFER_SIZE', 0, 0, -1), ('_io.BlockingIOError', 0, 0, -1), ('_io.UnsupportedOperation', 0, 0, -1), ('_io.open', 0, 0, -1), ('_io.FileIO', 0, 0, -1), ('_io.BytesIO', 0, 0, -1), ('_io.StringIO', 0, 0, -1), ('_io.BufferedReader', 0, 0, -1), ('_io.BufferedWriter', 0, 0, -1), ('_io.BufferedRWPair', 0, 0, -1), ('_io.BufferedRandom', 0, 0, -1), ('_io.IncrementalNewlineDecoder', 0, 0, -1), ('_io.TextIOWrapper', 0, 0, -1)] binaries=[] datas=[]>
_io: None -> <BuiltinModule '_io' None imports=[] binaries=[] datas=[]>
socket: None -> <PyModule 'socket' C:\Anaconda\lib\socket.pyc imports=[('_socket', 0, 0, -1), ('_socket', 0, 0, -1), ('_socket.*', 0, 0, -1), ('functools', 0, 0, -1), ('functools.partial', 0, 0, -1), ('types', 0, 0, -1), ('types.MethodType', 0, 0, -1), ('_ssl', 0, 0, -1), ('_ssl', 0, 1, -1), ('_ssl.SSLError', 0, 1, -1), ('_ssl', 0, 1, -1), ('_ssl.RAND_add', 0, 1, -1), ('_ssl.RAND_egd', 0, 1, -1), ('_ssl.RAND_status', 0, 1, -1), ('_ssl.SSL_ERROR_ZERO_RETURN', 0, 1, -1), ('_ssl.SSL_ERROR_WANT_READ', 0, 1, -1), ('_ssl.SSL_ERROR_WANT_WRITE', 0, 1, -1), ('_ssl.SSL_ERROR_WANT_X509_LOOKUP', 0, 1, -1), ('_ssl.SSL_ERROR_SYSCALL', 0, 1, -1), ('_ssl.SSL_ERROR_SSL', 0, 1, -1), ('_ssl.SSL_ERROR_WANT_CONNECT', 0, 1, -1), ('_ssl.SSL_ERROR_EOF', 0, 1, -1), ('_ssl.SSL_ERROR_INVALID_ERROR_CODE', 0, 1, -1), ('os', 0, 0, -1), ('sys', 0, 0, -1), ('warnings', 0, 0, -1), ('cStringIO', 0, 0, -1), ('cStringIO.StringIO', 0, 0, -1), ('StringIO', 0, 1, -1), ('StringIO.StringIO', 0, 1, -1), ('errno', 0, 0, -1), ('ssl', 1, 0, -1)] binaries=[] datas=[]>
logging: None -> <PkgModule 'logging' C:\Anaconda\lib\logging\__init__.pyc imports=[('sys', 0, 0, -1), ('os', 0, 0, -1), ('time', 0, 0, -1), ('cStringIO', 0, 0, -1), ('traceback', 0, 0, -1), ('warnings', 0, 0, -1), ('weakref', 0, 0, -1), ('codecs', 0, 0, -1), ('thread', 0, 0, -1), ('threading', 0, 0, -1), ('atexit', 0, 0, -1)] binaries=[] datas=[]>
logging.handlers: None -> <PyModule 'logging.handlers' C:\Anaconda\lib\logging\handlers.pyc imports=[('errno', 0, 0, -1), ('logging', 0, 0, -1), ('socket', 0, 0, -1), ('os', 0, 0, -1), ('cPickle', 0, 0, -1), ('struct', 0, 0, -1), ('time', 0, 0, -1), ('re', 0, 0, -1), ('stat', 0, 0, -1), ('stat.ST_DEV', 0, 0, -1), ('stat.ST_INO', 0, 0, -1), ('stat.ST_MTIME', 0, 0, -1), ('codecs', 0, 0, -1), ('smtplib', 1, 0, -1), ('email.utils', 1, 0, -1), ('email.utils.formatdate', 1, 0, -1), ('win32evtlogutil', 1, 0, -1), ('win32evtlog', 1, 0, -1), ('httplib', 1, 0, -1), ('urllib', 1, 0, -1)] binaries=[] datas=[]>
_socket: None -> <ExtensionModule '_socket' C:\Anaconda\DLLs\_socket.pyd imports=[] binaries=[] datas=[]>
_ssl: None -> <ExtensionModule '_ssl' C:\Anaconda\DLLs\_ssl.pyd imports=[] binaries=[] datas=[]>
ssl: None -> <PyModule 'ssl' C:\Anaconda\lib\ssl.pyc imports=[('textwrap', 0, 0, -1), ('_ssl', 0, 0, -1), ('_ssl', 0, 0, -1), ('_ssl.OPENSSL_VERSION_NUMBER', 0, 0, -1), ('_ssl.OPENSSL_VERSION_INFO', 0, 0, -1), ('_ssl.OPENSSL_VERSION', 0, 0, -1), ('_ssl', 0, 0, -1), ('_ssl.SSLError', 0, 0, -1), ('_ssl', 0, 0, -1), ('_ssl.CERT_NONE', 0, 0, -1), ('_ssl.CERT_OPTIONAL', 0, 0, -1), ('_ssl.CERT_REQUIRED', 0, 0, -1), ('_ssl', 0, 0, -1), ('_ssl.RAND_status', 0, 0, -1), ('_ssl.RAND_egd', 0, 0, -1), ('_ssl.RAND_add', 0, 0, -1), ('_ssl', 0, 0, -1), ('_ssl.SSL_ERROR_ZERO_RETURN', 0, 0, -1), ('_ssl.SSL_ERROR_WANT_READ', 0, 0, -1), ('_ssl.SSL_ERROR_WANT_WRITE', 0, 0, -1), ('_ssl.SSL_ERROR_WANT_X509_LOOKUP', 0, 0, -1), ('_ssl.SSL_ERROR_SYSCALL', 0, 0, -1), ('_ssl.SSL_ERROR_SSL', 0, 0, -1), ('_ssl.SSL_ERROR_WANT_CONNECT', 0, 0, -1), ('_ssl.SSL_ERROR_EOF', 0, 0, -1), ('_ssl.SSL_ERROR_INVALID_ERROR_CODE', 0, 0, -1), ('_ssl', 0, 0, -1), ('_ssl.PROTOCOL_SSLv3', 0, 0, -1), ('_ssl.PROTOCOL_SSLv23', 0, 0, -1), ('_ssl.PROTOCOL_TLSv1', 0, 0, -1), ('_ssl', 0, 0, -1), ('_ssl.PROTOCOL_SSLv2', 0, 0, -1), ('socket', 0, 0, -1), ('socket.socket', 0, 0, -1), ('socket._fileobject', 0, 0, -1), ('socket._delegate_methods', 0, 0, -1), ('socket.error', 0, 0, -1), ('socket', 0, 0, -1), ('socket.getnameinfo', 0, 0, -1), ('base64', 0, 0, -1), ('errno', 0, 0, -1), ('time', 1, 0, -1)] binaries=[] datas=[]>
logging.sys: None -> None
logging.os: None -> None
logging.time: None -> None
logging.cStringIO: None -> None
logging.traceback: None -> None
logging.warnings: None -> None
logging.weakref: None -> None
logging.codecs: None -> None
logging.thread: None -> None
logging.threading: None -> None
logging.atexit: None -> None
atexit: None -> <PyModule 'atexit' C:\Anaconda\lib\atexit.pyc imports=[('sys', 0, 0, -1), ('traceback', 1, 1, -1)] binaries=[] datas=[]>
logging.errno: None -> None
logging.logging: None -> None
logging.socket: None -> None
logging.cPickle: None -> None
logging.struct: None -> None
logging.re: None -> None
logging.stat: None -> None
logging.smtplib: None -> None
smtplib: None -> <PyModule 'smtplib' C:\Anaconda\lib\smtplib.pyc imports=[('socket', 0, 0, -1), ('re', 0, 0, -1), ('email.utils', 0, 0, -1), ('base64', 0, 0, -1), ('hmac', 0, 0, -1), ('email.base64mime', 0, 0, -1), ('email.base64mime.encode', 0, 0, -1), ('sys', 0, 0, -1), ('sys.stderr', 0, 0, -1), ('ssl', 0, 0, -1), ('sys', 0, 1, -1)] binaries=[] datas=[]>
logging.email: None -> None
email: None -> <PkgModule 'email' C:\Anaconda\lib\email\__init__.pyc imports=[('sys', 0, 0, -1), ('email.mime', 0, 0, -1), ('email.parser', 1, 0, -1), ('email.parser.Parser', 1, 0, -1), ('email.parser', 1, 0, -1), ('email.parser.Parser', 1, 0, -1), ('email.charset', 0, 0, -1), ('email.encoders', 0, 0, -1), ('email.errors', 0, 0, -1), ('email.feedparser', 0, 0, -1), ('email.generator', 0, 0, -1), ('email.header', 0, 0, -1), ('email.iterators', 0, 0, -1), ('email.message', 0, 0, -1), ('email.parser', 0, 0, -1), ('email.utils', 0, 0, -1), ('email.base64mime', 0, 0, -1), ('email.quoprimime', 0, 0, -1), ('email.mime.audio', 0, 0, -1), ('email.mime.base', 0, 0, -1), ('email.mime.image', 0, 0, -1), ('email.mime.message', 0, 0, -1), ('email.mime.multipart', 0, 0, -1), ('email.mime.nonmultipart', 0, 0, -1), ('email.mime.text', 0, 0, -1)] binaries=[] datas=[]>
email.utils: None -> <PyModule 'email.utils' C:\Anaconda\lib\email\utils.pyc imports=[('os', 0, 0, -1), ('re', 0, 0, -1), ('time', 0, 0, -1), ('base64', 0, 0, -1), ('random', 0, 0, -1), ('socket', 0, 0, -1), ('urllib', 0, 0, -1), ('warnings', 0, 0, -1), ('email._parseaddr', 0, 0, -1), ('email._parseaddr.quote', 0, 0, -1), ('email._parseaddr', 0, 0, -1), ('email._parseaddr.AddressList', 0, 0, -1), ('email._parseaddr', 0, 0, -1), ('email._parseaddr.mktime_tz', 0, 0, -1), ('email._parseaddr', 0, 0, -1), ('email._parseaddr.parsedate', 0, 0, -1), ('email._parseaddr', 0, 0, -1), ('email._parseaddr.parsedate_tz', 0, 0, -1), ('quopri', 0, 0, -1), ('quopri.decodestring', 0, 0, -1), ('email.encoders', 0, 0, -1), ('email.encoders._bencode', 0, 0, -1), ('email.encoders._qencode', 0, 0, -1), ('urllib', 1, 0, -1)] binaries=[] datas=[]>
logging.win32evtlogutil: None -> None
win32evtlogutil: None -> <PyModule 'win32evtlogutil' C:\Anaconda\lib\site-packages\win32\lib\win32evtlogutil.pyc imports=[('win32api', 0, 0, -1), ('win32con', 0, 0, -1), ('winerror', 0, 0, -1), ('win32evtlog', 0, 0, -1)] binaries=[] datas=[]>
logging.win32evtlog: None -> None
win32evtlog: None -> <ExtensionModule 'win32evtlog' C:\Anaconda\lib\site-packages\win32\win32evtlog.pyd imports=[] binaries=[] datas=[]>
logging.httplib: None -> None
httplib: None -> <PyModule 'httplib' C:\Anaconda\lib\httplib.pyc imports=[('array', 0, 0, -1), ('array.array', 0, 0, -1), ('os', 0, 0, -1), ('socket', 0, 0, -1), ('sys', 0, 0, -1), ('sys.py3kwarning', 0, 0, -1), ('urlparse', 0, 0, -1), ('urlparse.urlsplit', 0, 0, -1), ('warnings', 0, 0, -1), ('mimetools', 0, 0, -1), ('cStringIO', 0, 0, -1), ('cStringIO.StringIO', 0, 0, -1), ('StringIO', 0, 1, -1), ('StringIO.StringIO', 0, 1, -1), ('ssl', 0, 0, -1)] binaries=[] datas=[]>
logging.urllib: None -> None
urllib: None -> <PyModule 'urllib' C:\Anaconda\lib\urllib.pyc imports=[('string', 0, 0, -1), ('socket', 0, 0, -1), ('os', 0, 0, -1), ('time', 0, 0, -1), ('sys', 0, 0, -1), ('base64', 0, 0, -1), ('re', 0, 0, -1), ('urlparse', 0, 0, -1), ('urlparse.urljoin', 0, 0, -1), ('nturl2path', 0, 1, -1), ('nturl2path.url2pathname', 0, 1, -1), ('nturl2path.pathname2url', 0, 1, -1), ('rourl2path', 0, 1, -1), ('rourl2path.url2pathname', 0, 1, -1), ('rourl2path.pathname2url', 0, 1, -1), ('ssl', 0, 0, -1), ('_scproxy', 0, 1, -1), ('_scproxy._get_proxy_settings', 0, 1, -1), ('_scproxy._get_proxies', 0, 1, -1), ('warnings', 1, 0, -1), ('warnings.warnpy3k', 1, 0, -1), ('tempfile', 1, 1, -1), ('httplib', 1, 0, -1), ('httplib', 1, 0, -1), ('mimetypes', 1, 0, -1), ('mimetools', 1, 0, -1), ('email.utils', 1, 0, -1), ('cStringIO', 1, 0, -1), ('cStringIO.StringIO', 1, 0, -1), ('StringIO', 1, 1, -1), ('StringIO.StringIO', 1, 1, -1), ('mimetypes', 1, 0, -1), ('mimetools', 1, 0, -1), ('cStringIO', 1, 0, -1), ('cStringIO.StringIO', 1, 0, -1), ('StringIO', 1, 1, -1), ('StringIO.StringIO', 1, 1, -1), ('ftplib', 1, 1, -1), ('mimetools', 1, 0, -1), ('cStringIO', 1, 0, -1), ('cStringIO.StringIO', 1, 0, -1), ('StringIO', 1, 1, -1), ('StringIO.StringIO', 1, 1, -1), ('re', 1, 0, -1), ('re', 1, 0, -1), ('getpass', 1, 0, -1), ('ftplib', 1, 1, -1), ('mimetools', 1, 1, -1), ('cStringIO', 1, 1, -1), ('cStringIO.StringIO', 1, 1, -1), ('StringIO', 1, 1, -1), ('StringIO.StringIO', 1, 1, -1), ('ftplib', 1, 0, -1), ('ftplib', 1, 0, -1), ('re', 1, 1, -1), ('re', 1, 1, -1), ('re', 1, 1, -1), ('re', 1, 1, -1), ('re', 1, 1, -1), ('re', 1, 1, -1), ('re', 1, 1, -1), ('re', 1, 1, -1), ('re', 1, 1, -1), ('re', 1, 0, -1), ('socket', 1, 0, -1), ('fnmatch', 1, 0, -1), ('fnmatch.fnmatch', 1, 0, -1), ('_winreg', 1, 0, -1), ('re', 1, 1, -1), ('_winreg', 1, 0, -1), ('re', 1, 0, -1)] binaries=[] datas=[]>
hmac: None -> <PyModule 'hmac' C:\Anaconda\lib\hmac.pyc imports=[('warnings', 0, 0, -1), ('hashlib', 1, 1, -1)] binaries=[] datas=[]>
email.base64mime: None -> <PyModule 'email.base64mime' C:\Anaconda\lib\email\base64mime.pyc imports=[('binascii', 0, 0, -1), ('binascii.b2a_base64', 0, 0, -1), ('binascii.a2b_base64', 0, 0, -1), ('email.utils', 0, 0, -1), ('email.utils.fix_eols', 0, 0, -1)] binaries=[] datas=[]>
email.sys: None -> None
email.email: None -> None
email.mime: None -> <PkgModule 'email.mime' C:\Anaconda\lib\email\mime\__init__.pyc imports=[] binaries=[] datas=[]>
email.parser: None -> <PyModule 'email.parser' C:\Anaconda\lib\email\parser.pyc imports=[('warnings', 0, 0, -1), ('cStringIO', 0, 0, -1), ('cStringIO.StringIO', 0, 0, -1), ('email.feedparser', 0, 0, -1), ('email.feedparser.FeedParser', 0, 0, -1), ('email.message', 0, 0, -1), ('email.message.Message', 0, 0, -1)] binaries=[] datas=[]>
email.charset: None -> <PyModule 'email.charset' C:\Anaconda\lib\email\charset.pyc imports=[('codecs', 0, 0, -1), ('email.base64mime', 0, 0, -1), ('email.quoprimime', 0, 0, -1), ('email', 0, 0, -1), ('email.errors', 0, 0, -1), ('email.encoders', 0, 0, -1), ('email.encoders.encode_7or8bit', 0, 0, -1)] binaries=[] datas=[]>
email.encoders: None -> <PyModule 'email.encoders' C:\Anaconda\lib\email\encoders.pyc imports=[('base64', 0, 0, -1), ('quopri', 0, 0, -1), ('quopri.encodestring', 0, 0, -1)] binaries=[] datas=[]>
email.errors: None -> <PyModule 'email.errors' C:\Anaconda\lib\email\errors.pyc imports=[] binaries=[] datas=[]>
email.feedparser: None -> <PyModule 'email.feedparser' C:\Anaconda\lib\email\feedparser.pyc imports=[('re', 0, 0, -1), ('email', 0, 0, -1), ('email.errors', 0, 0, -1), ('email', 0, 0, -1), ('email.message', 0, 0, -1)] binaries=[] datas=[]>
email.generator: None -> <PyModule 'email.generator' C:\Anaconda\lib\email\generator.pyc imports=[('re', 0, 0, -1), ('sys', 0, 0, -1), ('time', 0, 0, -1), ('random', 0, 0, -1), ('warnings', 0, 0, -1), ('cStringIO', 0, 0, -1), ('cStringIO.StringIO', 0, 0, -1), ('email.header', 0, 0, -1), ('email.header.Header', 0, 0, -1)] binaries=[] datas=[]>
email.header: None -> <PyModule 'email.header' C:\Anaconda\lib\email\header.pyc imports=[('re', 0, 0, -1), ('binascii', 0, 0, -1), ('email.quoprimime', 0, 0, -1), ('email.base64mime', 0, 0, -1), ('email.errors', 0, 0, -1), ('email.errors.HeaderParseError', 0, 0, -1), ('email.charset', 0, 0, -1), ('email.charset.Charset', 0, 0, -1)] binaries=[] datas=[]>
email.iterators: None -> <PyModule 'email.iterators' C:\Anaconda\lib\email\iterators.pyc imports=[('sys', 0, 0, -1), ('cStringIO', 0, 0, -1), ('cStringIO.StringIO', 0, 0, -1)] binaries=[] datas=[]>
email.message: None -> <PyModule 'email.message' C:\Anaconda\lib\email\message.pyc imports=[('re', 0, 0, -1), ('uu', 0, 0, -1), ('binascii', 0, 0, -1), ('warnings', 0, 0, -1), ('cStringIO', 0, 0, -1), ('cStringIO.StringIO', 0, 0, -1), ('email.charset', 0, 0, -1), ('email', 0, 0, -1), ('email.utils', 0, 0, -1), ('email', 0, 0, -1), ('email.errors', 0, 0, -1), ('email.iterators', 1, 0, -1), ('email.iterators.walk', 1, 0, -1), ('email.generator', 1, 0, -1), ('email.generator.Generator', 1, 0, -1), ('email.iterators', 0, 0, -1), ('email.generator', 0, 0, -1)] binaries=[] datas=[]>
email.quoprimime: None -> <PyModule 'email.quoprimime' C:\Anaconda\lib\email\quoprimime.pyc imports=[('re', 0, 0, -1), ('string', 0, 0, -1), ('string.hexdigits', 0, 0, -1), ('email.utils', 0, 0, -1), ('email.utils.fix_eols', 0, 0, -1)] binaries=[] datas=[]>
email.mime.audio: None -> <PyModule 'email.mime.audio' C:\Anaconda\lib\email\mime\audio.pyc imports=[('sndhdr', 0, 0, -1), ('cStringIO', 0, 0, -1), ('cStringIO.StringIO', 0, 0, -1), ('email', 0, 0, -1), ('email.encoders', 0, 0, -1), ('email.mime.nonmultipart', 0, 0, -1), ('email.mime.nonmultipart.MIMENonMultipart', 0, 0, -1)] binaries=[] datas=[]>
email.mime.base: None -> <PyModule 'email.mime.base' C:\Anaconda\lib\email\mime\base.pyc imports=[('email', 0, 0, -1), ('email.message', 0, 0, -1)] binaries=[] datas=[]>
email.mime.image: None -> <PyModule 'email.mime.image' C:\Anaconda\lib\email\mime\image.pyc imports=[('imghdr', 0, 0, -1), ('email', 0, 0, -1), ('email.encoders', 0, 0, -1), ('email.mime.nonmultipart', 0, 0, -1), ('email.mime.nonmultipart.MIMENonMultipart', 0, 0, -1)] binaries=[] datas=[]>
email.mime.message: None -> <PyModule 'email.mime.message' C:\Anaconda\lib\email\mime\message.pyc imports=[('email', 0, 0, -1), ('email.message', 0, 0, -1), ('email.mime.nonmultipart', 0, 0, -1), ('email.mime.nonmultipart.MIMENonMultipart', 0, 0, -1)] binaries=[] datas=[]>
email.mime.multipart: None -> <PyModule 'email.mime.multipart' C:\Anaconda\lib\email\mime\multipart.pyc imports=[('email.mime.base', 0, 0, -1), ('email.mime.base.MIMEBase', 0, 0, -1)] binaries=[] datas=[]>
email.mime.nonmultipart: None -> <PyModule 'email.mime.nonmultipart' C:\Anaconda\lib\email\mime\nonmultipart.pyc imports=[('email', 0, 0, -1), ('email.errors', 0, 0, -1), ('email.mime.base', 0, 0, -1), ('email.mime.base.MIMEBase', 0, 0, -1)] binaries=[] datas=[]>
email.mime.text: None -> <PyModule 'email.mime.text' C:\Anaconda\lib\email\mime\text.pyc imports=[('email.encoders', 0, 0, -1), ('email.encoders.encode_7or8bit', 0, 0, -1), ('email.mime.nonmultipart', 0, 0, -1), ('email.mime.nonmultipart.MIMENonMultipart', 0, 0, -1)] binaries=[] datas=[]>
email.warnings: None -> None
email.cStringIO: None -> None
email.re: None -> None
email.uu: None -> None
uu: None -> <PyModule 'uu' C:\Anaconda\lib\uu.pyc imports=[('binascii', 0, 0, -1), ('os', 0, 0, -1), ('sys', 0, 0, -1), ('optparse', 1, 0, -1)] binaries=[] datas=[]>
email.binascii: None -> None
email.codecs: None -> None
email.os: None -> None
email.time: None -> None
email.base64: None -> None
email.random: None -> None
email.socket: None -> None
email.urllib: None -> None
email._parseaddr: None -> <PyModule 'email._parseaddr' C:\Anaconda\lib\email\_parseaddr.pyc imports=[('time', 0, 0, -1), ('calendar', 0, 0, -1)] binaries=[] datas=[]>
email.quopri: None -> None
math: None -> <BuiltinModule 'math' None imports=[] binaries=[] datas=[]>
hashlib: None -> <PyModule 'hashlib' C:\Anaconda\lib\hashlib.pyc imports=[('_hashlib', 0, 0, -1), ('logging', 0, 1, -1), ('_sha', 1, 1, -1), ('_md5', 1, 1, -1), ('_sha256', 1, 1, -1), ('_sha512', 1, 1, -1)] binaries=[] datas=[]>
_random: None -> <BuiltinModule '_random' None imports=[] binaries=[] datas=[]>
_hashlib: None -> <ExtensionModule '_hashlib' C:\Anaconda\DLLs\_hashlib.pyd imports=[] binaries=[] datas=[]>
_sha: None -> <BuiltinModule '_sha' None imports=[] binaries=[] datas=[]>
_md5: None -> <BuiltinModule '_md5' None imports=[] binaries=[] datas=[]>
_sha256: None -> <BuiltinModule '_sha256' None imports=[] binaries=[] datas=[]>
_sha512: None -> <BuiltinModule '_sha512' None imports=[] binaries=[] datas=[]>
urlparse: None -> <PyModule 'urlparse' C:\Anaconda\lib\urlparse.pyc imports=[('re', 0, 0, -1), ('collections', 0, 0, -1), ('collections.namedtuple', 0, 0, -1)] binaries=[] datas=[]>
nturl2path: None -> <PyModule 'nturl2path' C:\Anaconda\lib\nturl2path.pyc imports=[('string', 1, 0, -1), ('urllib', 1, 0, -1), ('urllib', 1, 0, -1)] binaries=[] datas=[]>
rourl2path: None -> None
  DEL rourl2path
rourl2path: None -> None
  DEL rourl2path
rourl2path: None -> None
  DEL rourl2path
_scproxy: None -> None
  DEL _scproxy
_scproxy: None -> None
  DEL _scproxy
_scproxy: None -> None
  DEL _scproxy
mimetypes: None -> <PyModule 'mimetypes' C:\Anaconda\lib\mimetypes.pyc imports=[('os', 0, 0, -1), ('sys', 0, 0, -1), ('posixpath', 0, 0, -1), ('urllib', 0, 0, -1), ('_winreg', 0, 0, -1), ('getopt', 0, 1, -1)] binaries=[] datas=[]>
mimetools: None -> <PyModule 'mimetools' C:\Anaconda\lib\mimetools.pyc imports=[('os', 0, 0, -1), ('sys', 0, 0, -1), ('tempfile', 0, 0, -1), ('warnings', 0, 0, -1), ('warnings.filterwarnings', 0, 0, -1), ('warnings.catch_warnings', 0, 0, -1), ('rfc822', 0, 0, -1), ('warnings', 0, 0, -1), ('warnings.warnpy3k', 0, 0, -1), ('thread', 0, 0, -1), ('dummy_thread', 0, 1, -1), ('time', 1, 0, -1), ('socket', 1, 1, -1), ('base64', 1, 1, -1), ('quopri', 1, 1, -1), ('uu', 1, 1, -1), ('base64', 1, 1, -1), ('quopri', 1, 1, -1), ('uu', 1, 1, -1)] binaries=[] datas=[]>
ftplib: None -> <PyModule 'ftplib' C:\Anaconda\lib\ftplib.pyc imports=[('os', 0, 0, -1), ('sys', 0, 0, -1), ('SOCKS', 0, 0, -1), ('socket', 0, 0, -1), ('socket.getfqdn', 0, 0, -1), ('socket', 0, 1, -1), ('socket', 0, 0, -1), ('socket._GLOBAL_DEFAULT_TIMEOUT', 0, 0, -1), ('ssl', 0, 0, -1), ('re', 1, 1, -1), ('re', 1, 1, -1)] binaries=[] datas=[]>
getpass: None -> <PyModule 'getpass' C:\Anaconda\lib\getpass.pyc imports=[('os', 0, 0, -1), ('sys', 0, 0, -1), ('warnings', 0, 0, -1), ('termios', 0, 0, -1), ('msvcrt', 0, 1, -1), ('EasyDialogs', 0, 1, -1), ('EasyDialogs.AskPassword', 0, 1, -1), ('msvcrt', 1, 0, -1), ('os', 1, 0, -1), ('pwd', 1, 0, -1)] binaries=[] datas=[]>
_winreg: None -> <BuiltinModule '_winreg' None imports=[] binaries=[] datas=[]>
fcntl: None -> None
  DEL fcntl
rfc822: None -> <PyModule 'rfc822' C:\Anaconda\lib\rfc822.pyc imports=[('time', 0, 0, -1), ('warnings', 0, 0, -1), ('warnings.warnpy3k', 0, 0, -1), ('sys', 0, 1, -1), ('os', 0, 1, -1)] binaries=[] datas=[]>
SOCKS: None -> None
  DEL SOCKS
termios: None -> None
  DEL termios
EasyDialogs: None -> None
  DEL EasyDialogs
EasyDialogs: None -> None
  DEL EasyDialogs
pwd: None -> None
  DEL pwd
email.calendar: None -> None
email.string: None -> None
email.mime.sndhdr: None -> None
sndhdr: None -> <PyModule 'sndhdr' C:\Anaconda\lib\sndhdr.pyc imports=[('aifc', 1, 0, -1), ('sys', 1, 0, -1), ('sys', 1, 0, -1), ('os', 1, 0, -1), ('glob', 1, 1, -1)] binaries=[] datas=[]>
email.mime.cStringIO: None -> None
email.mime.email: None -> None
aifc: None -> <PyModule 'aifc' C:\Anaconda\lib\aifc.pyc imports=[('struct', 0, 0, -1), ('__builtin__', 0, 0, -1), ('chunk', 0, 0, -1), ('chunk.Chunk', 0, 0, -1), ('sys', 0, 1, -1), ('math', 1, 0, -1), ('cl', 1, 1, -1), ('cl', 1, 0, -1), ('audioop', 1, 0, -1), ('audioop', 1, 0, -1), ('audioop', 1, 1, -1), ('cl', 1, 1, -1), ('audioop', 1, 1, -1), ('cl', 1, 0, -1), ('audioop', 1, 0, -1), ('audioop', 1, 0, -1), ('cl', 1, 0, -1), ('audioop', 1, 1, -1)] binaries=[] datas=[]>
glob: None -> <PyModule 'glob' C:\Anaconda\lib\glob.pyc imports=[('sys', 0, 0, -1), ('os', 0, 0, -1), ('re', 0, 0, -1), ('fnmatch', 0, 0, -1)] binaries=[] datas=[]>
chunk: None -> <PyModule 'chunk' C:\Anaconda\lib\chunk.pyc imports=[('struct', 1, 0, -1)] binaries=[] datas=[]>
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
audioop: None -> <BuiltinModule 'audioop' None imports=[] binaries=[] datas=[]>
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
email.mime.imghdr: None -> None
imghdr: None -> <PyModule 'imghdr' C:\Anaconda\lib\imghdr.pyc imports=[('sys', 1, 0, -1), ('sys', 1, 0, -1), ('os', 1, 0, -1), ('glob', 1, 1, -1)] binaries=[] datas=[]>
win32api: None -> <ExtensionModule 'win32api' C:\Anaconda\lib\site-packages\win32\win32api.pyd imports=[] binaries=[] datas=[]>
win32con: None -> <PyModule 'win32con' C:\Anaconda\lib\site-packages\win32\lib\win32con.pyc imports=[] binaries=[] datas=[]>
winerror: None -> <PyModule 'winerror' C:\Anaconda\lib\site-packages\win32\lib\winerror.pyc imports=[] binaries=[] datas=[]>
pyreadline.clipboard.ironpython_clipboard: None -> <PyModule 'pyreadline.clipboard.ironpython_clipboard' C:\Anaconda\lib\site-packages\pyreadline\clipboard\ironpython_clipboard.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('clr', 0, 0, 0), ('System.Windows.Forms.Clipboard', 0, 0, 0)] binaries=[] datas=[]>
pyreadline.clipboard.no_clipboard: None -> <PyModule 'pyreadline.clipboard.no_clipboard' C:\Anaconda\lib\site-packages\pyreadline\clipboard\no_clipboard.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0)] binaries=[] datas=[]>
pyreadline.clipboard.win32_clipboard: None -> <PyModule 'pyreadline.clipboard.win32_clipboard' C:\Anaconda\lib\site-packages\pyreadline\clipboard\win32_clipboard.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('ctypes', 0, 0, 0), ('ctypes.*', 0, 0, 0), ('pyreadline.keysyms.winconstants', 0, 0, 0), ('pyreadline.keysyms.winconstants.CF_UNICODETEXT', 0, 0, 0), ('pyreadline.keysyms.winconstants.GHND', 0, 0, 0), ('pyreadline.unicode_helper', 0, 0, 0), ('pyreadline.unicode_helper.ensure_unicode', 0, 0, 0), ('pyreadline.unicode_helper.ensure_str', 0, 0, 0)] binaries=[('user32.dll', 'C:\\WINDOWS\\system32\\user32.dll', 'BINARY'), ('user32.dll', 'C:\\WINDOWS\\system32\\user32.dll', 'BINARY'), ('user32.dll', 'C:\\WINDOWS\\system32\\user32.dll', 'BINARY'), ('user32.dll', 'C:\\WINDOWS\\system32\\user32.dll', 'BINARY'), ('user32.dll', 'C:\\WINDOWS\\system32\\user32.dll', 'BINARY'), ('user32.dll', 'C:\\WINDOWS\\system32\\user32.dll', 'BINARY'), ('user32.dll', 'C:\\WINDOWS\\system32\\user32.dll', 'BINARY'), ('msvcrt.dll', 'C:\\WINDOWS\\system32\\msvcrt.dll', 'BINARY')] datas=[]>
clr: None -> None
  DEL clr
System: None -> None
  DEL System
ctypes: None -> <PkgModule 'ctypes' C:\Anaconda\lib\ctypes\__init__.pyc imports=[('os', 0, 0, -1), ('sys', 0, 0, -1), ('_ctypes', 0, 0, -1), ('_ctypes.Union', 0, 0, -1), ('_ctypes.Structure', 0, 0, -1), ('_ctypes.Array', 0, 0, -1), ('_ctypes', 0, 0, -1), ('_ctypes._Pointer', 0, 0, -1), ('_ctypes', 0, 0, -1), ('_ctypes.CFuncPtr', 0, 0, -1), ('_ctypes', 0, 0, -1), ('_ctypes.__version__', 0, 0, -1), ('_ctypes', 0, 0, -1), ('_ctypes.RTLD_LOCAL', 0, 0, -1), ('_ctypes.RTLD_GLOBAL', 0, 0, -1), ('_ctypes', 0, 0, -1), ('_ctypes.ArgumentError', 0, 0, -1), ('struct', 0, 0, -1), ('struct.calcsize', 0, 0, -1), ('_ctypes', 0, 1, -1), ('_ctypes.FormatError', 0, 1, -1), ('_ctypes', 0, 0, -1), ('_ctypes.FUNCFLAG_CDECL', 0, 0, -1), ('_ctypes.FUNCFLAG_PYTHONAPI', 0, 0, -1), ('_ctypes.FUNCFLAG_USE_ERRNO', 0, 0, -1), ('_ctypes.FUNCFLAG_USE_LASTERROR', 0, 0, -1), ('_ctypes', 0, 1, -1), ('_ctypes.LoadLibrary', 0, 1, -1), ('_ctypes', 0, 1, -1), ('_ctypes.FUNCFLAG_STDCALL', 0, 1, -1), ('_ctypes', 0, 1, -1), ('_ctypes.dlopen', 0, 1, -1), ('_ctypes', 0, 0, -1), ('_ctypes.sizeof', 0, 0, -1), ('_ctypes.byref', 0, 0, -1), ('_ctypes.addressof', 0, 0, -1), ('_ctypes.alignment', 0, 0, -1), ('_ctypes.resize', 0, 0, -1), ('_ctypes', 0, 0, -1), ('_ctypes.get_errno', 0, 0, -1), ('_ctypes.set_errno', 0, 0, -1), ('_ctypes', 0, 0, -1), ('_ctypes._SimpleCData', 0, 0, -1), ('_ctypes', 0, 0, -1), ('_ctypes.POINTER', 0, 0, -1), ('_ctypes.pointer', 0, 0, -1), ('_ctypes._pointer_type_cache', 0, 0, -1), ('_ctypes', 0, 0, -1), ('_ctypes.set_conversion_mode', 0, 0, -1), ('_ctypes', 0, 1, -1), ('_ctypes._check_HRESULT', 0, 1, -1), ('_ctypes._SimpleCData', 0, 1, -1), ('_ctypes', 0, 1, -1), ('_ctypes.get_last_error', 0, 1, -1), ('_ctypes.set_last_error', 0, 1, -1), ('_ctypes', 0, 0, -1), ('_ctypes._memmove_addr', 0, 0, -1), ('_ctypes._memset_addr', 0, 0, -1), ('_ctypes._string_at_addr', 0, 0, -1), ('_ctypes._cast_addr', 0, 0, -1), ('_ctypes', 0, 0, -1), ('_ctypes._wstring_at_addr', 0, 0, -1), ('ctypes._endian', 0, 0, -1), ('ctypes._endian.BigEndianStructure', 0, 0, -1), ('ctypes._endian.LittleEndianStructure', 0, 0, -1), ('struct', 1, 0, -1), ('struct.calcsize', 1, 0, -1)] binaries=[] datas=[]>
pyreadline.keysyms: None -> <PkgModule 'pyreadline.keysyms' C:\Anaconda\lib\site-packages\pyreadline\keysyms\__init__.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('sys', 0, 0, 0), ('', 0, 0, 1), ('winconstants', 0, 0, 1), ('ironpython_keysyms', 0, 1, 1), ('ironpython_keysyms.*', 0, 1, 1), ('keysyms', 0, 1, 1), ('keysyms.*', 0, 1, 1)] binaries=[] datas=[]>
pyreadline.keysyms.winconstants: None -> <PyModule 'pyreadline.keysyms.winconstants' C:\Anaconda\lib\site-packages\pyreadline\keysyms\winconstants.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0)] binaries=[] datas=[]>
ctypes.os: None -> None
ctypes.sys: None -> None
ctypes._ctypes: None -> None
_ctypes: None -> <ExtensionModule '_ctypes' C:\Anaconda\DLLs\_ctypes.pyd imports=[] binaries=[] datas=[]>
ctypes.struct: None -> None
ctypes.ctypes: None -> None
ctypes._endian: None -> <PyModule 'ctypes._endian' C:\Anaconda\lib\ctypes\_endian.pyc imports=[('sys', 0, 0, -1), ('ctypes', 0, 0, -1), ('ctypes.*', 0, 0, -1)] binaries=[] datas=[]>
pyreadline.keysyms.ironpython_keysyms: None -> <PyModule 'pyreadline.keysyms.ironpython_keysyms' C:\Anaconda\lib\site-packages\pyreadline\keysyms\ironpython_keysyms.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('System', 0, 0, 0), ('common', 0, 0, 1), ('common.validkey', 0, 0, 1), ('common.KeyPress', 0, 0, 1), ('common.make_KeyPress_from_keydescr', 0, 0, 1)] binaries=[] datas=[]>
pyreadline.keysyms.keysyms: None -> <PyModule 'pyreadline.keysyms.keysyms' C:\Anaconda\lib\site-packages\pyreadline\keysyms\keysyms.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('', 0, 0, 1), ('winconstants', 0, 0, 1), ('pyreadline.logger', 0, 0, 0), ('pyreadline.logger.log', 0, 0, 0), ('ctypes', 0, 0, 0), ('ctypes.windll', 0, 0, 0), ('ctypes', 0, 0, 0), ('common', 0, 0, 1), ('common.KeyPress', 0, 0, 1), ('startup', 0, 1, 0)] binaries=[('user32.dll', 'C:\\WINDOWS\\system32\\user32.dll', 'BINARY')] datas=[]>
System: None -> None
  DEL System
pyreadline.keysyms.common: None -> <PyModule 'pyreadline.keysyms.common' C:\Anaconda\lib\site-packages\pyreadline\keysyms\common.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('sets', 0, 1, 0), ('sets.Set', 0, 1, 0), ('pyreadline.unicode_helper', 0, 0, 0), ('pyreadline.unicode_helper.ensure_unicode', 0, 0, 0), ('startup', 0, 1, 0)] binaries=[] datas=[]>
sets: None -> <PyModule 'sets' C:\Anaconda\lib\sets.pyc imports=[('itertools', 0, 0, -1), ('itertools.ifilter', 0, 0, -1), ('itertools.ifilterfalse', 0, 0, -1), ('warnings', 0, 0, -1), ('copy', 1, 0, -1), ('copy.deepcopy', 1, 0, -1)] binaries=[] datas=[]>
startup: None -> None
  DEL startup
ctypes.windll: None -> None
  DEL ctypes.windll
startup: None -> None
  DEL startup
pyreadline.modes.emacs: None -> <PyModule 'pyreadline.modes.emacs' C:\Anaconda\lib\site-packages\pyreadline\modes\emacs.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('os', 0, 0, 0), ('sys', 0, 0, 0), ('time', 0, 0, 0), ('pyreadline.logger', 0, 0, 0), ('pyreadline.logger', 0, 0, 0), ('pyreadline.logger.log', 0, 0, 0), ('pyreadline.lineeditor.lineobj', 0, 0, 0), ('pyreadline.lineeditor.lineobj.Point', 0, 0, 0), ('pyreadline.lineeditor.lineobj', 0, 0, 0), ('pyreadline.lineeditor.history', 0, 0, 0), ('', 0, 0, 1), ('basemode', 0, 0, 1), ('pyreadline.unicode_helper', 0, 0, 0), ('pyreadline.unicode_helper.ensure_unicode', 0, 0, 0)] binaries=[] datas=[]>
pyreadline.modes.notemacs: None -> <PyModule 'pyreadline.modes.notemacs' C:\Anaconda\lib\site-packages\pyreadline\modes\notemacs.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('os', 0, 0, 0), ('pyreadline.logger', 0, 0, 0), ('pyreadline.logger', 0, 0, 0), ('pyreadline.logger.log', 0, 0, 0), ('pyreadline.lineeditor.lineobj', 0, 0, 0), ('pyreadline.lineeditor.history', 0, 0, 0), ('', 0, 0, 1), ('basemode', 0, 0, 1)] binaries=[] datas=[]>
pyreadline.modes.vi: None -> <PyModule 'pyreadline.modes.vi' C:\Anaconda\lib\site-packages\pyreadline\modes\vi.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('os', 0, 0, 0), ('pyreadline.logger', 0, 0, 0), ('pyreadline.logger', 0, 0, 0), ('pyreadline.logger.log', 0, 0, 0), ('pyreadline.lineeditor.lineobj', 0, 0, 0), ('pyreadline.lineeditor.history', 0, 0, 0), ('', 0, 0, 1), ('basemode', 0, 0, 1), ('tempfile', 1, 0, 0)] binaries=[] datas=[]>
pyreadline.lineeditor.lineobj: None -> <PyModule 'pyreadline.lineeditor.lineobj' C:\Anaconda\lib\site-packages\pyreadline\lineeditor\lineobj.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('re', 0, 0, 0), ('operator', 0, 0, 0), ('sys', 0, 0, 0), ('', 0, 0, 1), ('wordmatcher', 0, 0, 1), ('pyreadline.clipboard', 0, 0, 0), ('pyreadline.logger', 0, 0, 0), ('pyreadline.logger.log', 0, 0, 0), ('pyreadline.unicode_helper', 0, 0, 0), ('pyreadline.unicode_helper.ensure_unicode', 0, 0, 0), ('pyreadline.unicode_helper.biter', 0, 0, 0)] binaries=[] datas=[]>
pyreadline.lineeditor.history: None -> <PyModule 'pyreadline.lineeditor.history' C:\Anaconda\lib\site-packages\pyreadline\lineeditor\history.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('re', 0, 0, 0), ('operator', 0, 0, 0), ('string', 0, 0, 0), ('sys', 0, 0, 0), ('os', 0, 0, 0), ('pyreadline.unicode_helper', 0, 0, 0), ('pyreadline.unicode_helper.ensure_unicode', 0, 0, 0), ('pyreadline.unicode_helper.ensure_str', 0, 0, 0), ('pyreadline', 0, 1, 0), ('', 0, 0, 1), ('lineobj', 0, 0, 1), ('pyreadline.logger', 0, 0, 0), ('pyreadline.logger.log', 0, 0, 0)] binaries=[] datas=[]>
pyreadline.modes.basemode: None -> <PyModule 'pyreadline.modes.basemode' C:\Anaconda\lib\site-packages\pyreadline\modes\basemode.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('os', 0, 0, 0), ('re', 0, 0, 0), ('math', 0, 0, 0), ('glob', 0, 0, 0), ('sys', 0, 0, 0), ('time', 0, 0, 0), ('pyreadline.py3k_compat', 0, 0, 0), ('pyreadline.py3k_compat.callable', 0, 0, 0), ('pyreadline.logger', 0, 0, 0), ('pyreadline.logger', 0, 0, 0), ('pyreadline.logger.log', 0, 0, 0), ('pyreadline.keysyms.common', 0, 0, 0), ('pyreadline.keysyms.common.make_KeyPress_from_keydescr', 0, 0, 0), ('pyreadline.lineeditor.lineobj', 0, 0, 0), ('pyreadline.lineeditor.history', 0, 0, 0), ('pyreadline.clipboard', 0, 0, 0), ('pyreadline.error', 0, 0, 0), ('pyreadline.error.ReadlineError', 0, 0, 0), ('pyreadline.error.GetSetError', 0, 0, 0), ('pyreadline.unicode_helper', 0, 0, 0), ('pyreadline.unicode_helper.ensure_str', 0, 0, 0), ('pyreadline.unicode_helper.ensure_unicode', 0, 0, 0)] binaries=[] datas=[]>
pyreadline.lineeditor.wordmatcher: None -> <PyModule 'pyreadline.lineeditor.wordmatcher' C:\Anaconda\lib\site-packages\pyreadline\lineeditor\wordmatcher.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('re', 0, 0, 0), ('operator', 0, 0, 0)] binaries=[] datas=[]>
pyreadline.error: None -> <PyModule 'pyreadline.error' C:\Anaconda\lib\site-packages\pyreadline\error.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0)] binaries=[] datas=[]>
pyreadline.console.ironpython_console: None -> <PyModule 'pyreadline.console.ironpython_console' C:\Anaconda\lib\site-packages\pyreadline\console\ironpython_console.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('clr', 0, 0, 0), ('sys', 0, 0, 0), ('IronPythonConsole', 0, 0, 0), ('sys', 0, 0, 0), ('re', 0, 0, 0), ('os', 0, 0, 0), ('System', 0, 0, 0), ('event', 0, 0, 1), ('event.Event', 0, 0, 1), ('pyreadline.logger', 0, 0, 0), ('pyreadline.logger.log', 0, 0, 0), ('pyreadline.keysyms', 0, 0, 0), ('pyreadline.keysyms.make_keysym', 0, 0, 0), ('pyreadline.keysyms.make_keyinfo', 0, 0, 0), ('pyreadline.keysyms.make_KeyPress', 0, 0, 0), ('pyreadline.keysyms.make_KeyPress_from_keydescr', 0, 0, 0), ('pyreadline.console.ansi', 0, 0, 0), ('pyreadline.console.ansi.AnsiState', 0, 0, 0), ('time', 0, 1, 0), ('sys', 0, 1, 0)] binaries=[] datas=[]>
pyreadline.console.console: None -> <PyModule 'pyreadline.console.console' C:\Anaconda\lib\site-packages\pyreadline\console\console.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('sys', 0, 0, 0), ('os', 0, 0, 0), ('traceback', 0, 0, 0), ('re', 0, 0, 0), ('pyreadline.unicode_helper', 0, 0, 0), ('pyreadline.logger', 0, 0, 0), ('pyreadline.logger.log', 0, 0, 0), ('pyreadline.unicode_helper', 0, 0, 0), ('pyreadline.unicode_helper.ensure_unicode', 0, 0, 0), ('pyreadline.unicode_helper.ensure_str', 0, 0, 0), ('pyreadline.keysyms', 0, 0, 0), ('pyreadline.keysyms.make_KeyPress', 0, 0, 0), ('pyreadline.keysyms.KeyPress', 0, 0, 0), ('pyreadline.console.ansi', 0, 0, 0), ('pyreadline.console.ansi.AnsiState', 0, 0, 0), ('pyreadline.console.ansi.AnsiWriter', 0, 0, 0), ('ctypes.util', 0, 0, 0), ('ctypes', 0, 0, 0), ('ctypes.*', 0, 0, 0), ('_ctypes', 0, 0, 0), ('_ctypes.call_function', 0, 0, 0), ('ctypes.wintypes', 0, 0, 0), ('ctypes.wintypes.*', 0, 0, 0), ('event', 0, 0, 1), ('event.Event', 0, 0, 1), ('time', 0, 1, 0), ('sys', 0, 1, 0)] binaries=[('msvcrt.dll', 'C:\\WINDOWS\\system32\\msvcrt.dll', 'BINARY'), ('user32.dll', 'C:\\WINDOWS\\system32\\user32.dll', 'BINARY')] datas=[]>
clr: None -> None
  DEL clr
IronPythonConsole: None -> None
  DEL IronPythonConsole
System: None -> None
  DEL System
pyreadline.console.event: None -> <PyModule 'pyreadline.console.event' C:\Anaconda\lib\site-packages\pyreadline\console\event.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0)] binaries=[] datas=[]>
pyreadline.keysyms.make_keysym: None -> None
  DEL pyreadline.keysyms.make_keysym
pyreadline.keysyms.make_keyinfo: None -> None
  DEL pyreadline.keysyms.make_keyinfo
pyreadline.keysyms.make_KeyPress: None -> None
  DEL pyreadline.keysyms.make_KeyPress
pyreadline.keysyms.make_KeyPress_from_keydescr: None -> None
  DEL pyreadline.keysyms.make_KeyPress_from_keydescr
pyreadline.console.ansi: None -> <PyModule 'pyreadline.console.ansi' C:\Anaconda\lib\site-packages\pyreadline\console\ansi.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('re', 0, 0, 0), ('sys', 0, 0, 0), ('os', 0, 0, 0), ('pprint', 0, 1, 0), ('console', 0, 1, 0), ('pprint', 0, 1, 0), ('pprint', 0, 1, 0)] binaries=[] datas=[]>
console: None -> None
  DEL console
pyreadline.keysyms.make_KeyPress: None -> None
  DEL pyreadline.keysyms.make_KeyPress
pyreadline.keysyms.KeyPress: None -> None
  DEL pyreadline.keysyms.KeyPress
ctypes.util: None -> <PyModule 'ctypes.util' C:\Anaconda\lib\ctypes\util.pyc imports=[('sys', 0, 0, -1), ('os', 0, 0, -1), ('ctypes.macholib.dyld', 0, 1, -1), ('ctypes.macholib.dyld.dyld_find', 0, 1, -1), ('re', 0, 1, -1), ('tempfile', 0, 1, -1), ('errno', 0, 1, -1), ('imp', 1, 0, -1), ('struct', 1, 0, -1), ('ctypes', 1, 0, -1), ('ctypes.cdll', 1, 0, -1)] binaries=[] datas=[]>
ctypes.wintypes: None -> <PyModule 'ctypes.wintypes' C:\Anaconda\lib\ctypes\wintypes.pyc imports=[('ctypes', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('ctypes', 0, 0, -1), ('ctypes._SimpleCData', 0, 0, -1)] binaries=[] datas=[]>
ctypes.macholib: None -> <PkgModule 'ctypes.macholib' C:\Anaconda\lib\ctypes\macholib\__init__.pyc imports=[] binaries=[] datas=[]>
ctypes.macholib.dyld: None -> <PyModule 'ctypes.macholib.dyld' C:\Anaconda\lib\ctypes\macholib\dyld.pyc imports=[('os', 0, 0, -1), ('framework', 0, 0, -1), ('framework.framework_info', 0, 0, -1), ('dylib', 0, 0, -1), ('dylib.dylib_info', 0, 0, -1), ('itertools', 0, 0, -1), ('itertools.*', 0, 0, -1)] binaries=[] datas=[]>
ctypes.re: None -> None
ctypes.tempfile: None -> None
ctypes.errno: None -> None
ctypes.imp: None -> None
ctypes.cdll: None -> None
  DEL ctypes.cdll
ctypes.macholib.os: None -> None
ctypes.macholib.framework: None -> <PyModule 'ctypes.macholib.framework' C:\Anaconda\lib\ctypes\macholib\framework.pyc imports=[('re', 0, 0, -1)] binaries=[] datas=[]>
ctypes.macholib.dylib: None -> <PyModule 'ctypes.macholib.dylib' C:\Anaconda\lib\ctypes\macholib\dylib.pyc imports=[('re', 0, 0, -1)] binaries=[] datas=[]>
ctypes.macholib.itertools: None -> None
ctypes.macholib.re: None -> None
ctypes._SimpleCData: None -> None
  DEL ctypes._SimpleCData
pyreadline.release: None -> <PyModule 'pyreadline.release' C:\Anaconda\lib\site-packages\pyreadline\release.pyc imports=[('__future__', 0, 0, 0), ('__future__.print_function', 0, 0, 0), ('__future__.unicode_literals', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0)] binaries=[] datas=[]>
pyreadline.modes.editingmodes: None -> None
  DEL pyreadline.modes.editingmodes
System: None -> None
  DEL System
org: None -> None
  DEL org
org: None -> None
  DEL org
__main__: <PyScript '__main__' D:\Dropbox\Programming\Python\APPS\pyinstaller-2.0\support\_pyi_bootstrap.py imports=[('archive', 0, 0, -1), ('iu', 0, 0, -1), ('sys', 0, 0, -1), ('os', 0, 0, -1), ('site', 0, 0, -1)] binaries=[] datas=[]> -> <PyScript '__main__' D:\Dropbox\Programming\Python\APPS\pyinstaller-2.0\PyInstaller\loader\archive.py imports=[('marshal', 0, 0, -1), ('struct', 0, 0, -1), ('imp', 0, 0, -1), ('sys', 0, 0, -1), ('iu', 0, 0, -1), ('imp', 1, 0, -1), ('os', 1, 1, -1), ('zlib', 1, 1, -1), ('AES', 1, 1, -1), ('os', 1, 1, -1), ('os', 1, 1, -1)] binaries=[] datas=[]>
AES: None -> None
  DEL AES
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
_emx_link: None -> None
  DEL _emx_link
_emx_link: None -> None
  DEL _emx_link
pwd: None -> None
  DEL pwd
pwd: None -> None
  DEL pwd
org: None -> None
  DEL org
org: None -> None
  DEL org
fcntl: None -> None
  DEL fcntl
rourl2path: None -> None
  DEL rourl2path
rourl2path: None -> None
  DEL rourl2path
rourl2path: None -> None
  DEL rourl2path
_scproxy: None -> None
  DEL _scproxy
_scproxy: None -> None
  DEL _scproxy
_scproxy: None -> None
  DEL _scproxy
fcntl: None -> None
  DEL fcntl
SOCKS: None -> None
  DEL SOCKS
termios: None -> None
  DEL termios
EasyDialogs: None -> None
  DEL EasyDialogs
EasyDialogs: None -> None
  DEL EasyDialogs
pwd: None -> None
  DEL pwd
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
clr: None -> None
  DEL clr
System: None -> None
  DEL System
System: None -> None
  DEL System
startup: None -> None
  DEL startup
ctypes.windll: None -> None
  DEL ctypes.windll
startup: None -> None
  DEL startup
clr: None -> None
  DEL clr
IronPythonConsole: None -> None
  DEL IronPythonConsole
System: None -> None
  DEL System
pyreadline.keysyms.make_keysym: None -> None
  DEL pyreadline.keysyms.make_keysym
pyreadline.keysyms.make_keyinfo: None -> None
  DEL pyreadline.keysyms.make_keyinfo
pyreadline.keysyms.make_KeyPress: None -> None
  DEL pyreadline.keysyms.make_KeyPress
pyreadline.keysyms.make_KeyPress_from_keydescr: None -> None
  DEL pyreadline.keysyms.make_KeyPress_from_keydescr
console: None -> None
  DEL console
pyreadline.keysyms.make_KeyPress: None -> None
  DEL pyreadline.keysyms.make_KeyPress
pyreadline.keysyms.KeyPress: None -> None
  DEL pyreadline.keysyms.KeyPress
ctypes.cdll: None -> None
  DEL ctypes.cdll
ctypes._SimpleCData: None -> None
  DEL ctypes._SimpleCData
pyreadline.modes.editingmodes: None -> None
  DEL pyreadline.modes.editingmodes
System: None -> None
  DEL System
org: None -> None
  DEL org
org: None -> None
  DEL org
__main__: <PyScript '__main__' D:\Dropbox\Programming\Python\APPS\pyinstaller-2.0\PyInstaller\loader\archive.py imports=[('marshal', 0, 0, -1), ('struct', 0, 0, -1), ('imp', 0, 0, -1), ('sys', 0, 0, -1), ('iu', 0, 0, -1), ('imp', 1, 0, -1), ('os', 1, 1, -1), ('zlib', 1, 1, -1), ('AES', 1, 1, -1), ('os', 1, 1, -1), ('os', 1, 1, -1)] binaries=[] datas=[]> -> <PyScript '__main__' D:\Dropbox\Programming\Python\APPS\pyinstaller-2.0\PyInstaller\loader\carchive.py imports=[('archive', 0, 0, -1), ('struct', 0, 0, -1), ('sys', 0, 0, -1), ('zlib', 0, 0, -1), ('AES', 1, 1, -1), ('AES', 1, 1, -1), ('Crypt', 1, 1, -1)] binaries=[] datas=[]>
AES: None -> None
  DEL AES
AES: None -> None
  DEL AES
Crypt: None -> <PyModule 'Crypt' D:\Dropbox\Programming\Python\APPS\pyinstaller-2.0\utils\Crypt.pyc imports=[('PyInstaller', 0, 0, -1), ('imp', 0, 1, -1), ('os', 0, 1, -1), ('sys', 0, 0, -1), ('os', 1, 0, -1), ('Crypto.Util.randpool', 1, 0, -1), ('Crypto.Util.randpool.RandomPool', 1, 0, -1), ('Crypto.Hash', 1, 0, -1), ('Crypto.Hash.SHA256', 1, 0, -1), ('random', 1, 1, -1), ('pprint', 1, 0, -1), ('optparse', 1, 0, -1)] binaries=[] datas=[]>
AES: None -> None
  DEL AES
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
_emx_link: None -> None
  DEL _emx_link
_emx_link: None -> None
  DEL _emx_link
pwd: None -> None
  DEL pwd
pwd: None -> None
  DEL pwd
org: None -> None
  DEL org
org: None -> None
  DEL org
fcntl: None -> None
  DEL fcntl
rourl2path: None -> None
  DEL rourl2path
rourl2path: None -> None
  DEL rourl2path
rourl2path: None -> None
  DEL rourl2path
_scproxy: None -> None
  DEL _scproxy
_scproxy: None -> None
  DEL _scproxy
_scproxy: None -> None
  DEL _scproxy
fcntl: None -> None
  DEL fcntl
SOCKS: None -> None
  DEL SOCKS
termios: None -> None
  DEL termios
EasyDialogs: None -> None
  DEL EasyDialogs
EasyDialogs: None -> None
  DEL EasyDialogs
pwd: None -> None
  DEL pwd
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
clr: None -> None
  DEL clr
System: None -> None
  DEL System
System: None -> None
  DEL System
startup: None -> None
  DEL startup
ctypes.windll: None -> None
  DEL ctypes.windll
startup: None -> None
  DEL startup
clr: None -> None
  DEL clr
IronPythonConsole: None -> None
  DEL IronPythonConsole
System: None -> None
  DEL System
pyreadline.keysyms.make_keysym: None -> None
  DEL pyreadline.keysyms.make_keysym
pyreadline.keysyms.make_keyinfo: None -> None
  DEL pyreadline.keysyms.make_keyinfo
pyreadline.keysyms.make_KeyPress: None -> None
  DEL pyreadline.keysyms.make_KeyPress
pyreadline.keysyms.make_KeyPress_from_keydescr: None -> None
  DEL pyreadline.keysyms.make_KeyPress_from_keydescr
console: None -> None
  DEL console
pyreadline.keysyms.make_KeyPress: None -> None
  DEL pyreadline.keysyms.make_KeyPress
pyreadline.keysyms.KeyPress: None -> None
  DEL pyreadline.keysyms.KeyPress
ctypes.cdll: None -> None
  DEL ctypes.cdll
ctypes._SimpleCData: None -> None
  DEL ctypes._SimpleCData
pyreadline.modes.editingmodes: None -> None
  DEL pyreadline.modes.editingmodes
System: None -> None
  DEL System
org: None -> None
  DEL org
org: None -> None
  DEL org
PyInstaller: None -> None
  DEL PyInstaller
Crypto: None -> <PkgModule 'Crypto' C:\Anaconda\lib\site-packages\Crypto\__init__.pyc imports=[] binaries=[] datas=[]>
Crypto.Util: None -> <PkgModule 'Crypto.Util' C:\Anaconda\lib\site-packages\Crypto\Util\__init__.pyc imports=[] binaries=[] datas=[]>
Crypto.Util.randpool: None -> <PyModule 'Crypto.Util.randpool' C:\Anaconda\lib\site-packages\Crypto\Util\randpool.pyc imports=[('Crypto.pct_warnings', 0, 0, -1), ('Crypto.pct_warnings.RandomPool_DeprecationWarning', 0, 0, -1), ('Crypto.Random', 0, 0, -1), ('warnings', 0, 0, -1)] binaries=[] datas=[]>
Crypto.Hash: None -> <PkgModule 'Crypto.Hash' C:\Anaconda\lib\site-packages\Crypto\Hash\__init__.pyc imports=[] binaries=[] datas=[]>
Crypto.Hash.SHA256: None -> <PyModule 'Crypto.Hash.SHA256' C:\Anaconda\lib\site-packages\Crypto\Hash\SHA256.pyc imports=[('Crypto.Util.py3compat', 0, 0, -1), ('Crypto.Util.py3compat.*', 0, 0, -1), ('Crypto.Hash.hashalgo', 0, 0, -1), ('Crypto.Hash.hashalgo.HashAlgo', 0, 0, -1), ('hashlib', 0, 0, -1), ('Crypto.Hash', 0, 1, -1), ('Crypto.Hash._SHA256', 0, 1, -1)] binaries=[] datas=[]>
Crypto.Util.Crypto: None -> None
Crypto.pct_warnings: None -> <PyModule 'Crypto.pct_warnings' C:\Anaconda\lib\site-packages\Crypto\pct_warnings.pyc imports=[('warnings', 0, 0, -1)] binaries=[] datas=[]>
Crypto.Random: None -> <PkgModule 'Crypto.Random' C:\Anaconda\lib\site-packages\Crypto\Random\__init__.pyc imports=[('Crypto.Random', 0, 0, -1), ('Crypto.Random.OSRNG', 0, 0, -1), ('Crypto.Random', 0, 0, -1), ('Crypto.Random._UserFriendlyRNG', 0, 0, -1)] binaries=[] datas=[]>
Crypto.Util.warnings: None -> None
Crypto.warnings: None -> None
Crypto.Random.Crypto: None -> None
Crypto.Random.OSRNG: None -> <PkgModule 'Crypto.Random.OSRNG' C:\Anaconda\lib\site-packages\Crypto\Random\OSRNG\__init__.pyc imports=[('os', 0, 0, -1), ('Crypto.Random.OSRNG.posix', 0, 1, -1), ('Crypto.Random.OSRNG.posix.new', 0, 1, -1), ('Crypto.Random.OSRNG.nt', 0, 1, -1), ('Crypto.Random.OSRNG.nt.new', 0, 1, -1), ('Crypto.Random.OSRNG.fallback', 0, 1, -1), ('Crypto.Random.OSRNG.fallback.new', 0, 1, -1)] binaries=[] datas=[]>
Crypto.Random._UserFriendlyRNG: None -> <PyModule 'Crypto.Random._UserFriendlyRNG' C:\Anaconda\lib\site-packages\Crypto\Random\_UserFriendlyRNG.pyc imports=[('sys', 0, 0, -1), ('Crypto.Util.py21compat', 0, 1, -1), ('Crypto.Util.py21compat.*', 0, 1, -1), ('os', 0, 0, -1), ('threading', 0, 0, -1), ('struct', 0, 0, -1), ('time', 0, 0, -1), ('math', 0, 0, -1), ('math.floor', 0, 0, -1), ('Crypto.Random', 0, 0, -1), ('Crypto.Random.OSRNG', 0, 0, -1), ('Crypto.Random.Fortuna', 0, 0, -1), ('Crypto.Random.Fortuna.FortunaAccumulator', 0, 0, -1)] binaries=[] datas=[]>
Crypto.Random.OSRNG.os: None -> None
Crypto.Random.OSRNG.Crypto: None -> None
Crypto.Random.OSRNG.posix: None -> <PyModule 'Crypto.Random.OSRNG.posix' C:\Anaconda\lib\site-packages\Crypto\Random\OSRNG\posix.pyc imports=[('errno', 0, 0, -1), ('os', 0, 0, -1), ('stat', 0, 0, -1), ('rng_base', 0, 0, -1), ('rng_base.BaseRNG', 0, 0, -1), ('Crypto.Util.py3compat', 0, 0, -1), ('Crypto.Util.py3compat.b', 0, 0, -1)] binaries=[] datas=[]>
Crypto.Random.OSRNG.nt: None -> <PyModule 'Crypto.Random.OSRNG.nt' C:\Anaconda\lib\site-packages\Crypto\Random\OSRNG\nt.pyc imports=[('winrandom', 0, 0, -1), ('rng_base', 0, 0, -1), ('rng_base.BaseRNG', 0, 0, -1)] binaries=[] datas=[]>
Crypto.Random.OSRNG.fallback: None -> <PyModule 'Crypto.Random.OSRNG.fallback' C:\Anaconda\lib\site-packages\Crypto\Random\OSRNG\fallback.pyc imports=[('os', 0, 0, -1), ('rng_base', 0, 0, -1), ('rng_base.BaseRNG', 0, 0, -1)] binaries=[] datas=[]>
Crypto.Random.OSRNG.errno: None -> None
Crypto.Random.OSRNG.stat: None -> None
Crypto.Random.OSRNG.rng_base: None -> <PyModule 'Crypto.Random.OSRNG.rng_base' C:\Anaconda\lib\site-packages\Crypto\Random\OSRNG\rng_base.pyc imports=[('sys', 0, 0, -1), ('Crypto.Util.py21compat', 0, 1, -1), ('Crypto.Util.py21compat.*', 0, 1, -1)] binaries=[] datas=[]>
Crypto.Util.py3compat: None -> <PyModule 'Crypto.Util.py3compat' C:\Anaconda\lib\site-packages\Crypto\Util\py3compat.pyc imports=[('sys', 0, 0, -1)] binaries=[] datas=[]>
Crypto.Random.OSRNG.sys: None -> None
Crypto.Util.py21compat: None -> <PyModule 'Crypto.Util.py21compat' C:\Anaconda\lib\site-packages\Crypto\Util\py21compat.pyc imports=[('sys', 0, 0, -1), ('__builtin__', 0, 0, -1)] binaries=[] datas=[]>
Crypto.Util.sys: None -> None
Crypto.Util.__builtin__: None -> None
Crypto.Random.OSRNG.winrandom: None -> <ExtensionModule 'Crypto.Random.OSRNG.winrandom' C:\Anaconda\lib\site-packages\Crypto\Random\OSRNG\winrandom.pyd imports=[] binaries=[] datas=[]>
Crypto.Random.sys: None -> None
Crypto.Random.os: None -> None
Crypto.Random.threading: None -> None
Crypto.Random.struct: None -> None
Crypto.Random.time: None -> None
Crypto.Random.math: None -> None
Crypto.Random.Fortuna: None -> <PkgModule 'Crypto.Random.Fortuna' C:\Anaconda\lib\site-packages\Crypto\Random\Fortuna\__init__.pyc imports=[] binaries=[] datas=[]>
Crypto.Random.Fortuna.FortunaAccumulator: None -> <PyModule 'Crypto.Random.Fortuna.FortunaAccumulator' C:\Anaconda\lib\site-packages\Crypto\Random\Fortuna\FortunaAccumulator.pyc imports=[('sys', 0, 0, -1), ('Crypto.Util.py21compat', 0, 1, -1), ('Crypto.Util.py21compat.*', 0, 1, -1), ('Crypto.Util.py3compat', 0, 0, -1), ('Crypto.Util.py3compat.*', 0, 0, -1), ('binascii', 0, 0, -1), ('binascii.b2a_hex', 0, 0, -1), ('time', 0, 0, -1), ('warnings', 0, 0, -1), ('Crypto.pct_warnings', 0, 0, -1), ('Crypto.pct_warnings.ClockRewindWarning', 0, 0, -1), ('SHAd256', 0, 0, -1), ('FortunaGenerator', 0, 0, -1)] binaries=[] datas=[]>
Crypto.Random.Fortuna.sys: None -> None
Crypto.Random.Fortuna.Crypto: None -> None
Crypto.Random.Fortuna.binascii: None -> None
Crypto.Random.Fortuna.time: None -> None
Crypto.Random.Fortuna.warnings: None -> None
Crypto.Random.Fortuna.SHAd256: None -> <PyModule 'Crypto.Random.Fortuna.SHAd256' C:\Anaconda\lib\site-packages\Crypto\Random\Fortuna\SHAd256.pyc imports=[('sys', 0, 0, -1), ('Crypto.Util.py21compat', 0, 1, -1), ('Crypto.Util.py21compat.*', 0, 1, -1), ('Crypto.Util.py3compat', 0, 0, -1), ('Crypto.Util.py3compat.*', 0, 0, -1), ('binascii', 0, 0, -1), ('binascii.b2a_hex', 0, 0, -1), ('Crypto.Hash', 0, 0, -1), ('Crypto.Hash.SHA256', 0, 0, -1)] binaries=[] datas=[]>
Crypto.Random.Fortuna.FortunaGenerator: None -> <PyModule 'Crypto.Random.Fortuna.FortunaGenerator' C:\Anaconda\lib\site-packages\Crypto\Random\Fortuna\FortunaGenerator.pyc imports=[('sys', 0, 0, -1), ('Crypto.Util.py21compat', 0, 1, -1), ('Crypto.Util.py21compat.*', 0, 1, -1), ('Crypto.Util.py3compat', 0, 0, -1), ('Crypto.Util.py3compat.*', 0, 0, -1), ('struct', 0, 0, -1), ('Crypto.Util.number', 0, 0, -1), ('Crypto.Util.number.ceil_shift', 0, 0, -1), ('Crypto.Util.number.exact_log2', 0, 0, -1), ('Crypto.Util.number.exact_div', 0, 0, -1), ('Crypto.Util', 0, 0, -1), ('Crypto.Util.Counter', 0, 0, -1), ('Crypto.Cipher', 0, 0, -1), ('Crypto.Cipher.AES', 0, 0, -1), ('SHAd256', 0, 0, -1)] binaries=[] datas=[]>
Crypto.Hash.Crypto: None -> None
Crypto.Hash.hashalgo: None -> <PyModule 'Crypto.Hash.hashalgo' C:\Anaconda\lib\site-packages\Crypto\Hash\hashalgo.pyc imports=[('binascii', 0, 0, -1), ('binascii.hexlify', 0, 0, -1)] binaries=[] datas=[]>
Crypto.Hash.hashlib: None -> None
Crypto.Hash._SHA256: None -> <ExtensionModule 'Crypto.Hash._SHA256' C:\Anaconda\lib\site-packages\Crypto\Hash\_SHA256.pyd imports=[] binaries=[] datas=[]>
Crypto.Hash.binascii: None -> None
Crypto.Random.Fortuna.struct: None -> None
Crypto.Util.number: None -> <PyModule 'Crypto.Util.number' C:\Anaconda\lib\site-packages\Crypto\Util\number.pyc imports=[('Crypto.pct_warnings', 0, 0, -1), ('Crypto.pct_warnings.GetRandomNumber_DeprecationWarning', 0, 0, -1), ('Crypto.pct_warnings.PowmInsecureWarning', 0, 0, -1), ('warnings', 0, 0, -1), ('warnings.warn', 0, 0, -1), ('math', 0, 0, -1), ('sys', 0, 0, -1), ('Crypto.Util.py3compat', 0, 0, -1), ('Crypto.Util.py3compat.*', 0, 0, -1), ('Crypto.PublicKey', 0, 0, -1), ('Crypto.PublicKey._fastmath', 0, 0, -1), ('_number_new', 0, 0, -1), ('_number_new.*', 0, 0, -1), ('struct', 0, 0, -1), ('warnings', 0, 0, -1), ('Crypto', 1, 0, -1), ('Crypto.Random', 1, 0, -1), ('Crypto.Random.random', 1, 0, -1), ('Crypto.Random.random.StrongRandom', 1, 0, -1)] binaries=[] datas=[]>
Crypto.Util.Counter: None -> <PyModule 'Crypto.Util.Counter' C:\Anaconda\lib\site-packages\Crypto\Util\Counter.pyc imports=[('sys', 0, 0, -1), ('Crypto.Util.py21compat', 0, 1, -1), ('Crypto.Util.py21compat.*', 0, 1, -1), ('Crypto.Util.py3compat', 0, 0, -1), ('Crypto.Util.py3compat.*', 0, 0, -1), ('Crypto.Util', 0, 0, -1), ('Crypto.Util._counter', 0, 0, -1), ('struct', 0, 0, -1)] binaries=[] datas=[]>
Crypto.Cipher: None -> <PkgModule 'Crypto.Cipher' C:\Anaconda\lib\site-packages\Crypto\Cipher\__init__.pyc imports=[] binaries=[] datas=[]>
Crypto.Cipher.AES: None -> <PyModule 'Crypto.Cipher.AES' C:\Anaconda\lib\site-packages\Crypto\Cipher\AES.pyc imports=[('Crypto.Cipher', 0, 0, -1), ('Crypto.Cipher.blockalgo', 0, 0, -1), ('Crypto.Cipher', 0, 0, -1), ('Crypto.Cipher._AES', 0, 0, -1)] binaries=[] datas=[]>
Crypto.Util.math: None -> None
Crypto.PublicKey: None -> <PkgModule 'Crypto.PublicKey' C:\Anaconda\lib\site-packages\Crypto\PublicKey\__init__.pyc imports=[] binaries=[] datas=[]>
Crypto.PublicKey._fastmath: None -> None
  DEL Crypto.PublicKey._fastmath
Crypto.Util._number_new: None -> <PyModule 'Crypto.Util._number_new' C:\Anaconda\lib\site-packages\Crypto\Util\_number_new.pyc imports=[('sys', 0, 0, -1), ('Crypto.Util.py21compat', 0, 1, -1), ('Crypto.Util.py21compat.*', 0, 1, -1)] binaries=[] datas=[]>
Crypto.Util.struct: None -> None
Crypto.Random.random: None -> <PyModule 'Crypto.Random.random' C:\Anaconda\lib\site-packages\Crypto\Random\random.pyc imports=[('Crypto', 0, 0, -1), ('Crypto.Random', 0, 0, -1), ('sys', 0, 0, -1), ('Crypto.Util.py21compat', 0, 1, -1), ('Crypto.Util.py21compat.*', 0, 1, -1), ('Crypto.Util.number', 0, 0, -1), ('Crypto.Util.number.ceil_div', 0, 0, -1), ('Crypto.Util.number.bytes_to_long', 0, 0, -1), ('Crypto.Util.number.long_to_bytes', 0, 0, -1), ('Crypto.Util.number.size', 0, 0, -1)] binaries=[] datas=[]>
Crypto.Util._counter: None -> <ExtensionModule 'Crypto.Util._counter' C:\Anaconda\lib\site-packages\Crypto\Util\_counter.pyd imports=[] binaries=[] datas=[]>
Crypto.Cipher.Crypto: None -> None
Crypto.Cipher.blockalgo: None -> <PyModule 'Crypto.Cipher.blockalgo' C:\Anaconda\lib\site-packages\Crypto\Cipher\blockalgo.pyc imports=[('sys', 0, 0, -1), ('Crypto.Util.py21compat', 0, 1, -1), ('Crypto.Util.py21compat.*', 0, 1, -1), ('Crypto.Util.py3compat', 0, 0, -1), ('Crypto.Util.py3compat.*', 0, 0, -1)] binaries=[] datas=[]>
Crypto.Cipher._AES: None -> <ExtensionModule 'Crypto.Cipher._AES' C:\Anaconda\lib\site-packages\Crypto\Cipher\_AES.pyd imports=[] binaries=[] datas=[]>
Crypto.Cipher.sys: None -> None
__main__: <PyScript '__main__' D:\Dropbox\Programming\Python\APPS\pyinstaller-2.0\PyInstaller\loader\carchive.py imports=[('archive', 0, 0, -1), ('struct', 0, 0, -1), ('sys', 0, 0, -1), ('zlib', 0, 0, -1), ('AES', 1, 1, -1), ('AES', 1, 1, -1), ('Crypt', 1, 1, -1)] binaries=[] datas=[]> -> <PyScript '__main__' D:\Dropbox\Programming\Python\APPS\pyinstaller-2.0\PyInstaller\loader\iu.py imports=[('sys', 0, 0, -1), ('imp', 0, 0, -1), ('marshal', 0, 0, -1), ('zipimport', 0, 0, -1), ('__builtin__', 1, 0, -1), ('posix', 1, 1, -1), ('posix.stat', 1, 1, -1), ('posix.getcwd', 1, 1, -1), ('posix.environ', 1, 1, -1), ('posix.listdir', 1, 1, -1), ('nt', 1, 1, -1), ('nt.stat', 1, 1, -1), ('nt.getcwd', 1, 1, -1), ('nt.environ', 1, 1, -1), ('nt.listdir', 1, 1, -1)] binaries=[] datas=[]>
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
__main__: <PyScript '__main__' D:\Dropbox\Programming\Python\APPS\pyinstaller-2.0\PyInstaller\loader\iu.py imports=[('sys', 0, 0, -1), ('imp', 0, 0, -1), ('marshal', 0, 0, -1), ('zipimport', 0, 0, -1), ('__builtin__', 1, 0, -1), ('posix', 1, 1, -1), ('posix.stat', 1, 1, -1), ('posix.getcwd', 1, 1, -1), ('posix.environ', 1, 1, -1), ('posix.listdir', 1, 1, -1), ('nt', 1, 1, -1), ('nt.stat', 1, 1, -1), ('nt.getcwd', 1, 1, -1), ('nt.environ', 1, 1, -1), ('nt.listdir', 1, 1, -1)] binaries=[] datas=[]> -> <PyScript '__main__' D:\Dropbox\Programming\Python\PY_APPS_COLLABORATIVE\LabCuro\LabCuro_v2.0\LabCuro_lab_v2.0\src\LabCuro_lab_v2.0.py imports=[('os', 0, 0, -1), ('time', 0, 0, -1), ('shutil', 0, 0, -1), ('re', 0, 0, -1), ('json', 0, 0, -1), ('csv', 0, 0, -1), ('datetime', 0, 0, -1), ('useful_fx', 0, 0, -1), ('install_labcuro', 0, 0, -1), ('map_network_drive', 0, 0, -1), ('multi_inputbox', 0, 0, -1), ('pdf_merger', 0, 0, -1), ('admin_settings', 0, 0, -1), ('database_handler', 0, 0, -1), ('easygui_labcuro', 0, 0, -1), ('easygui_labcuro.msgbox', 0, 0, -1), ('easygui_labcuro.buttonbox', 0, 0, -1), ('easygui_labcuro.ccbox', 0, 0, -1), ('easygui_labcuro.choicebox', 0, 0, -1)] binaries=[] datas=[]>
shutil: None -> <PyModule 'shutil' C:\Anaconda\lib\shutil.pyc imports=[('os', 0, 0, -1), ('sys', 0, 0, -1), ('stat', 0, 0, -1), ('os.path', 0, 0, -1), ('os.path.abspath', 0, 0, -1), ('fnmatch', 0, 0, -1), ('collections', 0, 0, -1), ('errno', 0, 0, -1), ('pwd', 0, 0, -1), ('pwd.getpwnam', 0, 0, -1), ('grp', 0, 0, -1), ('grp.getgrnam', 0, 0, -1), ('tarfile', 1, 0, -1), ('distutils.errors', 1, 0, -1), ('distutils.errors.DistutilsExecError', 1, 0, -1), ('distutils.spawn', 1, 0, -1), ('distutils.spawn.spawn', 1, 0, -1), ('zipfile', 1, 0, -1)] binaries=[] datas=[]>
json: None -> <PkgModule 'json' C:\Anaconda\lib\json\__init__.pyc imports=[('decoder', 0, 0, 1), ('decoder.JSONDecoder', 0, 0, 1), ('encoder', 0, 0, 1), ('encoder.JSONEncoder', 0, 0, 1)] binaries=[] datas=[]>
csv: None -> <PyModule 'csv' C:\Anaconda\lib\csv.pyc imports=[('re', 0, 0, -1), ('functools', 0, 0, -1), ('functools.reduce', 0, 0, -1), ('_csv', 0, 0, -1), ('_csv.Error', 0, 0, -1), ('_csv.__version__', 0, 0, -1), ('_csv.writer', 0, 0, -1), ('_csv.reader', 0, 0, -1), ('_csv.register_dialect', 0, 0, -1), ('_csv.unregister_dialect', 0, 0, -1), ('_csv.get_dialect', 0, 0, -1), ('_csv.list_dialects', 0, 0, -1), ('_csv.field_size_limit', 0, 0, -1), ('_csv.QUOTE_MINIMAL', 0, 0, -1), ('_csv.QUOTE_ALL', 0, 0, -1), ('_csv.QUOTE_NONNUMERIC', 0, 0, -1), ('_csv.QUOTE_NONE', 0, 0, -1), ('_csv.__doc__', 0, 0, -1), ('_csv', 0, 0, -1), ('_csv.Dialect', 0, 0, -1), ('cStringIO', 0, 0, -1), ('cStringIO.StringIO', 0, 0, -1), ('StringIO', 0, 1, -1), ('StringIO.StringIO', 0, 1, -1)] binaries=[] datas=[]>
useful_fx: None -> <PyModule 'useful_fx' D:\Dropbox\Programming\Python\PY_APPS_COLLABORATIVE\LabCuro\LabCuro_v2.0\LabCuro_lab_v2.0\src\useful_fx.pyc imports=[('os', 0, 0, -1), ('sys', 0, 0, -1), ('subprocess', 0, 0, -1), ('hashlib', 0, 0, -1)] binaries=[] datas=[]>
install_labcuro: None -> <PyModule 'install_labcuro' D:\Dropbox\Programming\Python\PY_APPS_COLLABORATIVE\LabCuro\LabCuro_v2.0\LabCuro_lab_v2.0\src\install_labcuro.pyc imports=[('os', 0, 0, -1), ('sys', 0, 0, -1), ('datetime', 0, 0, -1), ('json', 0, 0, -1), ('map_network_drive', 0, 0, -1), ('multi_inputbox', 0, 0, -1), ('database_handler', 0, 0, -1), ('easygui_labcuro', 0, 0, -1), ('easygui_labcuro.diropenbox', 0, 0, -1), ('easygui_labcuro.buttonbox', 0, 0, -1), ('easygui_labcuro.choicebox', 0, 0, -1), ('easygui_labcuro.enterbox', 0, 0, -1), ('easygui_labcuro.multchoicebox', 0, 0, -1), ('easygui_labcuro.msgbox', 0, 0, -1)] binaries=[] datas=[]>
map_network_drive: None -> <PyModule 'map_network_drive' D:\Dropbox\Programming\Python\PY_APPS_COLLABORATIVE\LabCuro\LabCuro_v2.0\LabCuro_lab_v2.0\src\map_network_drive.pyc imports=[('win32api', 0, 0, -1), ('win32net', 0, 0, -1), ('os', 0, 0, -1), ('string', 0, 0, -1), ('subprocess', 0, 0, -1)] binaries=[] datas=[]>
multi_inputbox: None -> <PyModule 'multi_inputbox' D:\Dropbox\Programming\Python\PY_APPS_COLLABORATIVE\LabCuro\LabCuro_v2.0\LabCuro_lab_v2.0\src\multi_inputbox.pyc imports=[('re', 0, 0, -1), ('easygui_labcuro', 0, 0, -1), ('easygui_labcuro.buttonbox', 0, 0, -1), ('easygui_labcuro.multenterbox', 0, 0, -1), ('easygui_labcuro.multpasswordbox', 0, 0, -1)] binaries=[] datas=[]>
pdf_merger: None -> <PyModule 'pdf_merger' D:\Dropbox\Programming\Python\PY_APPS_COLLABORATIVE\LabCuro\LabCuro_v2.0\LabCuro_lab_v2.0\src\pdf_merger.pyc imports=[('PyPDF2', 0, 0, -1), ('PyPDF2.PdfFileMerger', 0, 0, -1), ('PyPDF2.PdfFileReader', 0, 0, -1), ('os', 0, 0, -1), ('re', 0, 0, -1)] binaries=[] datas=[]>
admin_settings: None -> <PyModule 'admin_settings' D:\Dropbox\Programming\Python\PY_APPS_COLLABORATIVE\LabCuro\LabCuro_v2.0\LabCuro_lab_v2.0\src\admin_settings.pyc imports=[('json', 0, 0, -1), ('os', 0, 0, -1)] binaries=[] datas=[]>
database_handler: None -> <PyModule 'database_handler' D:\Dropbox\Programming\Python\PY_APPS_COLLABORATIVE\LabCuro\LabCuro_v2.0\LabCuro_lab_v2.0\src\database_handler.pyc imports=[('sqlite3', 0, 0, -1)] binaries=[] datas=[]>
easygui_labcuro: None -> <PyModule 'easygui_labcuro' D:\Dropbox\Programming\Python\PY_APPS_COLLABORATIVE\LabCuro\LabCuro_v2.0\LabCuro_lab_v2.0\src\easygui_labcuro.pyc imports=[('sys', 0, 0, -1), ('os', 0, 0, -1), ('re', 0, 0, -1), ('datetime', 0, 0, -1), ('string', 0, 0, -1), ('pickle', 0, 0, -1), ('traceback', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImageTk', 0, 0, -1), ('tkinter', 0, 1, -1), ('tkinter.*', 0, 1, -1), ('tkinter.filedialog', 0, 1, -1), ('io', 0, 1, -1), ('io.StringIO', 0, 1, -1), ('Tkinter', 0, 1, -1), ('Tkinter.*', 0, 1, -1), ('tkFileDialog', 0, 1, -1), ('StringIO', 0, 1, -1), ('StringIO.StringIO', 0, 1, -1)] binaries=[] datas=[]>
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
_emx_link: None -> None
  DEL _emx_link
_emx_link: None -> None
  DEL _emx_link
pwd: None -> None
  DEL pwd
pwd: None -> None
  DEL pwd
org: None -> None
  DEL org
org: None -> None
  DEL org
fcntl: None -> None
  DEL fcntl
rourl2path: None -> None
  DEL rourl2path
rourl2path: None -> None
  DEL rourl2path
rourl2path: None -> None
  DEL rourl2path
_scproxy: None -> None
  DEL _scproxy
_scproxy: None -> None
  DEL _scproxy
_scproxy: None -> None
  DEL _scproxy
fcntl: None -> None
  DEL fcntl
SOCKS: None -> None
  DEL SOCKS
termios: None -> None
  DEL termios
EasyDialogs: None -> None
  DEL EasyDialogs
EasyDialogs: None -> None
  DEL EasyDialogs
pwd: None -> None
  DEL pwd
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
clr: None -> None
  DEL clr
System: None -> None
  DEL System
System: None -> None
  DEL System
startup: None -> None
  DEL startup
ctypes.windll: None -> None
  DEL ctypes.windll
startup: None -> None
  DEL startup
clr: None -> None
  DEL clr
IronPythonConsole: None -> None
  DEL IronPythonConsole
System: None -> None
  DEL System
pyreadline.keysyms.make_keysym: None -> None
  DEL pyreadline.keysyms.make_keysym
pyreadline.keysyms.make_keyinfo: None -> None
  DEL pyreadline.keysyms.make_keyinfo
pyreadline.keysyms.make_KeyPress: None -> None
  DEL pyreadline.keysyms.make_KeyPress
pyreadline.keysyms.make_KeyPress_from_keydescr: None -> None
  DEL pyreadline.keysyms.make_KeyPress_from_keydescr
console: None -> None
  DEL console
pyreadline.keysyms.make_KeyPress: None -> None
  DEL pyreadline.keysyms.make_KeyPress
pyreadline.keysyms.KeyPress: None -> None
  DEL pyreadline.keysyms.KeyPress
ctypes.cdll: None -> None
  DEL ctypes.cdll
ctypes._SimpleCData: None -> None
  DEL ctypes._SimpleCData
pyreadline.modes.editingmodes: None -> None
  DEL pyreadline.modes.editingmodes
System: None -> None
  DEL System
org: None -> None
  DEL org
org: None -> None
  DEL org
pwd: None -> None
  DEL pwd
pwd: None -> None
  DEL pwd
grp: None -> None
  DEL grp
grp: None -> None
  DEL grp
tarfile: None -> <PyModule 'tarfile' C:\Anaconda\lib\tarfile.pyc imports=[('sys', 0, 0, -1), ('os', 0, 0, -1), ('shutil', 0, 0, -1), ('stat', 0, 0, -1), ('errno', 0, 0, -1), ('time', 0, 0, -1), ('struct', 0, 0, -1), ('copy', 0, 0, -1), ('re', 0, 0, -1), ('operator', 0, 0, -1), ('grp', 0, 0, -1), ('pwd', 0, 0, -1), ('zlib', 1, 1, -1), ('bz2', 1, 1, -1), ('bz2', 1, 0, -1), ('warnings', 1, 0, -1), ('gzip', 1, 0, -1), ('bz2', 1, 0, -1), ('warnings', 1, 1, -1), ('warnings', 1, 0, -1), ('warnings.warnpy3k', 1, 0, -1), ('cStringIO', 1, 0, -1), ('cStringIO.StringIO', 1, 0, -1), ('StringIO', 1, 1, -1), ('StringIO.StringIO', 1, 1, -1), ('calendar', 1, 0, -1)] binaries=[] datas=[]>
distutils: None -> <PkgModule 'distutils' C:\Anaconda\lib\distutils\__init__.pyc imports=[] binaries=[] datas=[('include\\pyconfig.h', 'C:\\Anaconda\\include\\pyconfig.h', 'DATA')]>
distutils.errors: None -> <PyModule 'distutils.errors' C:\Anaconda\lib\distutils\errors.pyc imports=[] binaries=[] datas=[]>
distutils.spawn: None -> <PyModule 'distutils.spawn' C:\Anaconda\lib\distutils\spawn.pyc imports=[('sys', 0, 0, -1), ('os', 0, 0, -1), ('distutils.errors', 0, 0, -1), ('distutils.errors.DistutilsPlatformError', 0, 0, -1), ('distutils.errors.DistutilsExecError', 0, 0, -1), ('distutils', 0, 0, -1), ('distutils.log', 0, 0, -1), ('distutils', 0, 1, -1), ('distutils.sysconfig', 0, 1, -1), ('errno', 1, 1, -1)] binaries=[] datas=[]>
zipfile: None -> <PyModule 'zipfile' C:\Anaconda\lib\zipfile.pyc imports=[('struct', 0, 0, -1), ('os', 0, 0, -1), ('time', 0, 0, -1), ('sys', 0, 0, -1), ('shutil', 0, 0, -1), ('binascii', 0, 0, -1), ('cStringIO', 0, 0, -1), ('stat', 0, 0, -1), ('io', 0, 0, -1), ('re', 0, 0, -1), ('string', 0, 0, -1), ('zlib', 0, 0, -1), ('py_compile', 1, 1, -1), ('textwrap', 1, 0, -1)] binaries=[] datas=[]>
grp: None -> None
  DEL grp
pwd: None -> None
  DEL pwd
gzip: None -> <PyModule 'gzip' C:\Anaconda\lib\gzip.pyc imports=[('struct', 0, 0, -1), ('sys', 0, 0, -1), ('time', 0, 0, -1), ('os', 0, 0, -1), ('zlib', 0, 0, -1), ('io', 0, 0, -1), ('__builtin__', 0, 0, -1), ('warnings', 1, 0, -1), ('errno', 1, 1, -1), ('errno', 1, 1, -1)] binaries=[] datas=[]>
distutils.sys: None -> None
distutils.os: None -> None
distutils.distutils: None -> None
distutils.log: None -> <PyModule 'distutils.log' C:\Anaconda\lib\distutils\log.pyc imports=[('sys', 0, 0, -1)] binaries=[] datas=[]>
distutils.sysconfig: None -> <PyModule 'distutils.sysconfig' C:\Anaconda\lib\distutils\sysconfig.pyc imports=[('os', 0, 0, -1), ('re', 0, 0, -1), ('string', 0, 0, -1), ('sys', 0, 0, -1), ('distutils.errors', 0, 0, -1), ('distutils.errors.DistutilsPlatformError', 0, 0, -1), ('_osx_support', 1, 1, -1), ('distutils.text_file', 1, 0, -1), ('distutils.text_file.TextFile', 1, 0, -1), ('_sysconfigdata', 1, 0, -1), ('_sysconfigdata.build_time_vars', 1, 0, -1), ('_osx_support', 1, 1, -1)] binaries=[] datas=[]>
distutils.errno: None -> None
distutils.re: None -> None
distutils.string: None -> None
distutils._osx_support: None -> None
_osx_support: None -> <PyModule '_osx_support' C:\Anaconda\lib\_osx_support.pyc imports=[('os', 0, 0, -1), ('re', 0, 0, -1), ('sys', 0, 0, -1), ('contextlib', 1, 0, -1), ('tempfile', 1, 0, -1), ('distutils', 1, 1, -1), ('distutils.log', 1, 1, -1)] binaries=[] datas=[]>
distutils.text_file: None -> <PyModule 'distutils.text_file' C:\Anaconda\lib\distutils\text_file.pyc imports=[('sys', 0, 0, -1)] binaries=[] datas=[]>
distutils._sysconfigdata: None -> None
_sysconfigdata: None -> None
  DEL _sysconfigdata
_sysconfigdata: None -> None
  DEL _sysconfigdata
contextlib: None -> <PyModule 'contextlib' C:\Anaconda\lib\contextlib.pyc imports=[('sys', 0, 0, -1), ('functools', 0, 0, -1), ('functools.wraps', 0, 0, -1), ('warnings', 0, 0, -1), ('warnings.warn', 0, 0, -1)] binaries=[] datas=[]>
py_compile: None -> <PyModule 'py_compile' C:\Anaconda\lib\py_compile.pyc imports=[('__builtin__', 0, 0, -1), ('imp', 0, 0, -1), ('marshal', 0, 0, -1), ('os', 0, 0, -1), ('sys', 0, 0, -1), ('traceback', 0, 0, -1)] binaries=[] datas=[]>
json.decoder: None -> <PyModule 'json.decoder' C:\Anaconda\lib\json\decoder.pyc imports=[('re', 0, 0, -1), ('sys', 0, 0, -1), ('struct', 0, 0, -1), ('json', 0, 0, -1), ('json.scanner', 0, 0, -1), ('_json', 0, 0, -1), ('_json.scanstring', 0, 0, -1)] binaries=[] datas=[]>
json.encoder: None -> <PyModule 'json.encoder' C:\Anaconda\lib\json\encoder.pyc imports=[('re', 0, 0, -1), ('_json', 0, 0, -1), ('_json.encode_basestring_ascii', 0, 0, -1), ('_json', 0, 0, -1), ('_json.make_encoder', 0, 0, -1)] binaries=[] datas=[]>
json.re: None -> None
json.sys: None -> None
json.struct: None -> None
json.json: None -> None
json.scanner: None -> <PyModule 'json.scanner' C:\Anaconda\lib\json\scanner.pyc imports=[('re', 0, 0, -1), ('_json', 0, 0, -1), ('_json.make_scanner', 0, 0, -1)] binaries=[] datas=[]>
json._json: None -> None
_json: None -> <BuiltinModule '_json' None imports=[] binaries=[] datas=[]>
_csv: None -> <BuiltinModule '_csv' None imports=[] binaries=[] datas=[]>
win32net: None -> <ExtensionModule 'win32net' C:\Anaconda\lib\site-packages\win32\win32net.pyd imports=[] binaries=[] datas=[]>
PIL: None -> <PkgModule 'PIL' C:\Anaconda\lib\site-packages\PIL\__init__.pyc imports=[] binaries=[] datas=[]>
PIL.Image: None -> <PyModule 'PIL.Image' C:\Anaconda\lib\site-packages\PIL\Image.pyc imports=[('warnings', 0, 0, -1), ('_imaging', 0, 0, -1), ('ImageMode', 0, 0, -1), ('ImagePalette', 0, 0, -1), ('os', 0, 0, -1), ('string', 0, 0, -1), ('sys', 0, 0, -1), ('types', 0, 0, -1), ('types.IntType', 0, 0, -1), ('types.StringType', 0, 0, -1), ('types.TupleType', 0, 0, -1), ('operator', 0, 0, -1), ('operator.isNumberType', 0, 0, -1), ('operator.isSequenceType', 0, 0, -1), ('struct', 0, 1, -1), ('BmpImagePlugin', 1, 0, -1), ('GifImagePlugin', 1, 0, -1), ('JpegImagePlugin', 1, 0, -1), ('PpmImagePlugin', 1, 0, -1), ('PngImagePlugin', 1, 0, -1), ('tempfile', 1, 0, -1), ('ImageChops', 1, 0, -1), ('ImageColor', 1, 1, -1), ('math', 1, 1, -1), ('__builtin__', 1, 1, -1), ('ImageColor', 1, 1, -1), ('__builtin__', 1, 1, -1), ('ImageShow', 1, 0, -1), ('PIL.MicImagePlugin', 0, 0, -1), ('PIL.PngImagePlugin', 0, 0, -1), ('PIL.BmpImagePlugin', 0, 0, -1), ('PIL.SgiImagePlugin', 0, 0, -1), ('PIL.XpmImagePlugin', 0, 0, -1), ('PIL.FitsStubImagePlugin', 0, 0, -1), ('PIL.IcnsImagePlugin', 0, 0, -1), ('PIL.EpsImagePlugin', 0, 0, -1), ('PIL.SpiderImagePlugin', 0, 0, -1), ('PIL.PcxImagePlugin', 0, 0, -1), ('PIL.MspImagePlugin', 0, 0, -1), ('PIL.PixarImagePlugin', 0, 0, -1), ('PIL.ArgImagePlugin', 0, 0, -1), ('PIL.WmfImagePlugin', 0, 0, -1), ('PIL.ImImagePlugin', 0, 0, -1), ('PIL.PalmImagePlugin', 0, 0, -1), ('PIL.XVThumbImagePlugin', 0, 0, -1), ('PIL.MpegImagePlugin', 0, 0, -1), ('PIL.McIdasImagePlugin', 0, 0, -1), ('PIL.GbrImagePlugin', 0, 0, -1), ('PIL.CurImagePlugin', 0, 0, -1), ('PIL.PdfImagePlugin', 0, 0, -1), ('PIL.FliImagePlugin', 0, 0, -1), ('PIL.TgaImagePlugin', 0, 0, -1), ('PIL.ImtImagePlugin', 0, 0, -1), ('PIL.FpxImagePlugin', 0, 0, -1), ('PIL.GifImagePlugin', 0, 0, -1), ('PIL.DcxImagePlugin', 0, 0, -1), ('PIL.IptcImagePlugin', 0, 0, -1), ('PIL.PcdImagePlugin', 0, 0, -1), ('PIL.GribStubImagePlugin', 0, 0, -1), ('PIL.BufrStubImagePlugin', 0, 0, -1), ('PIL.TiffImagePlugin', 0, 0, -1), ('PIL.JpegImagePlugin', 0, 0, -1), ('PIL.Hdf5StubImagePlugin', 0, 0, -1), ('PIL.PsdImagePlugin', 0, 0, -1), ('PIL.XbmImagePlugin', 0, 0, -1), ('PIL.IcoImagePlugin', 0, 0, -1), ('PIL.PpmImagePlugin', 0, 0, -1), ('PIL.SunImagePlugin', 0, 0, -1)] binaries=[] datas=[]>
PIL.ImageTk: None -> <PyModule 'PIL.ImageTk' C:\Anaconda\lib\site-packages\PIL\ImageTk.pyc imports=[('Tkinter', 0, 0, -1), ('Image', 0, 0, -1), ('StringIO', 1, 1, -1), ('StringIO.StringIO', 1, 1, -1), ('_imagingtk', 1, 1, -1), ('StringIO', 1, 1, -1), ('StringIO.StringIO', 1, 1, -1)] binaries=[] datas=[]>
tkinter: None -> None
  DEL tkinter
tkinter: None -> None
  DEL tkinter
tkinter: None -> None
  DEL tkinter
Tkinter: None -> <PyModule 'Tkinter' C:\Anaconda\lib\lib-tk\Tkinter.pyc imports=[('sys', 0, 0, -1), ('FixTk', 0, 1, -1), ('_tkinter', 0, 0, -1), ('types', 0, 0, -1), ('types.*', 0, 0, -1), ('Tkconstants', 0, 0, -1), ('Tkconstants.*', 0, 0, -1), ('re', 0, 0, -1), ('sys', 1, 0, -1), ('os', 1, 1, -1), ('os', 1, 0, -1), ('traceback', 1, 0, -1), ('sys', 1, 0, -1)] binaries=[] datas=[]>
tkFileDialog: None -> <PyModule 'tkFileDialog' C:\Anaconda\lib\lib-tk\tkFileDialog.pyc imports=[('tkCommonDialog', 0, 0, -1), ('tkCommonDialog.Dialog', 0, 0, -1), ('sys', 0, 1, -1), ('locale', 0, 1, -1), ('os', 1, 1, -1), ('os', 1, 1, -1)] binaries=[] datas=[]>
PIL.warnings: None -> None
PIL._imaging: None -> <ExtensionModule 'PIL._imaging' C:\Anaconda\lib\site-packages\PIL\_imaging.pyd imports=[] binaries=[] datas=[]>
PIL.ImageMode: None -> <PyModule 'PIL.ImageMode' C:\Anaconda\lib\site-packages\PIL\ImageMode.pyc imports=[('Image', 1, 1, -1)] binaries=[] datas=[]>
PIL.ImagePalette: None -> <PyModule 'PIL.ImagePalette' C:\Anaconda\lib\site-packages\PIL\ImagePalette.pyc imports=[('array', 0, 0, -1), ('Image', 0, 0, -1), ('ImageColor', 0, 0, -1), ('random', 1, 0, -1), ('random.randint', 1, 0, -1), ('GimpPaletteFile', 1, 1, -1), ('GimpGradientFile', 1, 1, -1), ('PaletteFile', 1, 1, -1)] binaries=[] datas=[]>
PIL.os: None -> None
PIL.string: None -> None
PIL.sys: None -> None
PIL.types: None -> None
PIL.operator: None -> None
PIL.struct: None -> None
PIL.BmpImagePlugin: None -> <PyModule 'PIL.BmpImagePlugin' C:\Anaconda\lib\site-packages\PIL\BmpImagePlugin.pyc imports=[('string', 0, 0, -1), ('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('ImagePalette', 0, 0, -1)] binaries=[] datas=[]>
PIL.GifImagePlugin: None -> <PyModule 'PIL.GifImagePlugin' C:\Anaconda\lib\site-packages\PIL\GifImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('ImagePalette', 0, 0, -1), ('_imaging_gif', 0, 0, -1), ('os', 1, 0, -1)] binaries=[] datas=[]>
PIL.JpegImagePlugin: None -> <PyModule 'PIL.JpegImagePlugin' C:\Anaconda\lib\site-packages\PIL\JpegImagePlugin.pyc imports=[('array', 0, 0, -1), ('struct', 0, 0, -1), ('string', 0, 0, -1), ('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('tempfile', 1, 0, -1), ('os', 1, 0, -1), ('TiffImagePlugin', 1, 0, -1), ('StringIO', 1, 0, -1), ('os', 1, 0, -1)] binaries=[] datas=[]>
PIL.PpmImagePlugin: None -> <PyModule 'PIL.PpmImagePlugin' C:\Anaconda\lib\site-packages\PIL\PpmImagePlugin.pyc imports=[('string', 0, 0, -1), ('Image', 0, 0, -1), ('ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.PngImagePlugin: None -> <PyModule 'PIL.PngImagePlugin' C:\Anaconda\lib\site-packages\PIL\PngImagePlugin.pyc imports=[('re', 0, 0, -1), ('string', 0, 0, -1), ('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('ImagePalette', 0, 0, -1), ('zlib', 0, 0, -1), ('zlib', 1, 1, -1), ('zlib', 1, 0, -1), ('ICCProfile', 1, 1, -1)] binaries=[] datas=[]>
PIL.tempfile: None -> None
PIL.ImageChops: None -> <PyModule 'PIL.ImageChops' C:\Anaconda\lib\site-packages\PIL\ImageChops.pyc imports=[('Image', 0, 0, -1)] binaries=[] datas=[]>
PIL.ImageColor: None -> <PyModule 'PIL.ImageColor' C:\Anaconda\lib\site-packages\PIL\ImageColor.pyc imports=[('Image', 0, 0, -1), ('re', 0, 0, -1), ('string', 0, 0, -1), ('colorsys', 1, 1, -1), ('colorsys.hls_to_rgb', 1, 1, -1)] binaries=[] datas=[]>
PIL.math: None -> None
PIL.__builtin__: None -> None
PIL.ImageShow: None -> <PyModule 'PIL.ImageShow' C:\Anaconda\lib\site-packages\PIL\ImageShow.pyc imports=[('Image', 0, 0, -1), ('os', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
PIL.PIL: None -> None
PIL.MicImagePlugin: None -> <PyModule 'PIL.MicImagePlugin' C:\Anaconda\lib\site-packages\PIL\MicImagePlugin.pyc imports=[('Image', 0, 0, -1), ('TiffImagePlugin', 0, 0, -1), ('OleFileIO', 0, 0, -1), ('OleFileIO.*', 0, 0, -1)] binaries=[] datas=[]>
PIL.SgiImagePlugin: None -> <PyModule 'PIL.SgiImagePlugin' C:\Anaconda\lib\site-packages\PIL\SgiImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.XpmImagePlugin: None -> <PyModule 'PIL.XpmImagePlugin' C:\Anaconda\lib\site-packages\PIL\XpmImagePlugin.pyc imports=[('re', 0, 0, -1), ('string', 0, 0, -1), ('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('ImagePalette', 0, 0, -1)] binaries=[] datas=[]>
PIL.FitsStubImagePlugin: None -> <PyModule 'PIL.FitsStubImagePlugin' C:\Anaconda\lib\site-packages\PIL\FitsStubImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.IcnsImagePlugin: None -> <PyModule 'PIL.IcnsImagePlugin' C:\Anaconda\lib\site-packages\PIL\IcnsImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('string', 0, 0, -1), ('struct', 0, 0, -1), ('os', 0, 1, -1), ('sys', 0, 1, -1)] binaries=[] datas=[]>
PIL.EpsImagePlugin: None -> <PyModule 'PIL.EpsImagePlugin' C:\Anaconda\lib\site-packages\PIL\EpsImagePlugin.pyc imports=[('re', 0, 0, -1), ('string', 0, 0, -1), ('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('tempfile', 1, 0, -1), ('os', 1, 0, -1)] binaries=[] datas=[]>
PIL.SpiderImagePlugin: None -> <PyModule 'PIL.SpiderImagePlugin' C:\Anaconda\lib\site-packages\PIL\SpiderImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('os', 0, 0, -1), ('struct', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
PIL.PcxImagePlugin: None -> <PyModule 'PIL.PcxImagePlugin' C:\Anaconda\lib\site-packages\PIL\PcxImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('ImagePalette', 0, 0, -1)] binaries=[] datas=[]>
PIL.MspImagePlugin: None -> <PyModule 'PIL.MspImagePlugin' C:\Anaconda\lib\site-packages\PIL\MspImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.PixarImagePlugin: None -> <PyModule 'PIL.PixarImagePlugin' C:\Anaconda\lib\site-packages\PIL\PixarImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.ArgImagePlugin: None -> <PyModule 'PIL.ArgImagePlugin' C:\Anaconda\lib\site-packages\PIL\ArgImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('ImagePalette', 0, 0, -1), ('PngImagePlugin', 0, 0, -1), ('PngImagePlugin.i16', 0, 0, -1), ('PngImagePlugin.i32', 0, 0, -1), ('PngImagePlugin.ChunkStream', 0, 0, -1), ('PngImagePlugin._MODES', 0, 0, -1)] binaries=[] datas=[]>
PIL.WmfImagePlugin: None -> <PyModule 'PIL.WmfImagePlugin' C:\Anaconda\lib\site-packages\PIL\WmfImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.ImImagePlugin: None -> <PyModule 'PIL.ImImagePlugin' C:\Anaconda\lib\site-packages\PIL\ImImagePlugin.pyc imports=[('re', 0, 0, -1), ('string', 0, 0, -1), ('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('ImagePalette', 0, 0, -1)] binaries=[] datas=[]>
PIL.PalmImagePlugin: None -> <PyModule 'PIL.PalmImagePlugin' C:\Anaconda\lib\site-packages\PIL\PalmImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.XVThumbImagePlugin: None -> <PyModule 'PIL.XVThumbImagePlugin' C:\Anaconda\lib\site-packages\PIL\XVThumbImagePlugin.pyc imports=[('string', 0, 0, -1), ('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('ImagePalette', 0, 0, -1)] binaries=[] datas=[]>
PIL.MpegImagePlugin: None -> <PyModule 'PIL.MpegImagePlugin' C:\Anaconda\lib\site-packages\PIL\MpegImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.McIdasImagePlugin: None -> <PyModule 'PIL.McIdasImagePlugin' C:\Anaconda\lib\site-packages\PIL\McIdasImagePlugin.pyc imports=[('struct', 0, 0, -1), ('Image', 0, 0, -1), ('ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.GbrImagePlugin: None -> <PyModule 'PIL.GbrImagePlugin' C:\Anaconda\lib\site-packages\PIL\GbrImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.CurImagePlugin: None -> <PyModule 'PIL.CurImagePlugin' C:\Anaconda\lib\site-packages\PIL\CurImagePlugin.pyc imports=[('Image', 0, 0, -1), ('BmpImagePlugin', 0, 0, -1)] binaries=[] datas=[]>
PIL.PdfImagePlugin: None -> <PyModule 'PIL.PdfImagePlugin' C:\Anaconda\lib\site-packages\PIL\PdfImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('StringIO', 0, 0, -1)] binaries=[] datas=[]>
PIL.FliImagePlugin: None -> <PyModule 'PIL.FliImagePlugin' C:\Anaconda\lib\site-packages\PIL\FliImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('ImagePalette', 0, 0, -1), ('string', 0, 0, -1)] binaries=[] datas=[]>
PIL.TgaImagePlugin: None -> <PyModule 'PIL.TgaImagePlugin' C:\Anaconda\lib\site-packages\PIL\TgaImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('ImagePalette', 0, 0, -1)] binaries=[] datas=[]>
PIL.ImtImagePlugin: None -> <PyModule 'PIL.ImtImagePlugin' C:\Anaconda\lib\site-packages\PIL\ImtImagePlugin.pyc imports=[('re', 0, 0, -1), ('Image', 0, 0, -1), ('ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.FpxImagePlugin: None -> <PyModule 'PIL.FpxImagePlugin' C:\Anaconda\lib\site-packages\PIL\FpxImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('OleFileIO', 0, 0, -1), ('OleFileIO.*', 0, 0, -1)] binaries=[] datas=[]>
PIL.DcxImagePlugin: None -> <PyModule 'PIL.DcxImagePlugin' C:\Anaconda\lib\site-packages\PIL\DcxImagePlugin.pyc imports=[('Image', 0, 0, -1), ('PcxImagePlugin', 0, 0, -1), ('PcxImagePlugin.PcxImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.IptcImagePlugin: None -> <PyModule 'PIL.IptcImagePlugin' C:\Anaconda\lib\site-packages\PIL\IptcImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('os', 0, 0, -1), ('tempfile', 0, 0, -1), ('TiffImagePlugin', 1, 0, -1), ('JpegImagePlugin', 1, 0, -1), ('StringIO', 1, 0, -1)] binaries=[] datas=[]>
PIL.PcdImagePlugin: None -> <PyModule 'PIL.PcdImagePlugin' C:\Anaconda\lib\site-packages\PIL\PcdImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.GribStubImagePlugin: None -> <PyModule 'PIL.GribStubImagePlugin' C:\Anaconda\lib\site-packages\PIL\GribStubImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.BufrStubImagePlugin: None -> <PyModule 'PIL.BufrStubImagePlugin' C:\Anaconda\lib\site-packages\PIL\BufrStubImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.TiffImagePlugin: None -> <PyModule 'PIL.TiffImagePlugin' C:\Anaconda\lib\site-packages\PIL\TiffImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('ImagePalette', 0, 0, -1), ('array', 0, 0, -1), ('string', 0, 0, -1), ('sys', 0, 0, -1), ('TiffTags', 1, 1, -1), ('TiffTags', 1, 1, -1)] binaries=[] datas=[]>
PIL.Hdf5StubImagePlugin: None -> <PyModule 'PIL.Hdf5StubImagePlugin' C:\Anaconda\lib\site-packages\PIL\Hdf5StubImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.PsdImagePlugin: None -> <PyModule 'PIL.PsdImagePlugin' C:\Anaconda\lib\site-packages\PIL\PsdImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('ImagePalette', 0, 0, -1)] binaries=[] datas=[]>
PIL.XbmImagePlugin: None -> <PyModule 'PIL.XbmImagePlugin' C:\Anaconda\lib\site-packages\PIL\XbmImagePlugin.pyc imports=[('re', 0, 0, -1), ('string', 0, 0, -1), ('Image', 0, 0, -1), ('ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.IcoImagePlugin: None -> <PyModule 'PIL.IcoImagePlugin' C:\Anaconda\lib\site-packages\PIL\IcoImagePlugin.pyc imports=[('Image', 0, 0, -1), ('BmpImagePlugin', 0, 0, -1)] binaries=[] datas=[]>
PIL.SunImagePlugin: None -> <PyModule 'PIL.SunImagePlugin' C:\Anaconda\lib\site-packages\PIL\SunImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('ImagePalette', 0, 0, -1)] binaries=[] datas=[]>
PIL.array: None -> None
PIL.random: None -> None
PIL.GimpPaletteFile: None -> <PyModule 'PIL.GimpPaletteFile' C:\Anaconda\lib\site-packages\PIL\GimpPaletteFile.pyc imports=[('re', 0, 0, -1), ('string', 0, 0, -1)] binaries=[] datas=[]>
PIL.GimpGradientFile: None -> <PyModule 'PIL.GimpGradientFile' C:\Anaconda\lib\site-packages\PIL\GimpGradientFile.pyc imports=[('math', 0, 0, -1), ('math.pi', 0, 0, -1), ('math.log', 0, 0, -1), ('math.sin', 0, 0, -1), ('math.sqrt', 0, 0, -1), ('string', 0, 0, -1)] binaries=[] datas=[]>
PIL.PaletteFile: None -> <PyModule 'PIL.PaletteFile' C:\Anaconda\lib\site-packages\PIL\PaletteFile.pyc imports=[('string', 0, 0, -1)] binaries=[] datas=[]>
PIL.re: None -> None
PIL.colorsys: None -> None
colorsys: None -> <PyModule 'colorsys' C:\Anaconda\lib\colorsys.pyc imports=[] binaries=[] datas=[]>
PIL.ImageFile: None -> <PyModule 'PIL.ImageFile' C:\Anaconda\lib\site-packages\PIL\ImageFile.pyc imports=[('Image', 0, 0, -1), ('traceback', 0, 0, -1), ('string', 0, 0, -1), ('os', 0, 0, -1), ('mmap', 1, 1, -1)] binaries=[] datas=[]>
PIL.traceback: None -> None
PIL.mmap: None -> None
mmap: None -> <BuiltinModule 'mmap' None imports=[] binaries=[] datas=[]>
PIL._imaging_gif: None -> None
_imaging_gif: None -> None
  DEL _imaging_gif
PIL.StringIO: None -> None
PIL.TiffTags: None -> <PyModule 'PIL.TiffTags' C:\Anaconda\lib\site-packages\PIL\TiffTags.pyc imports=[] binaries=[] datas=[]>
PIL.zlib: None -> None
PIL.ICCProfile: None -> None
ICCProfile: None -> None
  DEL ICCProfile
PIL.OleFileIO: None -> <PyModule 'PIL.OleFileIO' C:\Anaconda\lib\site-packages\PIL\OleFileIO.pyc imports=[('string', 0, 0, -1), ('StringIO', 0, 0, -1), ('sys', 0, 1, -1)] binaries=[] datas=[]>
PIL.Tkinter: None -> None
PIL._imagingtk: None -> None
_imagingtk: None -> None
  DEL _imagingtk
FixTk: None -> <PyModule 'FixTk' C:\Anaconda\lib\lib-tk\FixTk.pyc imports=[('sys', 0, 0, -1), ('os', 0, 0, -1), ('ctypes', 0, 0, -1), ('_tkinter', 0, 1, -1)] binaries=[] datas=[]>
_tkinter: None -> <ExtensionModule '_tkinter' C:\Anaconda\DLLs\_tkinter.pyd imports=[] binaries=[] datas=[('_MEI\\tcl\\auto.tcl', 'C:\\Anaconda\\tcl\\tcl8.5\\auto.tcl', 'DATA'), ('_MEI\\tcl\\clock.tcl', 'C:\\Anaconda\\tcl\\tcl8.5\\clock.tcl', 'DATA'), ('_MEI\\tcl\\history.tcl', 'C:\\Anaconda\\tcl\\tcl8.5\\history.tcl', 'DATA'), ('_MEI\\tcl\\init.tcl', 'C:\\Anaconda\\tcl\\tcl8.5\\init.tcl', 'DATA'), ('_MEI\\tcl\\package.tcl', 'C:\\Anaconda\\tcl\\tcl8.5\\package.tcl', 'DATA'), ('_MEI\\tcl\\parray.tcl', 'C:\\Anaconda\\tcl\\tcl8.5\\parray.tcl', 'DATA'), ('_MEI\\tcl\\safe.tcl', 'C:\\Anaconda\\tcl\\tcl8.5\\safe.tcl', 'DATA'), ('_MEI\\tcl\\tclIndex', 'C:\\Anaconda\\tcl\\tcl8.5\\tclIndex', 'DATA'), ('_MEI\\tcl\\tm.tcl', 'C:\\Anaconda\\tcl\\tcl8.5\\tm.tcl', 'DATA'), ('_MEI\\tcl\\word.tcl', 'C:\\Anaconda\\tcl\\tcl8.5\\word.tcl', 'DATA'), ('_MEI\\tcl\\tzdata\\CET', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\CET', 'DATA'), ('_MEI\\tcl\\tzdata\\CST6CDT', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\CST6CDT', 'DATA'), ('_MEI\\tcl\\tzdata\\Cuba', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Cuba', 'DATA'), ('_MEI\\tcl\\tzdata\\EET', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\EET', 'DATA'), ('_MEI\\tcl\\tzdata\\Egypt', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Egypt', 'DATA'), ('_MEI\\tcl\\tzdata\\Eire', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Eire', 'DATA'), ('_MEI\\tcl\\tzdata\\EST', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\EST', 'DATA'), ('_MEI\\tcl\\tzdata\\EST5EDT', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\EST5EDT', 'DATA'), ('_MEI\\tcl\\tzdata\\GB', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\GB', 'DATA'), ('_MEI\\tcl\\tzdata\\GB-Eire', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\GB-Eire', 'DATA'), ('_MEI\\tcl\\tzdata\\GMT', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\GMT', 'DATA'), ('_MEI\\tcl\\tzdata\\GMT+0', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\GMT+0', 'DATA'), ('_MEI\\tcl\\tzdata\\GMT-0', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\GMT-0', 'DATA'), ('_MEI\\tcl\\tzdata\\GMT0', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\GMT0', 'DATA'), ('_MEI\\tcl\\tzdata\\Greenwich', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Greenwich', 'DATA'), ('_MEI\\tcl\\tzdata\\Hongkong', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Hongkong', 'DATA'), ('_MEI\\tcl\\tzdata\\HST', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\HST', 'DATA'), ('_MEI\\tcl\\tzdata\\Iceland', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Iceland', 'DATA'), ('_MEI\\tcl\\tzdata\\Iran', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Iran', 'DATA'), ('_MEI\\tcl\\tzdata\\Israel', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Israel', 'DATA'), ('_MEI\\tcl\\tzdata\\Jamaica', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Jamaica', 'DATA'), ('_MEI\\tcl\\tzdata\\Japan', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Japan', 'DATA'), ('_MEI\\tcl\\tzdata\\Kwajalein', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Kwajalein', 'DATA'), ('_MEI\\tcl\\tzdata\\Libya', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Libya', 'DATA'), ('_MEI\\tcl\\tzdata\\MET', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\MET', 'DATA'), ('_MEI\\tcl\\tzdata\\MST', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\MST', 'DATA'), ('_MEI\\tcl\\tzdata\\MST7MDT', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\MST7MDT', 'DATA'), ('_MEI\\tcl\\tzdata\\Navajo', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Navajo', 'DATA'), ('_MEI\\tcl\\tzdata\\NZ', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\NZ', 'DATA'), ('_MEI\\tcl\\tzdata\\NZ-CHAT', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\NZ-CHAT', 'DATA'), ('_MEI\\tcl\\tzdata\\Poland', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Poland', 'DATA'), ('_MEI\\tcl\\tzdata\\Portugal', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Portugal', 'DATA'), ('_MEI\\tcl\\tzdata\\PRC', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\PRC', 'DATA'), ('_MEI\\tcl\\tzdata\\PST8PDT', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\PST8PDT', 'DATA'), ('_MEI\\tcl\\tzdata\\ROC', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\ROC', 'DATA'), ('_MEI\\tcl\\tzdata\\ROK', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\ROK', 'DATA'), ('_MEI\\tcl\\tzdata\\Singapore', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Singapore', 'DATA'), ('_MEI\\tcl\\tzdata\\Turkey', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Turkey', 'DATA'), ('_MEI\\tcl\\tzdata\\UCT', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\UCT', 'DATA'), ('_MEI\\tcl\\tzdata\\Universal', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Universal', 'DATA'), ('_MEI\\tcl\\tzdata\\UTC', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\UTC', 'DATA'), ('_MEI\\tcl\\tzdata\\W-SU', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\W-SU', 'DATA'), ('_MEI\\tcl\\tzdata\\WET', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\WET', 'DATA'), ('_MEI\\tcl\\tzdata\\Zulu', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Zulu', 'DATA'), ('_MEI\\tcl\\tzdata\\US\\Alaska', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\US\\Alaska', 'DATA'), ('_MEI\\tcl\\tzdata\\US\\Aleutian', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\US\\Aleutian', 'DATA'), ('_MEI\\tcl\\tzdata\\US\\Arizona', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\US\\Arizona', 'DATA'), ('_MEI\\tcl\\tzdata\\US\\Central', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\US\\Central', 'DATA'), ('_MEI\\tcl\\tzdata\\US\\East-Indiana', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\US\\East-Indiana', 'DATA'), ('_MEI\\tcl\\tzdata\\US\\Eastern', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\US\\Eastern', 'DATA'), ('_MEI\\tcl\\tzdata\\US\\Hawaii', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\US\\Hawaii', 'DATA'), ('_MEI\\tcl\\tzdata\\US\\Indiana-Starke', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\US\\Indiana-Starke', 'DATA'), ('_MEI\\tcl\\tzdata\\US\\Michigan', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\US\\Michigan', 'DATA'), ('_MEI\\tcl\\tzdata\\US\\Mountain', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\US\\Mountain', 'DATA'), ('_MEI\\tcl\\tzdata\\US\\Pacific', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\US\\Pacific', 'DATA'), ('_MEI\\tcl\\tzdata\\US\\Pacific-New', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\US\\Pacific-New', 'DATA'), ('_MEI\\tcl\\tzdata\\US\\Samoa', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\US\\Samoa', 'DATA'), ('_MEI\\tcl\\tzdata\\SystemV\\AST4', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\SystemV\\AST4', 'DATA'), ('_MEI\\tcl\\tzdata\\SystemV\\AST4ADT', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\SystemV\\AST4ADT', 'DATA'), ('_MEI\\tcl\\tzdata\\SystemV\\CST6', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\SystemV\\CST6', 'DATA'), ('_MEI\\tcl\\tzdata\\SystemV\\CST6CDT', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\SystemV\\CST6CDT', 'DATA'), ('_MEI\\tcl\\tzdata\\SystemV\\EST5', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\SystemV\\EST5', 'DATA'), ('_MEI\\tcl\\tzdata\\SystemV\\EST5EDT', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\SystemV\\EST5EDT', 'DATA'), ('_MEI\\tcl\\tzdata\\SystemV\\HST10', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\SystemV\\HST10', 'DATA'), ('_MEI\\tcl\\tzdata\\SystemV\\MST7', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\SystemV\\MST7', 'DATA'), ('_MEI\\tcl\\tzdata\\SystemV\\MST7MDT', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\SystemV\\MST7MDT', 'DATA'), ('_MEI\\tcl\\tzdata\\SystemV\\PST8', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\SystemV\\PST8', 'DATA'), ('_MEI\\tcl\\tzdata\\SystemV\\PST8PDT', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\SystemV\\PST8PDT', 'DATA'), ('_MEI\\tcl\\tzdata\\SystemV\\YST9', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\SystemV\\YST9', 'DATA'), ('_MEI\\tcl\\tzdata\\SystemV\\YST9YDT', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\SystemV\\YST9YDT', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Apia', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Apia', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Auckland', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Auckland', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Chatham', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Chatham', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Easter', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Easter', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Efate', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Efate', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Enderbury', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Enderbury', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Fakaofo', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Fakaofo', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Fiji', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Fiji', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Funafuti', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Funafuti', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Galapagos', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Galapagos', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Gambier', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Gambier', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Guadalcanal', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Guadalcanal', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Guam', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Guam', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Honolulu', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Honolulu', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Johnston', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Johnston', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Kiritimati', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Kiritimati', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Kosrae', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Kosrae', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Kwajalein', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Kwajalein', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Majuro', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Majuro', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Marquesas', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Marquesas', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Midway', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Midway', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Nauru', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Nauru', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Niue', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Niue', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Norfolk', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Norfolk', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Noumea', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Noumea', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Pago_Pago', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Pago_Pago', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Palau', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Palau', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Pitcairn', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Pitcairn', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Ponape', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Ponape', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Port_Moresby', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Port_Moresby', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Rarotonga', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Rarotonga', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Saipan', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Saipan', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Samoa', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Samoa', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Tahiti', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Tahiti', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Tarawa', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Tarawa', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Tongatapu', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Tongatapu', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Truk', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Truk', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Wake', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Wake', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Wallis', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Wallis', 'DATA'), ('_MEI\\tcl\\tzdata\\Pacific\\Yap', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Pacific\\Yap', 'DATA'), ('_MEI\\tcl\\tzdata\\Mexico\\BajaNorte', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Mexico\\BajaNorte', 'DATA'), ('_MEI\\tcl\\tzdata\\Mexico\\BajaSur', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Mexico\\BajaSur', 'DATA'), ('_MEI\\tcl\\tzdata\\Mexico\\General', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Mexico\\General', 'DATA'), ('_MEI\\tcl\\tzdata\\Indian\\Antananarivo', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Indian\\Antananarivo', 'DATA'), ('_MEI\\tcl\\tzdata\\Indian\\Chagos', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Indian\\Chagos', 'DATA'), ('_MEI\\tcl\\tzdata\\Indian\\Christmas', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Indian\\Christmas', 'DATA'), ('_MEI\\tcl\\tzdata\\Indian\\Cocos', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Indian\\Cocos', 'DATA'), ('_MEI\\tcl\\tzdata\\Indian\\Comoro', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Indian\\Comoro', 'DATA'), ('_MEI\\tcl\\tzdata\\Indian\\Kerguelen', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Indian\\Kerguelen', 'DATA'), ('_MEI\\tcl\\tzdata\\Indian\\Mahe', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Indian\\Mahe', 'DATA'), ('_MEI\\tcl\\tzdata\\Indian\\Maldives', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Indian\\Maldives', 'DATA'), ('_MEI\\tcl\\tzdata\\Indian\\Mauritius', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Indian\\Mauritius', 'DATA'), ('_MEI\\tcl\\tzdata\\Indian\\Mayotte', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Indian\\Mayotte', 'DATA'), ('_MEI\\tcl\\tzdata\\Indian\\Reunion', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Indian\\Reunion', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Amsterdam', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Amsterdam', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Andorra', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Andorra', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Athens', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Athens', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Belfast', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Belfast', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Belgrade', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Belgrade', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Berlin', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Berlin', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Bratislava', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Bratislava', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Brussels', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Brussels', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Bucharest', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Bucharest', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Budapest', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Budapest', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Chisinau', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Chisinau', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Copenhagen', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Copenhagen', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Dublin', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Dublin', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Gibraltar', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Gibraltar', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Guernsey', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Guernsey', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Helsinki', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Helsinki', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Isle_of_Man', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Isle_of_Man', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Istanbul', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Istanbul', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Jersey', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Jersey', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Kaliningrad', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Kaliningrad', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Kiev', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Kiev', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Lisbon', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Lisbon', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Ljubljana', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Ljubljana', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\London', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\London', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Luxembourg', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Luxembourg', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Madrid', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Madrid', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Malta', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Malta', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Mariehamn', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Mariehamn', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Minsk', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Minsk', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Monaco', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Monaco', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Moscow', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Moscow', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Nicosia', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Nicosia', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Oslo', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Oslo', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Paris', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Paris', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Podgorica', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Podgorica', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Prague', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Prague', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Riga', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Riga', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Rome', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Rome', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Samara', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Samara', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\San_Marino', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\San_Marino', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Sarajevo', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Sarajevo', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Simferopol', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Simferopol', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Skopje', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Skopje', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Sofia', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Sofia', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Stockholm', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Stockholm', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Tallinn', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Tallinn', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Tirane', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Tirane', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Tiraspol', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Tiraspol', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Uzhgorod', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Uzhgorod', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Vaduz', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Vaduz', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Vatican', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Vatican', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Vienna', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Vienna', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Vilnius', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Vilnius', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Volgograd', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Volgograd', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Warsaw', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Warsaw', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Zagreb', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Zagreb', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Zaporozhye', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Zaporozhye', 'DATA'), ('_MEI\\tcl\\tzdata\\Europe\\Zurich', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Europe\\Zurich', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT+0', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT+0', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT+1', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT+1', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT+10', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT+10', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT+11', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT+11', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT+12', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT+12', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT+2', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT+2', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT+3', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT+3', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT+4', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT+4', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT+5', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT+5', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT+6', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT+6', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT+7', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT+7', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT+8', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT+8', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT+9', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT+9', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT-0', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT-0', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT-1', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT-1', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT-10', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT-10', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT-11', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT-11', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT-12', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT-12', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT-13', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT-13', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT-14', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT-14', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT-2', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT-2', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT-3', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT-3', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT-4', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT-4', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT-5', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT-5', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT-6', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT-6', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT-7', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT-7', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT-8', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT-8', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT-9', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT-9', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\GMT0', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\GMT0', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\Greenwich', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\Greenwich', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\UCT', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\UCT', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\Universal', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\Universal', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\UTC', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\UTC', 'DATA'), ('_MEI\\tcl\\tzdata\\Etc\\Zulu', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Etc\\Zulu', 'DATA'), ('_MEI\\tcl\\tzdata\\Chile\\Continental', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Chile\\Continental', 'DATA'), ('_MEI\\tcl\\tzdata\\Chile\\EasterIsland', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Chile\\EasterIsland', 'DATA'), ('_MEI\\tcl\\tzdata\\Canada\\Atlantic', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Canada\\Atlantic', 'DATA'), ('_MEI\\tcl\\tzdata\\Canada\\Central', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Canada\\Central', 'DATA'), ('_MEI\\tcl\\tzdata\\Canada\\East-Saskatchewan', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Canada\\East-Saskatchewan', 'DATA'), ('_MEI\\tcl\\tzdata\\Canada\\Eastern', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Canada\\Eastern', 'DATA'), ('_MEI\\tcl\\tzdata\\Canada\\Mountain', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Canada\\Mountain', 'DATA'), ('_MEI\\tcl\\tzdata\\Canada\\Newfoundland', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Canada\\Newfoundland', 'DATA'), ('_MEI\\tcl\\tzdata\\Canada\\Pacific', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Canada\\Pacific', 'DATA'), ('_MEI\\tcl\\tzdata\\Canada\\Saskatchewan', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Canada\\Saskatchewan', 'DATA'), ('_MEI\\tcl\\tzdata\\Canada\\Yukon', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Canada\\Yukon', 'DATA'), ('_MEI\\tcl\\tzdata\\Brazil\\Acre', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Brazil\\Acre', 'DATA'), ('_MEI\\tcl\\tzdata\\Brazil\\DeNoronha', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Brazil\\DeNoronha', 'DATA'), ('_MEI\\tcl\\tzdata\\Brazil\\East', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Brazil\\East', 'DATA'), ('_MEI\\tcl\\tzdata\\Brazil\\West', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Brazil\\West', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\ACT', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\ACT', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\Adelaide', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\Adelaide', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\Brisbane', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\Brisbane', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\Broken_Hill', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\Broken_Hill', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\Canberra', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\Canberra', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\Currie', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\Currie', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\Darwin', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\Darwin', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\Eucla', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\Eucla', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\Hobart', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\Hobart', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\LHI', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\LHI', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\Lindeman', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\Lindeman', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\Lord_Howe', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\Lord_Howe', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\Melbourne', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\Melbourne', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\North', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\North', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\NSW', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\NSW', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\Perth', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\Perth', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\Queensland', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\Queensland', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\South', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\South', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\Sydney', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\Sydney', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\Tasmania', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\Tasmania', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\Victoria', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\Victoria', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\West', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\West', 'DATA'), ('_MEI\\tcl\\tzdata\\Australia\\Yancowinna', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Australia\\Yancowinna', 'DATA'), ('_MEI\\tcl\\tzdata\\Atlantic\\Azores', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Atlantic\\Azores', 'DATA'), ('_MEI\\tcl\\tzdata\\Atlantic\\Bermuda', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Atlantic\\Bermuda', 'DATA'), ('_MEI\\tcl\\tzdata\\Atlantic\\Canary', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Atlantic\\Canary', 'DATA'), ('_MEI\\tcl\\tzdata\\Atlantic\\Cape_Verde', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Atlantic\\Cape_Verde', 'DATA'), ('_MEI\\tcl\\tzdata\\Atlantic\\Faeroe', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Atlantic\\Faeroe', 'DATA'), ('_MEI\\tcl\\tzdata\\Atlantic\\Faroe', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Atlantic\\Faroe', 'DATA'), ('_MEI\\tcl\\tzdata\\Atlantic\\Jan_Mayen', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Atlantic\\Jan_Mayen', 'DATA'), ('_MEI\\tcl\\tzdata\\Atlantic\\Madeira', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Atlantic\\Madeira', 'DATA'), ('_MEI\\tcl\\tzdata\\Atlantic\\Reykjavik', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Atlantic\\Reykjavik', 'DATA'), ('_MEI\\tcl\\tzdata\\Atlantic\\South_Georgia', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Atlantic\\South_Georgia', 'DATA'), ('_MEI\\tcl\\tzdata\\Atlantic\\Stanley', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Atlantic\\Stanley', 'DATA'), ('_MEI\\tcl\\tzdata\\Atlantic\\St_Helena', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Atlantic\\St_Helena', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Aden', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Aden', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Almaty', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Almaty', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Amman', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Amman', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Anadyr', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Anadyr', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Aqtau', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Aqtau', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Aqtobe', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Aqtobe', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Ashgabat', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Ashgabat', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Ashkhabad', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Ashkhabad', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Baghdad', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Baghdad', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Bahrain', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Bahrain', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Baku', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Baku', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Bangkok', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Bangkok', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Beirut', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Beirut', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Bishkek', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Bishkek', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Brunei', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Brunei', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Calcutta', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Calcutta', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Choibalsan', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Choibalsan', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Chongqing', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Chongqing', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Chungking', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Chungking', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Colombo', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Colombo', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Dacca', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Dacca', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Damascus', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Damascus', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Dhaka', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Dhaka', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Dili', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Dili', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Dubai', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Dubai', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Dushanbe', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Dushanbe', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Gaza', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Gaza', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Harbin', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Harbin', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Hong_Kong', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Hong_Kong', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Hovd', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Hovd', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Ho_Chi_Minh', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Ho_Chi_Minh', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Irkutsk', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Irkutsk', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Istanbul', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Istanbul', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Jakarta', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Jakarta', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Jayapura', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Jayapura', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Jerusalem', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Jerusalem', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Kabul', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Kabul', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Kamchatka', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Kamchatka', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Karachi', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Karachi', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Kashgar', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Kashgar', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Katmandu', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Katmandu', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Kolkata', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Kolkata', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Krasnoyarsk', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Krasnoyarsk', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Kuala_Lumpur', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Kuala_Lumpur', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Kuching', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Kuching', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Kuwait', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Kuwait', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Macao', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Macao', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Macau', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Macau', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Magadan', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Magadan', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Makassar', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Makassar', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Manila', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Manila', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Muscat', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Muscat', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Nicosia', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Nicosia', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Novosibirsk', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Novosibirsk', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Omsk', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Omsk', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Oral', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Oral', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Phnom_Penh', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Phnom_Penh', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Pontianak', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Pontianak', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Pyongyang', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Pyongyang', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Qatar', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Qatar', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Qyzylorda', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Qyzylorda', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Rangoon', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Rangoon', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Riyadh', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Riyadh', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Saigon', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Saigon', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Sakhalin', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Sakhalin', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Samarkand', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Samarkand', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Seoul', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Seoul', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Shanghai', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Shanghai', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Singapore', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Singapore', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Taipei', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Taipei', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Tashkent', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Tashkent', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Tbilisi', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Tbilisi', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Tehran', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Tehran', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Tel_Aviv', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Tel_Aviv', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Thimbu', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Thimbu', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Thimphu', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Thimphu', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Tokyo', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Tokyo', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Ujung_Pandang', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Ujung_Pandang', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Ulaanbaatar', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Ulaanbaatar', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Ulan_Bator', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Ulan_Bator', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Urumqi', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Urumqi', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Vientiane', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Vientiane', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Vladivostok', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Vladivostok', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Yakutsk', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Yakutsk', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Yekaterinburg', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Yekaterinburg', 'DATA'), ('_MEI\\tcl\\tzdata\\Asia\\Yerevan', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Asia\\Yerevan', 'DATA'), ('_MEI\\tcl\\tzdata\\Arctic\\Longyearbyen', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Arctic\\Longyearbyen', 'DATA'), ('_MEI\\tcl\\tzdata\\Antarctica\\Casey', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Antarctica\\Casey', 'DATA'), ('_MEI\\tcl\\tzdata\\Antarctica\\Davis', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Antarctica\\Davis', 'DATA'), ('_MEI\\tcl\\tzdata\\Antarctica\\DumontDUrville', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Antarctica\\DumontDUrville', 'DATA'), ('_MEI\\tcl\\tzdata\\Antarctica\\Mawson', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Antarctica\\Mawson', 'DATA'), ('_MEI\\tcl\\tzdata\\Antarctica\\McMurdo', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Antarctica\\McMurdo', 'DATA'), ('_MEI\\tcl\\tzdata\\Antarctica\\Palmer', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Antarctica\\Palmer', 'DATA'), ('_MEI\\tcl\\tzdata\\Antarctica\\Rothera', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Antarctica\\Rothera', 'DATA'), ('_MEI\\tcl\\tzdata\\Antarctica\\South_Pole', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Antarctica\\South_Pole', 'DATA'), ('_MEI\\tcl\\tzdata\\Antarctica\\Syowa', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Antarctica\\Syowa', 'DATA'), ('_MEI\\tcl\\tzdata\\Antarctica\\Vostok', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Antarctica\\Vostok', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Adak', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Adak', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Anchorage', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Anchorage', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Anguilla', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Anguilla', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Antigua', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Antigua', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Araguaina', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Araguaina', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Aruba', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Aruba', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Asuncion', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Asuncion', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Atikokan', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Atikokan', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Atka', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Atka', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Bahia', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Bahia', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Barbados', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Barbados', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Belem', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Belem', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Belize', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Belize', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Blanc-Sablon', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Blanc-Sablon', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Boa_Vista', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Boa_Vista', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Bogota', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Bogota', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Boise', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Boise', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Buenos_Aires', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Buenos_Aires', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Cambridge_Bay', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Cambridge_Bay', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Campo_Grande', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Campo_Grande', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Cancun', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Cancun', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Caracas', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Caracas', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Catamarca', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Catamarca', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Cayenne', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Cayenne', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Cayman', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Cayman', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Chicago', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Chicago', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Chihuahua', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Chihuahua', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Coral_Harbour', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Coral_Harbour', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Cordoba', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Cordoba', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Costa_Rica', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Costa_Rica', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Cuiaba', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Cuiaba', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Curacao', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Curacao', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Danmarkshavn', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Danmarkshavn', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Dawson', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Dawson', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Dawson_Creek', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Dawson_Creek', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Denver', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Denver', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Detroit', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Detroit', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Dominica', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Dominica', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Edmonton', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Edmonton', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Eirunepe', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Eirunepe', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\El_Salvador', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\El_Salvador', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Ensenada', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Ensenada', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Fortaleza', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Fortaleza', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Fort_Wayne', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Fort_Wayne', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Glace_Bay', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Glace_Bay', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Godthab', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Godthab', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Goose_Bay', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Goose_Bay', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Grand_Turk', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Grand_Turk', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Grenada', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Grenada', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Guadeloupe', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Guadeloupe', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Guatemala', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Guatemala', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Guayaquil', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Guayaquil', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Guyana', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Guyana', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Halifax', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Halifax', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Havana', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Havana', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Hermosillo', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Hermosillo', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Indianapolis', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Indianapolis', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Inuvik', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Inuvik', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Iqaluit', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Iqaluit', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Jamaica', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Jamaica', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Jujuy', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Jujuy', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Juneau', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Juneau', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Knox_IN', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Knox_IN', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\La_Paz', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\La_Paz', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Lima', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Lima', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Los_Angeles', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Los_Angeles', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Louisville', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Louisville', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Maceio', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Maceio', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Managua', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Managua', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Manaus', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Manaus', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Marigot', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Marigot', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Martinique', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Martinique', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Mazatlan', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Mazatlan', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Mendoza', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Mendoza', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Menominee', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Menominee', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Merida', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Merida', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Mexico_City', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Mexico_City', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Miquelon', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Miquelon', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Moncton', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Moncton', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Monterrey', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Monterrey', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Montevideo', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Montevideo', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Montreal', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Montreal', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Montserrat', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Montserrat', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Nassau', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Nassau', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\New_York', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\New_York', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Nipigon', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Nipigon', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Nome', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Nome', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Noronha', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Noronha', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Panama', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Panama', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Pangnirtung', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Pangnirtung', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Paramaribo', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Paramaribo', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Phoenix', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Phoenix', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Port-au-Prince', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Port-au-Prince', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Porto_Acre', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Porto_Acre', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Porto_Velho', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Porto_Velho', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Port_of_Spain', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Port_of_Spain', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Puerto_Rico', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Puerto_Rico', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Rainy_River', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Rainy_River', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Rankin_Inlet', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Rankin_Inlet', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Recife', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Recife', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Regina', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Regina', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Resolute', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Resolute', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Rio_Branco', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Rio_Branco', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Rosario', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Rosario', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Santiago', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Santiago', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Santo_Domingo', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Santo_Domingo', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Sao_Paulo', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Sao_Paulo', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Scoresbysund', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Scoresbysund', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Shiprock', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Shiprock', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\St_Barthelemy', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\St_Barthelemy', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\St_Johns', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\St_Johns', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\St_Kitts', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\St_Kitts', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\St_Lucia', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\St_Lucia', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\St_Thomas', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\St_Thomas', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\St_Vincent', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\St_Vincent', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Swift_Current', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Swift_Current', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Tegucigalpa', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Tegucigalpa', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Thule', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Thule', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Thunder_Bay', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Thunder_Bay', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Tijuana', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Tijuana', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Toronto', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Toronto', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Tortola', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Tortola', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Vancouver', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Vancouver', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Virgin', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Virgin', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Whitehorse', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Whitehorse', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Winnipeg', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Winnipeg', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Yakutat', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Yakutat', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Yellowknife', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Yellowknife', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\North_Dakota\\Center', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\North_Dakota\\Center', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\North_Dakota\\New_Salem', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\North_Dakota\\New_Salem', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Kentucky\\Louisville', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Kentucky\\Louisville', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Kentucky\\Monticello', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Kentucky\\Monticello', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Indiana\\Indianapolis', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Indiana\\Indianapolis', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Indiana\\Knox', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Indiana\\Knox', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Indiana\\Marengo', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Indiana\\Marengo', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Indiana\\Petersburg', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Indiana\\Petersburg', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Indiana\\Tell_City', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Indiana\\Tell_City', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Indiana\\Vevay', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Indiana\\Vevay', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Indiana\\Vincennes', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Indiana\\Vincennes', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Indiana\\Winamac', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Indiana\\Winamac', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Argentina\\Buenos_Aires', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Argentina\\Buenos_Aires', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Argentina\\Catamarca', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Argentina\\Catamarca', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Argentina\\ComodRivadavia', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Argentina\\ComodRivadavia', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Argentina\\Cordoba', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Argentina\\Cordoba', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Argentina\\Jujuy', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Argentina\\Jujuy', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Argentina\\La_Rioja', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Argentina\\La_Rioja', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Argentina\\Mendoza', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Argentina\\Mendoza', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Argentina\\Rio_Gallegos', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Argentina\\Rio_Gallegos', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Argentina\\San_Juan', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Argentina\\San_Juan', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Argentina\\San_Luis', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Argentina\\San_Luis', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Argentina\\Tucuman', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Argentina\\Tucuman', 'DATA'), ('_MEI\\tcl\\tzdata\\America\\Argentina\\Ushuaia', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\America\\Argentina\\Ushuaia', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Abidjan', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Abidjan', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Accra', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Accra', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Addis_Ababa', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Addis_Ababa', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Algiers', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Algiers', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Asmara', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Asmara', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Asmera', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Asmera', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Bamako', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Bamako', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Bangui', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Bangui', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Banjul', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Banjul', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Bissau', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Bissau', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Blantyre', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Blantyre', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Brazzaville', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Brazzaville', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Bujumbura', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Bujumbura', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Cairo', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Cairo', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Casablanca', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Casablanca', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Ceuta', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Ceuta', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Conakry', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Conakry', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Dakar', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Dakar', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Dar_es_Salaam', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Dar_es_Salaam', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Djibouti', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Djibouti', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Douala', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Douala', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\El_Aaiun', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\El_Aaiun', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Freetown', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Freetown', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Gaborone', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Gaborone', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Harare', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Harare', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Johannesburg', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Johannesburg', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Kampala', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Kampala', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Khartoum', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Khartoum', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Kigali', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Kigali', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Kinshasa', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Kinshasa', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Lagos', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Lagos', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Libreville', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Libreville', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Lome', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Lome', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Luanda', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Luanda', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Lubumbashi', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Lubumbashi', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Lusaka', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Lusaka', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Malabo', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Malabo', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Maputo', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Maputo', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Maseru', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Maseru', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Mbabane', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Mbabane', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Mogadishu', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Mogadishu', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Monrovia', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Monrovia', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Nairobi', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Nairobi', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Ndjamena', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Ndjamena', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Niamey', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Niamey', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Nouakchott', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Nouakchott', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Ouagadougou', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Ouagadougou', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Porto-Novo', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Porto-Novo', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Sao_Tome', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Sao_Tome', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Timbuktu', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Timbuktu', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Tripoli', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Tripoli', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Tunis', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Tunis', 'DATA'), ('_MEI\\tcl\\tzdata\\Africa\\Windhoek', 'C:\\Anaconda\\tcl\\tcl8.5\\tzdata\\Africa\\Windhoek', 'DATA'), ('_MEI\\tcl\\opt0.4\\optparse.tcl', 'C:\\Anaconda\\tcl\\tcl8.5\\opt0.4\\optparse.tcl', 'DATA'), ('_MEI\\tcl\\opt0.4\\pkgIndex.tcl', 'C:\\Anaconda\\tcl\\tcl8.5\\opt0.4\\pkgIndex.tcl', 'DATA'), ('_MEI\\tcl\\msgs\\af.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\af.msg', 'DATA'), ('_MEI\\tcl\\msgs\\af_za.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\af_za.msg', 'DATA'), ('_MEI\\tcl\\msgs\\ar.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\ar.msg', 'DATA'), ('_MEI\\tcl\\msgs\\ar_in.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\ar_in.msg', 'DATA'), ('_MEI\\tcl\\msgs\\ar_jo.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\ar_jo.msg', 'DATA'), ('_MEI\\tcl\\msgs\\ar_lb.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\ar_lb.msg', 'DATA'), ('_MEI\\tcl\\msgs\\ar_sy.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\ar_sy.msg', 'DATA'), ('_MEI\\tcl\\msgs\\be.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\be.msg', 'DATA'), ('_MEI\\tcl\\msgs\\bg.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\bg.msg', 'DATA'), ('_MEI\\tcl\\msgs\\bn.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\bn.msg', 'DATA'), ('_MEI\\tcl\\msgs\\bn_in.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\bn_in.msg', 'DATA'), ('_MEI\\tcl\\msgs\\ca.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\ca.msg', 'DATA'), ('_MEI\\tcl\\msgs\\cs.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\cs.msg', 'DATA'), ('_MEI\\tcl\\msgs\\da.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\da.msg', 'DATA'), ('_MEI\\tcl\\msgs\\de.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\de.msg', 'DATA'), ('_MEI\\tcl\\msgs\\de_at.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\de_at.msg', 'DATA'), ('_MEI\\tcl\\msgs\\de_be.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\de_be.msg', 'DATA'), ('_MEI\\tcl\\msgs\\el.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\el.msg', 'DATA'), ('_MEI\\tcl\\msgs\\en_au.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\en_au.msg', 'DATA'), ('_MEI\\tcl\\msgs\\en_be.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\en_be.msg', 'DATA'), ('_MEI\\tcl\\msgs\\en_bw.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\en_bw.msg', 'DATA'), ('_MEI\\tcl\\msgs\\en_ca.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\en_ca.msg', 'DATA'), ('_MEI\\tcl\\msgs\\en_gb.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\en_gb.msg', 'DATA'), ('_MEI\\tcl\\msgs\\en_hk.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\en_hk.msg', 'DATA'), ('_MEI\\tcl\\msgs\\en_ie.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\en_ie.msg', 'DATA'), ('_MEI\\tcl\\msgs\\en_in.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\en_in.msg', 'DATA'), ('_MEI\\tcl\\msgs\\en_nz.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\en_nz.msg', 'DATA'), ('_MEI\\tcl\\msgs\\en_ph.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\en_ph.msg', 'DATA'), ('_MEI\\tcl\\msgs\\en_sg.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\en_sg.msg', 'DATA'), ('_MEI\\tcl\\msgs\\en_za.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\en_za.msg', 'DATA'), ('_MEI\\tcl\\msgs\\en_zw.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\en_zw.msg', 'DATA'), ('_MEI\\tcl\\msgs\\eo.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\eo.msg', 'DATA'), ('_MEI\\tcl\\msgs\\es.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\es.msg', 'DATA'), ('_MEI\\tcl\\msgs\\es_ar.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\es_ar.msg', 'DATA'), ('_MEI\\tcl\\msgs\\es_bo.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\es_bo.msg', 'DATA'), ('_MEI\\tcl\\msgs\\es_cl.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\es_cl.msg', 'DATA'), ('_MEI\\tcl\\msgs\\es_co.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\es_co.msg', 'DATA'), ('_MEI\\tcl\\msgs\\es_cr.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\es_cr.msg', 'DATA'), ('_MEI\\tcl\\msgs\\es_do.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\es_do.msg', 'DATA'), ('_MEI\\tcl\\msgs\\es_ec.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\es_ec.msg', 'DATA'), ('_MEI\\tcl\\msgs\\es_gt.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\es_gt.msg', 'DATA'), ('_MEI\\tcl\\msgs\\es_hn.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\es_hn.msg', 'DATA'), ('_MEI\\tcl\\msgs\\es_mx.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\es_mx.msg', 'DATA'), ('_MEI\\tcl\\msgs\\es_ni.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\es_ni.msg', 'DATA'), ('_MEI\\tcl\\msgs\\es_pa.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\es_pa.msg', 'DATA'), ('_MEI\\tcl\\msgs\\es_pe.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\es_pe.msg', 'DATA'), ('_MEI\\tcl\\msgs\\es_pr.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\es_pr.msg', 'DATA'), ('_MEI\\tcl\\msgs\\es_py.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\es_py.msg', 'DATA'), ('_MEI\\tcl\\msgs\\es_sv.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\es_sv.msg', 'DATA'), ('_MEI\\tcl\\msgs\\es_uy.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\es_uy.msg', 'DATA'), ('_MEI\\tcl\\msgs\\es_ve.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\es_ve.msg', 'DATA'), ('_MEI\\tcl\\msgs\\et.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\et.msg', 'DATA'), ('_MEI\\tcl\\msgs\\eu.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\eu.msg', 'DATA'), ('_MEI\\tcl\\msgs\\eu_es.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\eu_es.msg', 'DATA'), ('_MEI\\tcl\\msgs\\fa.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\fa.msg', 'DATA'), ('_MEI\\tcl\\msgs\\fa_in.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\fa_in.msg', 'DATA'), ('_MEI\\tcl\\msgs\\fa_ir.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\fa_ir.msg', 'DATA'), ('_MEI\\tcl\\msgs\\fi.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\fi.msg', 'DATA'), ('_MEI\\tcl\\msgs\\fo.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\fo.msg', 'DATA'), ('_MEI\\tcl\\msgs\\fo_fo.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\fo_fo.msg', 'DATA'), ('_MEI\\tcl\\msgs\\fr.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\fr.msg', 'DATA'), ('_MEI\\tcl\\msgs\\fr_be.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\fr_be.msg', 'DATA'), ('_MEI\\tcl\\msgs\\fr_ca.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\fr_ca.msg', 'DATA'), ('_MEI\\tcl\\msgs\\fr_ch.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\fr_ch.msg', 'DATA'), ('_MEI\\tcl\\msgs\\ga.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\ga.msg', 'DATA'), ('_MEI\\tcl\\msgs\\ga_ie.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\ga_ie.msg', 'DATA'), ('_MEI\\tcl\\msgs\\gl.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\gl.msg', 'DATA'), ('_MEI\\tcl\\msgs\\gl_es.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\gl_es.msg', 'DATA'), ('_MEI\\tcl\\msgs\\gv.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\gv.msg', 'DATA'), ('_MEI\\tcl\\msgs\\gv_gb.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\gv_gb.msg', 'DATA'), ('_MEI\\tcl\\msgs\\he.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\he.msg', 'DATA'), ('_MEI\\tcl\\msgs\\hi.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\hi.msg', 'DATA'), ('_MEI\\tcl\\msgs\\hi_in.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\hi_in.msg', 'DATA'), ('_MEI\\tcl\\msgs\\hr.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\hr.msg', 'DATA'), ('_MEI\\tcl\\msgs\\hu.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\hu.msg', 'DATA'), ('_MEI\\tcl\\msgs\\id.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\id.msg', 'DATA'), ('_MEI\\tcl\\msgs\\id_id.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\id_id.msg', 'DATA'), ('_MEI\\tcl\\msgs\\is.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\is.msg', 'DATA'), ('_MEI\\tcl\\msgs\\it.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\it.msg', 'DATA'), ('_MEI\\tcl\\msgs\\it_ch.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\it_ch.msg', 'DATA'), ('_MEI\\tcl\\msgs\\ja.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\ja.msg', 'DATA'), ('_MEI\\tcl\\msgs\\kl.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\kl.msg', 'DATA'), ('_MEI\\tcl\\msgs\\kl_gl.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\kl_gl.msg', 'DATA'), ('_MEI\\tcl\\msgs\\ko.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\ko.msg', 'DATA'), ('_MEI\\tcl\\msgs\\kok.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\kok.msg', 'DATA'), ('_MEI\\tcl\\msgs\\kok_in.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\kok_in.msg', 'DATA'), ('_MEI\\tcl\\msgs\\ko_kr.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\ko_kr.msg', 'DATA'), ('_MEI\\tcl\\msgs\\kw.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\kw.msg', 'DATA'), ('_MEI\\tcl\\msgs\\kw_gb.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\kw_gb.msg', 'DATA'), ('_MEI\\tcl\\msgs\\lt.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\lt.msg', 'DATA'), ('_MEI\\tcl\\msgs\\lv.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\lv.msg', 'DATA'), ('_MEI\\tcl\\msgs\\mk.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\mk.msg', 'DATA'), ('_MEI\\tcl\\msgs\\mr.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\mr.msg', 'DATA'), ('_MEI\\tcl\\msgs\\mr_in.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\mr_in.msg', 'DATA'), ('_MEI\\tcl\\msgs\\ms.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\ms.msg', 'DATA'), ('_MEI\\tcl\\msgs\\ms_my.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\ms_my.msg', 'DATA'), ('_MEI\\tcl\\msgs\\mt.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\mt.msg', 'DATA'), ('_MEI\\tcl\\msgs\\nb.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\nb.msg', 'DATA'), ('_MEI\\tcl\\msgs\\nl.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\nl.msg', 'DATA'), ('_MEI\\tcl\\msgs\\nl_be.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\nl_be.msg', 'DATA'), ('_MEI\\tcl\\msgs\\nn.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\nn.msg', 'DATA'), ('_MEI\\tcl\\msgs\\pl.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\pl.msg', 'DATA'), ('_MEI\\tcl\\msgs\\pt.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\pt.msg', 'DATA'), ('_MEI\\tcl\\msgs\\pt_br.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\pt_br.msg', 'DATA'), ('_MEI\\tcl\\msgs\\ro.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\ro.msg', 'DATA'), ('_MEI\\tcl\\msgs\\ru.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\ru.msg', 'DATA'), ('_MEI\\tcl\\msgs\\ru_ua.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\ru_ua.msg', 'DATA'), ('_MEI\\tcl\\msgs\\sh.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\sh.msg', 'DATA'), ('_MEI\\tcl\\msgs\\sk.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\sk.msg', 'DATA'), ('_MEI\\tcl\\msgs\\sl.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\sl.msg', 'DATA'), ('_MEI\\tcl\\msgs\\sq.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\sq.msg', 'DATA'), ('_MEI\\tcl\\msgs\\sr.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\sr.msg', 'DATA'), ('_MEI\\tcl\\msgs\\sv.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\sv.msg', 'DATA'), ('_MEI\\tcl\\msgs\\sw.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\sw.msg', 'DATA'), ('_MEI\\tcl\\msgs\\ta.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\ta.msg', 'DATA'), ('_MEI\\tcl\\msgs\\ta_in.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\ta_in.msg', 'DATA'), ('_MEI\\tcl\\msgs\\te.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\te.msg', 'DATA'), ('_MEI\\tcl\\msgs\\te_in.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\te_in.msg', 'DATA'), ('_MEI\\tcl\\msgs\\th.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\th.msg', 'DATA'), ('_MEI\\tcl\\msgs\\tr.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\tr.msg', 'DATA'), ('_MEI\\tcl\\msgs\\uk.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\uk.msg', 'DATA'), ('_MEI\\tcl\\msgs\\vi.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\vi.msg', 'DATA'), ('_MEI\\tcl\\msgs\\zh.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\zh.msg', 'DATA'), ('_MEI\\tcl\\msgs\\zh_cn.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\zh_cn.msg', 'DATA'), ('_MEI\\tcl\\msgs\\zh_hk.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\zh_hk.msg', 'DATA'), ('_MEI\\tcl\\msgs\\zh_sg.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\zh_sg.msg', 'DATA'), ('_MEI\\tcl\\msgs\\zh_tw.msg', 'C:\\Anaconda\\tcl\\tcl8.5\\msgs\\zh_tw.msg', 'DATA'), ('_MEI\\tcl\\http1.0\\http.tcl', 'C:\\Anaconda\\tcl\\tcl8.5\\http1.0\\http.tcl', 'DATA'), ('_MEI\\tcl\\http1.0\\pkgIndex.tcl', 'C:\\Anaconda\\tcl\\tcl8.5\\http1.0\\pkgIndex.tcl', 'DATA'), ('_MEI\\tk\\bgerror.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\bgerror.tcl', 'DATA'), ('_MEI\\tk\\button.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\button.tcl', 'DATA'), ('_MEI\\tk\\choosedir.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\choosedir.tcl', 'DATA'), ('_MEI\\tk\\clrpick.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\clrpick.tcl', 'DATA'), ('_MEI\\tk\\comdlg.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\comdlg.tcl', 'DATA'), ('_MEI\\tk\\console.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\console.tcl', 'DATA'), ('_MEI\\tk\\dialog.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\dialog.tcl', 'DATA'), ('_MEI\\tk\\entry.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\entry.tcl', 'DATA'), ('_MEI\\tk\\focus.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\focus.tcl', 'DATA'), ('_MEI\\tk\\license.terms', 'C:\\Anaconda\\tcl\\tk8.5\\license.terms', 'DATA'), ('_MEI\\tk\\listbox.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\listbox.tcl', 'DATA'), ('_MEI\\tk\\menu.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\menu.tcl', 'DATA'), ('_MEI\\tk\\mkpsenc.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\mkpsenc.tcl', 'DATA'), ('_MEI\\tk\\msgbox.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\msgbox.tcl', 'DATA'), ('_MEI\\tk\\obsolete.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\obsolete.tcl', 'DATA'), ('_MEI\\tk\\optMenu.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\optMenu.tcl', 'DATA'), ('_MEI\\tk\\palette.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\palette.tcl', 'DATA'), ('_MEI\\tk\\panedwindow.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\panedwindow.tcl', 'DATA'), ('_MEI\\tk\\pkgIndex.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\pkgIndex.tcl', 'DATA'), ('_MEI\\tk\\safetk.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\safetk.tcl', 'DATA'), ('_MEI\\tk\\scale.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\scale.tcl', 'DATA'), ('_MEI\\tk\\scrlbar.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\scrlbar.tcl', 'DATA'), ('_MEI\\tk\\spinbox.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\spinbox.tcl', 'DATA'), ('_MEI\\tk\\tclIndex', 'C:\\Anaconda\\tcl\\tk8.5\\tclIndex', 'DATA'), ('_MEI\\tk\\tearoff.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\tearoff.tcl', 'DATA'), ('_MEI\\tk\\text.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\text.tcl', 'DATA'), ('_MEI\\tk\\tk.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\tk.tcl', 'DATA'), ('_MEI\\tk\\tkfbox.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\tkfbox.tcl', 'DATA'), ('_MEI\\tk\\unsupported.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\unsupported.tcl', 'DATA'), ('_MEI\\tk\\xmfbox.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\xmfbox.tcl', 'DATA'), ('_MEI\\tk\\ttk\\altTheme.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\altTheme.tcl', 'DATA'), ('_MEI\\tk\\ttk\\aquaTheme.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\aquaTheme.tcl', 'DATA'), ('_MEI\\tk\\ttk\\button.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\button.tcl', 'DATA'), ('_MEI\\tk\\ttk\\clamTheme.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\clamTheme.tcl', 'DATA'), ('_MEI\\tk\\ttk\\classicTheme.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\classicTheme.tcl', 'DATA'), ('_MEI\\tk\\ttk\\combobox.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\combobox.tcl', 'DATA'), ('_MEI\\tk\\ttk\\cursors.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\cursors.tcl', 'DATA'), ('_MEI\\tk\\ttk\\defaults.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\defaults.tcl', 'DATA'), ('_MEI\\tk\\ttk\\entry.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\entry.tcl', 'DATA'), ('_MEI\\tk\\ttk\\fonts.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\fonts.tcl', 'DATA'), ('_MEI\\tk\\ttk\\menubutton.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\menubutton.tcl', 'DATA'), ('_MEI\\tk\\ttk\\notebook.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\notebook.tcl', 'DATA'), ('_MEI\\tk\\ttk\\panedwindow.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\panedwindow.tcl', 'DATA'), ('_MEI\\tk\\ttk\\progress.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\progress.tcl', 'DATA'), ('_MEI\\tk\\ttk\\scale.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\scale.tcl', 'DATA'), ('_MEI\\tk\\ttk\\scrollbar.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\scrollbar.tcl', 'DATA'), ('_MEI\\tk\\ttk\\sizegrip.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\sizegrip.tcl', 'DATA'), ('_MEI\\tk\\ttk\\treeview.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\treeview.tcl', 'DATA'), ('_MEI\\tk\\ttk\\ttk.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\ttk.tcl', 'DATA'), ('_MEI\\tk\\ttk\\utils.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\utils.tcl', 'DATA'), ('_MEI\\tk\\ttk\\winTheme.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\winTheme.tcl', 'DATA'), ('_MEI\\tk\\ttk\\xpTheme.tcl', 'C:\\Anaconda\\tcl\\tk8.5\\ttk\\xpTheme.tcl', 'DATA'), ('_MEI\\tk\\msgs\\cs.msg', 'C:\\Anaconda\\tcl\\tk8.5\\msgs\\cs.msg', 'DATA'), ('_MEI\\tk\\msgs\\da.msg', 'C:\\Anaconda\\tcl\\tk8.5\\msgs\\da.msg', 'DATA'), ('_MEI\\tk\\msgs\\de.msg', 'C:\\Anaconda\\tcl\\tk8.5\\msgs\\de.msg', 'DATA'), ('_MEI\\tk\\msgs\\el.msg', 'C:\\Anaconda\\tcl\\tk8.5\\msgs\\el.msg', 'DATA'), ('_MEI\\tk\\msgs\\en.msg', 'C:\\Anaconda\\tcl\\tk8.5\\msgs\\en.msg', 'DATA'), ('_MEI\\tk\\msgs\\en_gb.msg', 'C:\\Anaconda\\tcl\\tk8.5\\msgs\\en_gb.msg', 'DATA'), ('_MEI\\tk\\msgs\\eo.msg', 'C:\\Anaconda\\tcl\\tk8.5\\msgs\\eo.msg', 'DATA'), ('_MEI\\tk\\msgs\\es.msg', 'C:\\Anaconda\\tcl\\tk8.5\\msgs\\es.msg', 'DATA'), ('_MEI\\tk\\msgs\\fr.msg', 'C:\\Anaconda\\tcl\\tk8.5\\msgs\\fr.msg', 'DATA'), ('_MEI\\tk\\msgs\\hu.msg', 'C:\\Anaconda\\tcl\\tk8.5\\msgs\\hu.msg', 'DATA'), ('_MEI\\tk\\msgs\\it.msg', 'C:\\Anaconda\\tcl\\tk8.5\\msgs\\it.msg', 'DATA'), ('_MEI\\tk\\msgs\\nl.msg', 'C:\\Anaconda\\tcl\\tk8.5\\msgs\\nl.msg', 'DATA'), ('_MEI\\tk\\msgs\\pl.msg', 'C:\\Anaconda\\tcl\\tk8.5\\msgs\\pl.msg', 'DATA'), ('_MEI\\tk\\msgs\\pt.msg', 'C:\\Anaconda\\tcl\\tk8.5\\msgs\\pt.msg', 'DATA'), ('_MEI\\tk\\msgs\\ru.msg', 'C:\\Anaconda\\tcl\\tk8.5\\msgs\\ru.msg', 'DATA'), ('_MEI\\tk\\msgs\\sv.msg', 'C:\\Anaconda\\tcl\\tk8.5\\msgs\\sv.msg', 'DATA'), ('_MEI\\tk\\images\\logo.eps', 'C:\\Anaconda\\tcl\\tk8.5\\images\\logo.eps', 'DATA'), ('_MEI\\tk\\images\\logo100.gif', 'C:\\Anaconda\\tcl\\tk8.5\\images\\logo100.gif', 'DATA'), ('_MEI\\tk\\images\\logo64.gif', 'C:\\Anaconda\\tcl\\tk8.5\\images\\logo64.gif', 'DATA'), ('_MEI\\tk\\images\\logoLarge.gif', 'C:\\Anaconda\\tcl\\tk8.5\\images\\logoLarge.gif', 'DATA'), ('_MEI\\tk\\images\\logoMed.gif', 'C:\\Anaconda\\tcl\\tk8.5\\images\\logoMed.gif', 'DATA'), ('_MEI\\tk\\images\\pwrdLogo.eps', 'C:\\Anaconda\\tcl\\tk8.5\\images\\pwrdLogo.eps', 'DATA'), ('_MEI\\tk\\images\\pwrdLogo100.gif', 'C:\\Anaconda\\tcl\\tk8.5\\images\\pwrdLogo100.gif', 'DATA'), ('_MEI\\tk\\images\\pwrdLogo150.gif', 'C:\\Anaconda\\tcl\\tk8.5\\images\\pwrdLogo150.gif', 'DATA'), ('_MEI\\tk\\images\\pwrdLogo175.gif', 'C:\\Anaconda\\tcl\\tk8.5\\images\\pwrdLogo175.gif', 'DATA'), ('_MEI\\tk\\images\\pwrdLogo200.gif', 'C:\\Anaconda\\tcl\\tk8.5\\images\\pwrdLogo200.gif', 'DATA'), ('_MEI\\tk\\images\\pwrdLogo75.gif', 'C:\\Anaconda\\tcl\\tk8.5\\images\\pwrdLogo75.gif', 'DATA'), ('_MEI\\tk\\images\\README', 'C:\\Anaconda\\tcl\\tk8.5\\images\\README', 'DATA'), ('_MEI\\tk\\images\\tai-ku.gif', 'C:\\Anaconda\\tcl\\tk8.5\\images\\tai-ku.gif', 'DATA')]>
Tkconstants: None -> <PyModule 'Tkconstants' C:\Anaconda\lib\lib-tk\Tkconstants.pyc imports=[] binaries=[] datas=[]>
tkCommonDialog: None -> <PyModule 'tkCommonDialog' C:\Anaconda\lib\lib-tk\tkCommonDialog.pyc imports=[('Tkinter', 0, 0, -1), ('Tkinter.*', 0, 0, -1)] binaries=[] datas=[]>
sqlite3: None -> <PkgModule 'sqlite3' C:\Anaconda\lib\sqlite3\__init__.pyc imports=[('dbapi2', 0, 0, -1), ('dbapi2.*', 0, 0, -1)] binaries=[] datas=[]>
sqlite3.dbapi2: None -> <PyModule 'sqlite3.dbapi2' C:\Anaconda\lib\sqlite3\dbapi2.pyc imports=[('datetime', 0, 0, -1), ('time', 0, 0, -1), ('_sqlite3', 0, 0, -1), ('_sqlite3.*', 0, 0, -1)] binaries=[] datas=[]>
sqlite3.datetime: None -> None
sqlite3.time: None -> None
sqlite3._sqlite3: None -> None
_sqlite3: None -> <ExtensionModule '_sqlite3' C:\Anaconda\DLLs\_sqlite3.pyd imports=[] binaries=[] datas=[]>
PyPDF2: None -> <PkgModule 'PyPDF2' C:\Anaconda\lib\site-packages\PyPDF2\__init__.pyc imports=[('pdf', 0, 0, 1), ('pdf.PdfFileReader', 0, 0, 1), ('pdf.PdfFileWriter', 0, 0, 1), ('merger', 0, 0, 1), ('merger.PdfFileMerger', 0, 0, 1), ('pagerange', 0, 0, 1), ('pagerange.PageRange', 0, 0, 1), ('pagerange.parse_filename_page_ranges', 0, 0, 1), ('_version', 0, 0, 1), ('_version.__version__', 0, 0, 1)] binaries=[] datas=[]>
PyPDF2.PdfFileMerger: None -> None
  DEL PyPDF2.PdfFileMerger
PyPDF2.PdfFileReader: None -> None
  DEL PyPDF2.PdfFileReader
PyPDF2.pdf: None -> <PyModule 'PyPDF2.pdf' C:\Anaconda\lib\site-packages\PyPDF2\pdf.pyc imports=[('string', 0, 0, -1), ('math', 0, 0, -1), ('struct', 0, 0, -1), ('sys', 0, 0, -1), ('sys', 0, 0, -1), ('sys.version_info', 0, 0, -1), ('cStringIO', 0, 1, -1), ('cStringIO.StringIO', 0, 1, -1), ('io', 0, 1, -1), ('io.StringIO', 0, 1, -1), ('io', 0, 1, -1), ('io.BytesIO', 0, 1, -1), ('', 0, 0, 1), ('filters', 0, 0, 1), ('', 0, 0, 1), ('utils', 0, 0, 1), ('warnings', 0, 0, -1), ('codecs', 0, 0, -1), ('generic', 0, 0, 1), ('generic.*', 0, 0, 1), ('utils', 0, 0, 1), ('utils.readNonWhitespace', 0, 0, 1), ('utils.readUntilWhitespace', 0, 0, 1), ('utils.ConvertFunctionsToVirtualList', 0, 0, 1), ('utils', 0, 0, 1), ('utils.b_', 0, 0, 1), ('utils.u_', 0, 0, 1), ('utils.ord_', 0, 0, 1), ('utils.chr_', 0, 0, 1), ('utils.str_', 0, 0, 1), ('sets', 0, 1, -1), ('sets.ImmutableSet', 0, 1, -1), ('md5', 0, 1, -1), ('md5.md5', 0, 1, -1), ('hashlib', 0, 1, -1), ('hashlib.md5', 0, 1, -1), ('time', 1, 0, -1), ('random', 1, 0, -1), ('struct', 1, 0, -1), ('struct', 1, 1, -1), ('struct', 1, 0, -1)] binaries=[] datas=[]>
PyPDF2.merger: None -> <PyModule 'PyPDF2.merger' C:\Anaconda\lib\site-packages\PyPDF2\merger.pyc imports=[('generic', 0, 0, 1), ('generic.*', 0, 0, 1), ('pdf', 0, 0, 1), ('pdf.PdfFileReader', 0, 0, 1), ('pdf.PdfFileWriter', 0, 0, 1), ('pagerange', 0, 0, 1), ('pagerange.PageRange', 0, 0, 1), ('sys', 0, 0, -1), ('sys.version_info', 0, 0, -1), ('cStringIO', 0, 1, -1), ('cStringIO.StringIO', 0, 1, -1), ('io', 0, 1, -1), ('io.StringIO', 0, 1, -1), ('io', 0, 1, -1), ('io.FileIO', 0, 1, -1)] binaries=[] datas=[]>
PyPDF2.pagerange: None -> <PyModule 'PyPDF2.pagerange' C:\Anaconda\lib\site-packages\PyPDF2\pagerange.pyc imports=[('re', 0, 0, -1)] binaries=[] datas=[]>
PyPDF2._version: None -> <PyModule 'PyPDF2._version' C:\Anaconda\lib\site-packages\PyPDF2\_version.pyc imports=[] binaries=[] datas=[]>
PyPDF2.string: None -> None
PyPDF2.math: None -> None
PyPDF2.struct: None -> None
PyPDF2.sys: None -> None
PyPDF2.cStringIO: None -> None
PyPDF2.io: None -> None
PyPDF2.filters: None -> <PyModule 'PyPDF2.filters' C:\Anaconda\lib\site-packages\PyPDF2\filters.pyc imports=[('utils', 0, 0, 1), ('utils.PdfReadError', 0, 0, 1), ('utils.ord_', 0, 0, 1), ('utils.chr_', 0, 0, 1), ('sys', 0, 0, -1), ('sys.version_info', 0, 0, -1), ('cStringIO', 0, 1, -1), ('cStringIO.StringIO', 0, 1, -1), ('io', 0, 1, -1), ('io.StringIO', 0, 1, -1), ('zlib', 0, 0, -1), ('System', 0, 1, -1), ('System', 0, 1, -1), ('System.IO', 0, 1, -1), ('System.Collections', 0, 1, -1), ('System.Array', 0, 1, -1), ('generic', 1, 0, 1), ('generic.NameObject', 1, 0, 1)] binaries=[] datas=[]>
PyPDF2.utils: None -> <PyModule 'PyPDF2.utils' C:\Anaconda\lib\site-packages\PyPDF2\utils.pyc imports=[('sys', 0, 0, -1), ('codecs', 1, 0, -1)] binaries=[] datas=[]>
PyPDF2.warnings: None -> None
PyPDF2.codecs: None -> None
PyPDF2.generic: None -> <PyModule 'PyPDF2.generic' C:\Anaconda\lib\site-packages\PyPDF2\generic.pyc imports=[('re', 0, 0, -1), ('utils', 0, 0, 1), ('utils.readNonWhitespace', 0, 0, 1), ('utils.RC4_encrypt', 0, 0, 1), ('utils', 0, 0, 1), ('utils.b_', 0, 0, 1), ('utils.u_', 0, 0, 1), ('utils.chr_', 0, 0, 1), ('utils.ord_', 0, 0, 1), ('utils', 0, 0, 1), ('utils.PdfStreamError', 0, 0, 1), ('warnings', 0, 0, -1), ('', 0, 0, 1), ('filters', 0, 0, 1), ('', 0, 0, 1), ('utils', 0, 0, 1), ('decimal', 0, 0, -1), ('codecs', 0, 0, -1), ('', 1, 0, 1), ('xmp', 1, 0, 1)] binaries=[] datas=[]>
PyPDF2.sets: None -> None
PyPDF2.md5: None -> None
md5: None -> <PyModule 'md5' C:\Anaconda\lib\md5.pyc imports=[('warnings', 0, 0, -1), ('hashlib', 0, 0, -1), ('hashlib.md5', 0, 0, -1)] binaries=[] datas=[]>
PyPDF2.hashlib: None -> None
PyPDF2.time: None -> None
PyPDF2.random: None -> None
PyPDF2.zlib: None -> None
PyPDF2.System: None -> None
System: None -> None
  DEL System
System: None -> None
  DEL System
System: None -> None
  DEL System
System: None -> None
  DEL System
System: None -> None
  DEL System
PyPDF2.re: None -> None
PyPDF2.decimal: None -> None
decimal: None -> <PyModule 'decimal' C:\Anaconda\lib\decimal.pyc imports=[('copy', 0, 0, -1), ('math', 0, 0, -1), ('numbers', 0, 0, -1), ('collections', 0, 0, -1), ('collections.namedtuple', 0, 0, -1), ('threading', 0, 0, -1), ('sys', 0, 1, -1), ('re', 0, 0, -1), ('locale', 0, 0, -1), ('doctest', 0, 1, -1), ('sys', 0, 1, -1), ('itertools', 1, 0, -1), ('itertools.chain', 1, 0, -1), ('itertools.repeat', 1, 0, -1)] binaries=[] datas=[]>
PyPDF2.xmp: None -> <PyModule 'PyPDF2.xmp' C:\Anaconda\lib\site-packages\PyPDF2\xmp.pyc imports=[('re', 0, 0, -1), ('datetime', 0, 0, -1), ('decimal', 0, 0, -1), ('generic', 0, 0, 1), ('generic.PdfObject', 0, 0, 1), ('xml.dom', 0, 0, -1), ('xml.dom.getDOMImplementation', 0, 0, -1), ('xml.dom.minidom', 0, 0, -1), ('xml.dom.minidom.parseString', 0, 0, -1), ('utils', 0, 0, 1), ('utils.u_', 0, 0, 1)] binaries=[] datas=[]>
numbers: None -> <PyModule 'numbers' C:\Anaconda\lib\numbers.pyc imports=[('__future__', 0, 0, -1), ('__future__.division', 0, 0, -1), ('abc', 0, 0, -1), ('abc.ABCMeta', 0, 0, -1), ('abc.abstractmethod', 0, 0, -1), ('abc.abstractproperty', 0, 0, -1)] binaries=[] datas=[]>
PyPDF2.datetime: None -> None
PyPDF2.xml: None -> None
xml: None -> <PkgModule 'xml' C:\Anaconda\lib\xml\__init__.pyc imports=[('_xmlplus', 0, 0, -1), ('sys', 0, 1, -1), ('xml.sax.xmlreader', 0, 0, -1), ('xml.sax.expatreader', 0, 0, -1)] binaries=[] datas=[]>
xml.dom: None -> <PkgModule 'xml.dom' C:\Anaconda\lib\xml\dom\__init__.pyc imports=[('domreg', 0, 0, -1), ('domreg.getDOMImplementation', 0, 0, -1), ('domreg.registerDOMImplementation', 0, 0, -1)] binaries=[] datas=[]>
xml.dom.getDOMImplementation: None -> None
xml.dom.minidom: None -> <PyModule 'xml.dom.minidom' C:\Anaconda\lib\xml\dom\minidom.pyc imports=[('xml.dom', 0, 0, -1), ('xml.dom', 0, 0, -1), ('xml.dom.EMPTY_NAMESPACE', 0, 0, -1), ('xml.dom.EMPTY_PREFIX', 0, 0, -1), ('xml.dom.XMLNS_NAMESPACE', 0, 0, -1), ('xml.dom.domreg', 0, 0, -1), ('xml.dom.minicompat', 0, 0, -1), ('xml.dom.minicompat.*', 0, 0, -1), ('xml.dom.xmlbuilder', 0, 0, -1), ('xml.dom.xmlbuilder.DOMImplementationLS', 0, 0, -1), ('xml.dom.xmlbuilder.DocumentLS', 0, 0, -1), ('codecs', 1, 1, -1), ('StringIO', 1, 0, -1), ('StringIO.StringIO', 1, 0, -1), ('xml.dom', 1, 1, -1), ('xml.dom.expatbuilder', 1, 1, -1), ('xml.dom', 1, 0, -1), ('xml.dom.pulldom', 1, 0, -1), ('xml.dom', 1, 1, -1), ('xml.dom.expatbuilder', 1, 1, -1), ('xml.dom', 1, 0, -1), ('xml.dom.pulldom', 1, 0, -1)] binaries=[] datas=[]>
xml._xmlplus: None -> None
_xmlplus: None -> None
  DEL _xmlplus
xml.sys: None -> None
xml.xml: None -> None
xml.sax: None -> <PkgModule 'xml.sax' C:\Anaconda\lib\xml\sax\__init__.pyc imports=[('xmlreader', 0, 0, -1), ('xmlreader.InputSource', 0, 0, -1), ('handler', 0, 0, -1), ('handler.ContentHandler', 0, 0, -1), ('handler.ErrorHandler', 0, 0, -1), ('_exceptions', 0, 0, -1), ('_exceptions.SAXException', 0, 0, -1), ('_exceptions.SAXNotRecognizedException', 0, 0, -1), ('_exceptions.SAXParseException', 0, 0, -1), ('_exceptions.SAXNotSupportedException', 0, 0, -1), ('_exceptions.SAXReaderNotAvailable', 0, 0, -1), ('xml.sax.expatreader', 0, 1, -1), ('os', 0, 0, -1), ('sys', 0, 0, -1), ('cStringIO', 1, 0, -1), ('cStringIO.StringIO', 1, 0, -1), ('StringIO', 1, 1, -1), ('StringIO.StringIO', 1, 1, -1), ('sys', 1, 1, -1), ('org.python.core', 1, 0, -1), ('org.python.core.imp', 1, 0, -1)] binaries=[] datas=[]>
xml.sax.xmlreader: None -> <PyModule 'xml.sax.xmlreader' C:\Anaconda\lib\xml\sax\xmlreader.pyc imports=[('handler', 0, 0, -1), ('_exceptions', 0, 0, -1), ('_exceptions.SAXNotSupportedException', 0, 0, -1), ('_exceptions.SAXNotRecognizedException', 0, 0, -1), ('saxutils', 1, 0, -1)] binaries=[] datas=[]>
xml.sax.expatreader: None -> <PyModule 'xml.sax.expatreader' C:\Anaconda\lib\xml\sax\expatreader.pyc imports=[('xml.sax._exceptions', 0, 0, -1), ('xml.sax._exceptions.*', 0, 0, -1), ('xml.sax.handler', 0, 0, -1), ('xml.sax.handler.feature_validation', 0, 0, -1), ('xml.sax.handler.feature_namespaces', 0, 0, -1), ('xml.sax.handler', 0, 0, -1), ('xml.sax.handler.feature_namespace_prefixes', 0, 0, -1), ('xml.sax.handler', 0, 0, -1), ('xml.sax.handler.feature_external_ges', 0, 0, -1), ('xml.sax.handler.feature_external_pes', 0, 0, -1), ('xml.sax.handler', 0, 0, -1), ('xml.sax.handler.feature_string_interning', 0, 0, -1), ('xml.sax.handler', 0, 0, -1), ('xml.sax.handler.property_xml_string', 0, 0, -1), ('xml.sax.handler.property_interning_dict', 0, 0, -1), ('sys', 0, 0, -1), ('xml.parsers', 0, 0, -1), ('xml.parsers.expat', 0, 0, -1), ('xml.sax', 0, 0, -1), ('xml.sax.xmlreader', 0, 0, -1), ('xml.sax.saxutils', 0, 0, -1), ('xml.sax.handler', 0, 0, -1), ('_weakref', 0, 0, -1), ('weakref', 0, 1, -1), ('xml.sax.saxutils', 0, 1, -1)] binaries=[] datas=[]>
xml.sax.handler: None -> <PyModule 'xml.sax.handler' C:\Anaconda\lib\xml\sax\handler.pyc imports=[] binaries=[] datas=[]>
xml.sax._exceptions: None -> <PyModule 'xml.sax._exceptions' C:\Anaconda\lib\xml\sax\_exceptions.pyc imports=[('sys', 0, 0, -1), ('java.lang', 0, 1, -1), ('java.lang.Exception', 0, 1, -1)] binaries=[] datas=[]>
xml.sax.xml: None -> None
xml.sax.os: None -> None
xml.sax.sys: None -> None
xml.sax.cStringIO: None -> None
xml.sax.StringIO: None -> None
xml.sax.org: None -> None
org: None -> None
  DEL org
org: None -> None
  DEL org
xml.sax.saxutils: None -> <PyModule 'xml.sax.saxutils' C:\Anaconda\lib\xml\sax\saxutils.pyc imports=[('os', 0, 0, -1), ('urlparse', 0, 0, -1), ('urllib', 0, 0, -1), ('types', 0, 0, -1), ('io', 0, 0, -1), ('sys', 0, 0, -1), ('handler', 0, 0, -1), ('xmlreader', 0, 0, -1), ('sys', 1, 1, -1)] binaries=[] datas=[]>
xml.sax.java: None -> None
java: None -> None
  DEL java
java: None -> None
  DEL java
xml.sax.urlparse: None -> None
xml.sax.urllib: None -> None
xml.sax.types: None -> None
xml.sax.io: None -> None
xml.parsers: None -> <PkgModule 'xml.parsers' C:\Anaconda\lib\xml\parsers\__init__.pyc imports=[] binaries=[] datas=[]>
xml.parsers.expat: None -> <PyModule 'xml.parsers.expat' C:\Anaconda\lib\xml\parsers\expat.pyc imports=[('pyexpat', 0, 0, -1), ('pyexpat.*', 0, 0, -1)] binaries=[] datas=[]>
xml.sax._weakref: None -> None
xml.sax.weakref: None -> None
xml.parsers.pyexpat: None -> None
pyexpat: None -> <ExtensionModule 'pyexpat' C:\Anaconda\DLLs\pyexpat.pyd imports=[('xmlparse', 0, 0, -1), ('xmltok', 0, 0, -1)] binaries=[] datas=[]>
xmlparse: None -> None
  DEL xmlparse
xmltok: None -> None
  DEL xmltok
xml.dom.domreg: None -> <PyModule 'xml.dom.domreg' C:\Anaconda\lib\xml\dom\domreg.pyc imports=[('xml.dom.minicompat', 0, 0, -1), ('xml.dom.minicompat.*', 0, 0, -1), ('os', 1, 0, -1), ('xml.dom.minidom', 0, 0, -1), ('xml.dom.DOMImplementation', 0, 0, -1)] binaries=[] datas=[]>
xml.dom.xml: None -> None
xml.dom.minicompat: None -> <PyModule 'xml.dom.minicompat' C:\Anaconda\lib\xml\dom\minicompat.pyc imports=[('xml.dom', 0, 0, -1)] binaries=[] datas=[]>
xml.dom.os: None -> None
xml.dom.DOMImplementation: None -> None
  DEL xml.dom.DOMImplementation
xml.dom.EMPTY_NAMESPACE: None -> None
  DEL xml.dom.EMPTY_NAMESPACE
xml.dom.EMPTY_PREFIX: None -> None
  DEL xml.dom.EMPTY_PREFIX
xml.dom.XMLNS_NAMESPACE: None -> None
  DEL xml.dom.XMLNS_NAMESPACE
xml.dom.xmlbuilder: None -> <PyModule 'xml.dom.xmlbuilder' C:\Anaconda\lib\xml\dom\xmlbuilder.pyc imports=[('copy', 0, 0, -1), ('xml.dom', 0, 0, -1), ('xml.dom.NodeFilter', 0, 0, -1), ('xml.dom.NodeFilter.NodeFilter', 0, 0, -1), ('urllib2', 1, 1, -1), ('xml.dom.expatbuilder', 1, 0, -1), ('posixpath', 1, 0, -1), ('urlparse', 1, 0, -1), ('urllib2', 1, 0, -1)] binaries=[] datas=[]>
xml.dom.codecs: None -> None
xml.dom.StringIO: None -> None
xml.dom.expatbuilder: None -> <PyModule 'xml.dom.expatbuilder' C:\Anaconda\lib\xml\dom\expatbuilder.pyc imports=[('xml.dom', 0, 0, -1), ('xml.dom.xmlbuilder', 0, 0, -1), ('xml.dom.minidom', 0, 0, -1), ('xml.dom.Node', 0, 0, -1), ('xml.dom', 0, 0, -1), ('xml.dom.EMPTY_NAMESPACE', 0, 0, -1), ('xml.dom.EMPTY_PREFIX', 0, 0, -1), ('xml.dom.XMLNS_NAMESPACE', 0, 0, -1), ('xml.parsers', 0, 0, -1), ('xml.parsers.expat', 0, 0, -1), ('xml.dom.minidom', 0, 0, -1), ('xml.dom.minidom._append_child', 0, 0, -1), ('xml.dom.minidom._set_attribute_node', 0, 0, -1), ('xml.dom.NodeFilter', 0, 0, -1), ('xml.dom.NodeFilter.NodeFilter', 0, 0, -1), ('xml.dom.minicompat', 0, 0, -1), ('xml.dom.minicompat.*', 0, 0, -1)] binaries=[] datas=[]>
xml.dom.pulldom: None -> <PyModule 'xml.dom.pulldom' C:\Anaconda\lib\xml\dom\pulldom.pyc imports=[('xml.sax', 0, 0, -1), ('xml.sax.handler', 0, 0, -1), ('types', 0, 0, -1), ('xml.dom', 1, 0, -1), ('xml.dom.XML_NAMESPACE', 1, 0, -1), ('xml.dom.minidom', 1, 1, -1), ('cStringIO', 1, 0, -1), ('cStringIO.StringIO', 1, 0, -1), ('StringIO', 1, 1, -1), ('StringIO.StringIO', 1, 1, -1)] binaries=[] datas=[]>
xml.dom.copy: None -> None
xml.dom.NodeFilter: None -> <PyModule 'xml.dom.NodeFilter' C:\Anaconda\lib\xml\dom\NodeFilter.pyc imports=[] binaries=[] datas=[]>
xml.dom.urllib2: None -> None
urllib2: None -> <PyModule 'urllib2' C:\Anaconda\lib\urllib2.pyc imports=[('base64', 0, 0, -1), ('hashlib', 0, 0, -1), ('httplib', 0, 0, -1), ('mimetools', 0, 0, -1), ('os', 0, 0, -1), ('posixpath', 0, 0, -1), ('random', 0, 0, -1), ('re', 0, 0, -1), ('socket', 0, 0, -1), ('sys', 0, 0, -1), ('time', 0, 0, -1), ('urlparse', 0, 0, -1), ('bisect', 0, 0, -1), ('warnings', 0, 0, -1), ('cStringIO', 0, 0, -1), ('cStringIO.StringIO', 0, 0, -1), ('StringIO', 0, 1, -1), ('StringIO.StringIO', 0, 1, -1), ('urllib', 0, 0, -1), ('urllib.unwrap', 0, 0, -1), ('urllib.unquote', 0, 0, -1), ('urllib.splittype', 0, 0, -1), ('urllib.splithost', 0, 0, -1), ('urllib.quote', 0, 0, -1), ('urllib.addinfourl', 0, 0, -1), ('urllib.splitport', 0, 0, -1), ('urllib.splittag', 0, 0, -1), ('urllib.toBytes', 0, 0, -1), ('urllib.splitattr', 0, 0, -1), ('urllib.ftpwrapper', 0, 0, -1), ('urllib.splituser', 0, 0, -1), ('urllib.splitpasswd', 0, 0, -1), ('urllib.splitvalue', 0, 0, -1), ('urllib', 0, 0, -1), ('urllib.localhost', 0, 0, -1), ('urllib.url2pathname', 0, 0, -1), ('urllib.getproxies', 0, 0, -1), ('urllib.proxy_bypass', 0, 0, -1), ('types', 1, 0, -1), ('cookielib', 1, 0, -1), ('email.utils', 1, 0, -1), ('mimetypes', 1, 0, -1), ('ftplib', 1, 0, -1), ('mimetypes', 1, 0, -1)] binaries=[] datas=[]>
xml.dom.posixpath: None -> None
xml.dom.urlparse: None -> None
bisect: None -> <PyModule 'bisect' C:\Anaconda\lib\bisect.pyc imports=[('_bisect', 0, 0, -1), ('_bisect.*', 0, 0, -1)] binaries=[] datas=[]>
cookielib: None -> <PyModule 'cookielib' C:\Anaconda\lib\cookielib.pyc imports=[('re', 0, 0, -1), ('urlparse', 0, 0, -1), ('copy', 0, 0, -1), ('time', 0, 0, -1), ('urllib', 0, 0, -1), ('threading', 0, 0, -1), ('dummy_threading', 0, 1, -1), ('httplib', 0, 0, -1), ('calendar', 0, 0, -1), ('calendar.timegm', 0, 0, -1), ('_LWPCookieJar', 0, 0, -1), ('_LWPCookieJar.LWPCookieJar', 0, 0, -1), ('_LWPCookieJar.lwp_cookie_str', 0, 0, -1), ('_MozillaCookieJar', 0, 0, -1), ('_MozillaCookieJar.MozillaCookieJar', 0, 0, -1), ('logging', 1, 1, -1), ('warnings', 1, 0, -1), ('traceback', 1, 0, -1), ('StringIO', 1, 0, -1)] binaries=[] datas=[]>
_bisect: None -> <BuiltinModule '_bisect' None imports=[] binaries=[] datas=[]>
dummy_threading: None -> <PyModule 'dummy_threading' C:\Anaconda\lib\dummy_threading.pyc imports=[('sys', 0, 0, -1), ('sys.modules', 0, 0, -1), ('dummy_thread', 0, 0, -1), ('threading', 0, 0, -1), ('_dummy_threading', 0, 0, -1), ('_dummy_threading.*', 0, 0, -1), ('_dummy_threading', 0, 0, -1), ('_dummy_threading.__all__', 0, 0, -1)] binaries=[] datas=[]>
_LWPCookieJar: None -> <PyModule '_LWPCookieJar' C:\Anaconda\lib\_LWPCookieJar.pyc imports=[('time', 0, 0, -1), ('re', 0, 0, -1), ('cookielib', 0, 0, -1), ('cookielib._warn_unhandled_exception', 0, 0, -1), ('cookielib.FileCookieJar', 0, 0, -1), ('cookielib.LoadError', 0, 0, -1), ('cookielib.Cookie', 0, 0, -1), ('cookielib.MISSING_FILENAME_TEXT', 0, 0, -1), ('cookielib.join_header_words', 0, 0, -1), ('cookielib.split_header_words', 0, 0, -1), ('cookielib.iso2time', 0, 0, -1), ('cookielib.time2isoz', 0, 0, -1)] binaries=[] datas=[]>
_MozillaCookieJar: None -> <PyModule '_MozillaCookieJar' C:\Anaconda\lib\_MozillaCookieJar.pyc imports=[('re', 0, 0, -1), ('time', 0, 0, -1), ('cookielib', 0, 0, -1), ('cookielib._warn_unhandled_exception', 0, 0, -1), ('cookielib.FileCookieJar', 0, 0, -1), ('cookielib.LoadError', 0, 0, -1), ('cookielib.Cookie', 0, 0, -1), ('cookielib.MISSING_FILENAME_TEXT', 0, 0, -1)] binaries=[] datas=[]>
_dummy_threading: None -> None
  DEL _dummy_threading
_dummy_threading: None -> None
  DEL _dummy_threading
_dummy_threading: None -> None
  DEL _dummy_threading
_dummy_threading: None -> None
  DEL _dummy_threading
xml.dom.Node: None -> None
xml.dom.EMPTY_NAMESPACE: None -> None
  DEL xml.dom.EMPTY_NAMESPACE
xml.dom.EMPTY_PREFIX: None -> None
  DEL xml.dom.EMPTY_PREFIX
xml.dom.XMLNS_NAMESPACE: None -> None
  DEL xml.dom.XMLNS_NAMESPACE
xml.dom.types: None -> None
xml.dom.XML_NAMESPACE: None -> None
  DEL xml.dom.XML_NAMESPACE
xml.dom.cStringIO: None -> None
__main__: <PyScript '__main__' D:\Dropbox\Programming\Python\PY_APPS_COLLABORATIVE\LabCuro\LabCuro_v2.0\LabCuro_lab_v2.0\src\LabCuro_lab_v2.0.py imports=[('os', 0, 0, -1), ('time', 0, 0, -1), ('shutil', 0, 0, -1), ('re', 0, 0, -1), ('json', 0, 0, -1), ('csv', 0, 0, -1), ('datetime', 0, 0, -1), ('useful_fx', 0, 0, -1), ('install_labcuro', 0, 0, -1), ('map_network_drive', 0, 0, -1), ('multi_inputbox', 0, 0, -1), ('pdf_merger', 0, 0, -1), ('admin_settings', 0, 0, -1), ('database_handler', 0, 0, -1), ('easygui_labcuro', 0, 0, -1), ('easygui_labcuro.msgbox', 0, 0, -1), ('easygui_labcuro.buttonbox', 0, 0, -1), ('easygui_labcuro.ccbox', 0, 0, -1), ('easygui_labcuro.choicebox', 0, 0, -1)] binaries=[] datas=[]> -> <PyScript '__main__' D:\Dropbox\Programming\Python\APPS\pyinstaller-2.0\support/rthooks/pyi_rth_PIL_Image.py imports=[('sys', 0, 0, -1), ('iu', 0, 0, -1)] binaries=[] datas=[]>
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
__main__: <PyScript '__main__' D:\Dropbox\Programming\Python\APPS\pyinstaller-2.0\support/rthooks/pyi_rth_PIL_Image.py imports=[('sys', 0, 0, -1), ('iu', 0, 0, -1)] binaries=[] datas=[]> -> <PyScript '__main__' D:\Dropbox\Programming\Python\APPS\pyinstaller-2.0\support/rthooks/pyi_rth_encodings.py imports=[('encodings', 0, 0, -1)] binaries=[] datas=[]>
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
_emx_link: None -> None
  DEL _emx_link
_emx_link: None -> None
  DEL _emx_link
pwd: None -> None
  DEL pwd
pwd: None -> None
  DEL pwd
org: None -> None
  DEL org
org: None -> None
  DEL org
fcntl: None -> None
  DEL fcntl
rourl2path: None -> None
  DEL rourl2path
rourl2path: None -> None
  DEL rourl2path
rourl2path: None -> None
  DEL rourl2path
_scproxy: None -> None
  DEL _scproxy
_scproxy: None -> None
  DEL _scproxy
_scproxy: None -> None
  DEL _scproxy
fcntl: None -> None
  DEL fcntl
SOCKS: None -> None
  DEL SOCKS
termios: None -> None
  DEL termios
EasyDialogs: None -> None
  DEL EasyDialogs
EasyDialogs: None -> None
  DEL EasyDialogs
pwd: None -> None
  DEL pwd
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
clr: None -> None
  DEL clr
System: None -> None
  DEL System
System: None -> None
  DEL System
startup: None -> None
  DEL startup
ctypes.windll: None -> None
  DEL ctypes.windll
startup: None -> None
  DEL startup
clr: None -> None
  DEL clr
IronPythonConsole: None -> None
  DEL IronPythonConsole
System: None -> None
  DEL System
pyreadline.keysyms.make_keysym: None -> None
  DEL pyreadline.keysyms.make_keysym
pyreadline.keysyms.make_keyinfo: None -> None
  DEL pyreadline.keysyms.make_keyinfo
pyreadline.keysyms.make_KeyPress: None -> None
  DEL pyreadline.keysyms.make_KeyPress
pyreadline.keysyms.make_KeyPress_from_keydescr: None -> None
  DEL pyreadline.keysyms.make_KeyPress_from_keydescr
console: None -> None
  DEL console
pyreadline.keysyms.make_KeyPress: None -> None
  DEL pyreadline.keysyms.make_KeyPress
pyreadline.keysyms.KeyPress: None -> None
  DEL pyreadline.keysyms.KeyPress
ctypes.cdll: None -> None
  DEL ctypes.cdll
ctypes._SimpleCData: None -> None
  DEL ctypes._SimpleCData
pyreadline.modes.editingmodes: None -> None
  DEL pyreadline.modes.editingmodes
System: None -> None
  DEL System
org: None -> None
  DEL org
org: None -> None
  DEL org
__main__: <PyScript '__main__' D:\Dropbox\Programming\Python\APPS\pyinstaller-2.0\support/rthooks/pyi_rth_encodings.py imports=[('encodings', 0, 0, -1)] binaries=[] datas=[]> -> <PyScript '__main__' D:\Dropbox\Programming\Python\APPS\pyinstaller-2.0\support/rthooks/pyi_rth_Tkinter.py imports=[('os', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
posix: None -> None
  DEL posix
_emx_link: None -> None
  DEL _emx_link
_emx_link: None -> None
  DEL _emx_link
pwd: None -> None
  DEL pwd
pwd: None -> None
  DEL pwd
org: None -> None
  DEL org
org: None -> None
  DEL org
fcntl: None -> None
  DEL fcntl
rourl2path: None -> None
  DEL rourl2path
rourl2path: None -> None
  DEL rourl2path
rourl2path: None -> None
  DEL rourl2path
_scproxy: None -> None
  DEL _scproxy
_scproxy: None -> None
  DEL _scproxy
_scproxy: None -> None
  DEL _scproxy
fcntl: None -> None
  DEL fcntl
SOCKS: None -> None
  DEL SOCKS
termios: None -> None
  DEL termios
EasyDialogs: None -> None
  DEL EasyDialogs
EasyDialogs: None -> None
  DEL EasyDialogs
pwd: None -> None
  DEL pwd
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
clr: None -> None
  DEL clr
System: None -> None
  DEL System
System: None -> None
  DEL System
startup: None -> None
  DEL startup
ctypes.windll: None -> None
  DEL ctypes.windll
startup: None -> None
  DEL startup
clr: None -> None
  DEL clr
IronPythonConsole: None -> None
  DEL IronPythonConsole
System: None -> None
  DEL System
pyreadline.keysyms.make_keysym: None -> None
  DEL pyreadline.keysyms.make_keysym
pyreadline.keysyms.make_keyinfo: None -> None
  DEL pyreadline.keysyms.make_keyinfo
pyreadline.keysyms.make_KeyPress: None -> None
  DEL pyreadline.keysyms.make_KeyPress
pyreadline.keysyms.make_KeyPress_from_keydescr: None -> None
  DEL pyreadline.keysyms.make_KeyPress_from_keydescr
console: None -> None
  DEL console
pyreadline.keysyms.make_KeyPress: None -> None
  DEL pyreadline.keysyms.make_KeyPress
pyreadline.keysyms.KeyPress: None -> None
  DEL pyreadline.keysyms.KeyPress
ctypes.cdll: None -> None
  DEL ctypes.cdll
ctypes._SimpleCData: None -> None
  DEL ctypes._SimpleCData
pyreadline.modes.editingmodes: None -> None
  DEL pyreadline.modes.editingmodes
System: None -> None
  DEL System
org: None -> None
  DEL org
org: None -> None
  DEL org
